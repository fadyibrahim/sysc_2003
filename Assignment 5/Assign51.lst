WARNING: EXTCODE CODE AREA DO NOT CONTAIN RELOCATED ADDRESSES.
THIS WILL BE REMEDIED IN A LATER RELEASE.
                        .module Assign51.c
                        .area data
 1000            _changingSpeed::
 1000                    .blkb 2
                        .area idata
--- 0000 007B              .word 123
                        .area data
--- 0002                   .dbfile M:\Assign51\Assign51.c
--- 0002                   .dbsym e changingSpeed _changingSpeed I
 1002            _changingTemp::
 1002                    .blkb 2
                        .area idata
--- 0002 0017              .word 23
                        .area data
--- 0004                   .dbfile M:\Assign51\Assign51.c
--- 0004                   .dbsym e changingTemp _changingTemp I
                        .area text
--- 0000                   .dbfile M:\Assign51\Assign51.c
--- 0000                   .dbfunc e main _main fV
--- 0000           ;          ?temp -> -2,x
 402A            _main::
 402A  34                pshx
 402B  B775              tfr s,x
 402D  1B9C              leas -4,sp
 402F                    .dbline -1
 402F                    .dbline 13
 402F            ; /*
 402F            ; Authors Gavez Smith 100857991, Fady Ibrahim 100876906
 402F            ; */
 402F            ; #include "hcs12dp256.h"
 402F            ; #include"stdio.h"
 402F            ; #pragma interrupt_handler printKeysPressed()
 402F            ; 
 402F            ; void Inc_Dec_Speed(int speed, int temp );
 402F            ; void displaySpeed_Temp(int speed, int temp);
 402F            ; int changingSpeed=123;
 402F            ; int changingTemp=23;
 402F            ; 
 402F            ; void main(){
 402F                    .dbline 15
 402F            ; 
 402F            ;        Lcd2PP_Init();
 402F  1643E9            jsr _Lcd2PP_Init
 4032                    .dbline 16
 4032            ;        displaySpeed_Temp(++changingSpeed, changingTemp);
 4032  1801801002        movw _changingTemp,0,sp
 4037  FC1000            ldd _changingSpeed
 403A  C30001            addd #1
 403D  6C1E              std -2,x
 403F  18051E1000        movw -2,x,_changingSpeed
 4044  EC1E              ldd -2,x
 4046  16421B            jsr _displaySpeed_Temp
 4049                    .dbline 17
 4049            ;        DDRP |= 0x0F; // bitset PP0-3 as outputs (rows) 
 4049  1C025A0F          bset 0x25a,#15
 404D                    .dbline 18
 404D            ;        DDRH &= 0x0F; // bitclear PH4..7 as inputs (columns)
 404D  1D0262F0          bclr 0x262,#0xf0
 4051                    .dbline 19
 4051            ;        PTP = 0x0F; // Set scan row(s)
 4051  C60F              ldab #15
 4053  7B0258            stab 0x258
 4056                    .dbline 20
 4056            ;        PIFH = 0xFF; // Clear previous interrupt flags
 4056  C6FF              ldab #255
 4058  7B0267            stab 0x267
 405B                    .dbline 21
 405B            ;        PPSH = 0xF0; // Rising Edge
 405B  C6F0              ldab #240
 405D  7B0265            stab 0x265
 4060                    .dbline 22
 4060            ;        PERH = 0x00; // Disable pulldowns
 4060  790264            clr 0x264
 4063                    .dbline 23
 4063            ;        PIEH |= 0xF0; // Local enable on columns inputs
 4063  1C0266F0          bset 0x266,#240
 4067                    .dbline 29
 4067            ;        // enable the latch.
 4067            ;        //PTM |= 0x08;
 4067            ;        //
 4067            ;        
 4067            ;        //asm("LDS #$3DFF");   
 4067            ;        asm("cli");
 4067  10EF                      cli
 4069            
 4069            L4:
 4069                    .dbline 31
 4069                    .dbline 31
 4069            L5:
 4069                    .dbline 31
 4069  20FE              bra L4
 406B            X0:
 406B                    .dbline 31
 406B            ;        
 406B            ;        while(1){};
 406B                    .dbline -2
 406B                    .dbline 33
 406B            ;        
 406B            ; }
 406B            L3:
 406B  B757              tfr x,s
 406D  30                pulx
 406E                    .dbline 0 ; func end
 406E  3D                rts
 406F                    .dbend
 406F                    .dbfunc e printKeysPressed _printKeysPressed fV
 406F            ;          ?temp -> -8,x
 406F            ;          ?temp -> -8,x
 406F            ;          ?temp -> -6,x
 406F            ;          count -> -4,x
 406F            ;              i -> -2,x
 406F            _printKeysPressed::
 406F  34                pshx
 4070  B775              tfr s,x
 4072  1B96              leas -10,sp
 4074                    .dbline -1
 4074                    .dbline 39
 4074            ; 
 4074            ; /*
 4074            ; printKeysPressed gets the character pressed on the keyboard by pulling and then it prints out the value on the terminal.
 4074            ; 
 4074            ; */
 4074            ; void printKeysPressed(){   
 4074                    .dbline 41
 4074            ;       int i, count;
 4074            ;       asm("sei");
 4074  1410                      sei
 4076            
 4076                    .dbline 43
 4076            ; 
 4076            ;       for (count=1; count<=0x08; count<<=1)
 4076  CC0001            ldd #1
 4079  6C1C              std -4,x
 407B            L8:
 407B                    .dbline 44
 407B            ;       {
 407B                    .dbline 45
 407B            ;               PTH&=0x0F;
 407B  1D0260F0          bclr 0x260,#0xf0
 407F                    .dbline 46
 407F            ;               PTP = (PTP&0xF0) | count;
 407F                    ; vol
 407F  F60258            ldab 0x258
 4082  87                clra
 4083  8400              anda #0
 4085  C4F0              andb #240
 4087  AA1C              ora -4,x
 4089  EA1D              orb -3,x
 408B  7B0258            stab 0x258
 408E                    .dbline 48
 408E  CC0000            ldd #0
 4091  6C1E              std -2,x
 4093            L12:
 4093                    .dbline 48
 4093            L13:
 4093                    .dbline 48
 4093            ;               
 4093            ;               for (i=0;i<1000;i++);
 4093  EC1E              ldd -2,x
 4095  C30001            addd #1
 4098  6C1E              std -2,x
 409A                    .dbline 48
 409A  EC1E              ldd -2,x
 409C  8C03E8            cpd #1000
 409F  2DF2              blt L12
 40A1                    .dbline 49
 40A1            ;               switch(PTH & 0xF0){
 40A1                    ; vol
 40A1  F60260            ldab 0x260
 40A4  87                clra
 40A5  8400              anda #0
 40A7  C4F0              andb #240
 40A9  6C1A              std -6,x
 40AB  8C0020            cpd #32
 40AE  1827008A          lbeq L32
 40B2  EC1A              ldd -6,x
 40B4  8C0020            cpd #32
 40B7  2E0B              bgt L72
 40B9            L71:
 40B9  EC1A              ldd -6,x
 40BB  8C0010            cpd #16
 40BE  2723              beq L19
 40C0  18200138          lbra L16
 40C4            L72:
 40C4  EC1A              ldd -6,x
 40C6  8C0040            cpd #64
 40C9  182700B2          lbeq L45
 40CD  EC1A              ldd -6,x
 40CF  8C0040            cpd #64
 40D2  182D0126          lblt L16
 40D6            L73:
 40D6  EC1A              ldd -6,x
 40D8  8C0080            cpd #128
 40DB  182700D4          lbeq L58
 40DF  18200119          lbra L16
 40E3            X1:
 40E3                    .dbline 49
 40E3            L19:
 40E3                    .dbline 51
 40E3            ;                    case 0x10:
 40E3            ;                                 if(PTP & 0x01) printf("1");
 40E3  1F0258010A        brclr 0x258,#1,L20
 40E8                    .dbline 51
 40E8  CC43CF            ldd #L22
 40EB  164909            jsr _printf
 40EE  1820010A          lbra L17
 40F2            L20:
 40F2                    .dbline 52
 40F2            ;                                 else if(PTP & 0x02) printf("4");
 40F2  1F0258020A        brclr 0x258,#2,L23
 40F7                    .dbline 52
 40F7  CC43CD            ldd #L25
 40FA  164909            jsr _printf
 40FD  182000FB          lbra L17
 4101            L23:
 4101                    .dbline 53
 4101            ;                                 else if(PTP & 0x04) printf("7");
 4101  1F0258040A        brclr 0x258,#4,L26
 4106                    .dbline 53
 4106  CC43CB            ldd #L28
 4109  164909            jsr _printf
 410C  182000EC          lbra L17
 4110            L26:
 4110                    .dbline 54
 4110            ;                                 else if(PTP & 0x08){ 
 4110  1F02580802        brclr 0x258,#8,X2
 4115  2004              bra X3
 4117  182000E1  X2:     lbra L17
 411B            X3:
 411B                    .dbline 54
 411B                    .dbline 55
 411B            ;                                     printf("E");
 411B  CC43C9            ldd #L31
 411E  164909            jsr _printf
 4121                    .dbline 56
 4121            ;                                         displaySpeed_Temp(++changingSpeed, changingTemp);
 4121  1801801002        movw _changingTemp,0,sp
 4126  FC1000            ldd _changingSpeed
 4129  C30001            addd #1
 412C  6C18              std -8,x
 412E  1805181000        movw -8,x,_changingSpeed
 4133  EC18              ldd -8,x
 4135  16421B            jsr _displaySpeed_Temp
 4138                    .dbline 57
 4138            ;                             }
 4138                    .dbline 58
 4138            ;                        break;
 4138  182000C0          lbra L17
 413C            L32:
 413C                    .dbline 61
 413C            ; 
 413C            ;                    case 0x20:
 413C            ;                             if(PTP & 0x01) printf("2");
 413C  1F0258010A        brclr 0x258,#1,L33
 4141                    .dbline 61
 4141  CC43C7            ldd #L35
 4144  164909            jsr _printf
 4147  182000B1          lbra L17
 414B            L33:
 414B                    .dbline 62
 414B            ;                                 else if(PTP & 0x02) printf("5");
 414B  1F0258020A        brclr 0x258,#2,L36
 4150                    .dbline 62
 4150  CC43C5            ldd #L38
 4153  164909            jsr _printf
 4156  182000A2          lbra L17
 415A            L36:
 415A                    .dbline 63
 415A            ;                                 else if(PTP & 0x04) printf("8");
 415A  1F0258040A        brclr 0x258,#4,L39
 415F                    .dbline 63
 415F  CC43C3            ldd #L41
 4162  164909            jsr _printf
 4165  18200093          lbra L17
 4169            L39:
 4169                    .dbline 64
 4169            ;                                 else if(PTP & 0x08){
 4169  1F02580802        brclr 0x258,#8,X4
 416E  2004              bra X5
 4170  18200088  X4:     lbra L17
 4174            X5:
 4174                    .dbline 64
 4174                    .dbline 65
 4174            ;                                     printf("0");
 4174  CC43C1            ldd #L44
 4177  164909            jsr _printf
 417A                    .dbline 66
 417A            ;                                         asm("swi");
 417A  3F                        swi
 417B            
 417B                    .dbline 67
 417B            ;                                 }
 417B                    .dbline 68
 417B            ;                        break;
 417B  1820007D          lbra L17
 417F            L45:
 417F                    .dbline 71
 417F            ;                    
 417F            ;                    case 0x40:
 417F            ;                             if(PTP & 0x01) printf("3");
 417F  1F02580108        brclr 0x258,#1,L46
 4184                    .dbline 71
 4184  CC43BF            ldd #L48
 4187  164909            jsr _printf
 418A  2070              bra L17
 418C            L46:
 418C                    .dbline 72
 418C            ;                                 else if(PTP & 0x02) printf("6");
 418C  1F02580208        brclr 0x258,#2,L49
 4191                    .dbline 72
 4191  CC43BD            ldd #L51
 4194  164909            jsr _printf
 4197  2063              bra L17
 4199            L49:
 4199                    .dbline 73
 4199            ;                                 else if(PTP & 0x04) printf("9");
 4199  1F02580408        brclr 0x258,#4,L52
 419E                    .dbline 73
 419E  CC43BB            ldd #L54
 41A1  164909            jsr _printf
 41A4  2056              bra L17
 41A6            L52:
 41A6                    .dbline 74
 41A6            ;                                 else if(PTP & 0x08) printf("F");
 41A6  1F02580851        brclr 0x258,#8,L17
 41AB                    .dbline 74
 41AB  CC43B9            ldd #L57
 41AE  164909            jsr _printf
 41B1                    .dbline 75
 41B1            ;                    break;
 41B1  2049              bra L17
 41B3            L58:
 41B3                    .dbline 78
 41B3            ;                        
 41B3            ;                    case 0x80:
 41B3            ;                             if(PTP & 0x01) printf("A");
 41B3  1F02580108        brclr 0x258,#1,L59
 41B8                    .dbline 78
 41B8  CC43B7            ldd #L61
 41BB  164909            jsr _printf
 41BE  203C              bra L17
 41C0            L59:
 41C0                    .dbline 79
 41C0            ;                                 else if(PTP & 0x02) printf("B");
 41C0  1F02580208        brclr 0x258,#2,L62
 41C5                    .dbline 79
 41C5  CC43B5            ldd #L64
 41C8  164909            jsr _printf
 41CB  202F              bra L17
 41CD            L62:
 41CD                    .dbline 80
 41CD            ;                                 else if(PTP & 0x04) printf("C");
 41CD  1F02580408        brclr 0x258,#4,L65
 41D2                    .dbline 80
 41D2  CC43B3            ldd #L67
 41D5  164909            jsr _printf
 41D8  2022              bra L17
 41DA            L65:
 41DA                    .dbline 81
 41DA            ;                                 else if(PTP & 0x08){
 41DA  1F0258081D        brclr 0x258,#8,L17
 41DF                    .dbline 81
 41DF                    .dbline 82
 41DF            ;                                      printf("D");
 41DF  CC43B1            ldd #L70
 41E2  164909            jsr _printf
 41E5                    .dbline 83
 41E5            ;                                          displaySpeed_Temp(--changingSpeed, changingTemp);
 41E5  1801801002        movw _changingTemp,0,sp
 41EA  FC1000            ldd _changingSpeed
 41ED  830001            subd #1
 41F0  6C18              std -8,x
 41F2  1805181000        movw -8,x,_changingSpeed
 41F7  EC18              ldd -8,x
 41F9  16421B            jsr _displaySpeed_Temp
 41FC                    .dbline 84
 41FC            ;                                 }
 41FC                    .dbline 85
 41FC            ;                    break; 
 41FC            L16:
 41FC            L17:
 41FC                    .dbline 87
 41FC            L9:
 41FC                    .dbline 43
 41FC  EC1C              ldd -4,x
 41FE  59                lsld
 41FF  6C1C              std -4,x
 4201                    .dbline 43
 4201  EC1C              ldd -4,x
 4203  8C0008            cpd #8
 4206  182FFE71          lble L8
 420A                    .dbline 90
 420A            ;               }
 420A            ;        }
 420A            ;               
 420A            ;                                               
 420A            ;       PTP = 0x0F;
 420A  C60F              ldab #15
 420C  7B0258            stab 0x258
 420F                    .dbline 91
 420F            ;       PIFH = PIFH; // Acknowledge (all) interrupts
 420F                    ; vol
 420F  F60267            ldab 0x267
 4212  7B0267            stab 0x267
 4215                    .dbline 92
 4215            ;     asm("cli");
 4215  10EF                      cli
 4217            
 4217                    .dbline -2
 4217                    .dbline 93
 4217            ; }
 4217            L7:
 4217  B757              tfr x,s
 4219  30                pulx
 421A                    .dbline 0 ; func end
 421A  0B                rti
 421B                    .dbsym l count -4 I
 421B                    .dbsym l i -2 I
 421B                    .dbend
 421B                    .dbfunc e displaySpeed_Temp _displaySpeed_Temp fV
 421B            ; arraycharstemp -> -22,x
 421B            ;     arraychars -> -18,x
 421B            ;    holderSpeed -> -10,x
 421B            ;     holderTemp -> -8,x
 421B            ;         number -> -6,x
 421B            ;      remainder -> -4,x
 421B            ;          index -> -2,x
 421B            ;           temp -> 6,x
 421B            ;          speed -> 2,x
 421B            _displaySpeed_Temp::
 421B  3B                pshd
 421C  34                pshx
 421D  B775              tfr s,x
 421F  1BF1E8            leas -24,sp
 4222                    .dbline -1
 4222                    .dbline 98
 4222            ; /*
 4222            ; DisplaySpeed_Temp displays the speed and temp passed in to the lcd display.
 4222            ; */
 4222            ; 
 4222            ; void displaySpeed_Temp(int speed, int temp){  
 4222                    .dbline 100
 4222            ;        int number;
 4222            ;        int index=3;
 4222  CC0003            ldd #3
 4225  6C1E              std -2,x
 4227                    .dbline 103
 4227            ;        int arraychars[4];
 4227            ;        int arraycharstemp[2];
 4227            ;        int remainder=0;
 4227  CC0000            ldd #0
 422A  6C1C              std -4,x
 422C                    .dbline 104
 422C            ;        int holderSpeed=speed;
 422C  ED02              ldy 2,x
 422E  6D16              sty -10,x
 4230                    .dbline 105
 4230            ;        int holderTemp=temp;
 4230  18020618          movw 6,x,-8,x
 4234                    .dbline 106
 4234            ;      LCD_instruction(1);
 4234  CC0001            ldd #1
 4237  1643D1            jsr _LCD_instruction
 423A                    .dbline 107
 423A            ;        LCD_display('S');
 423A  CC0053            ldd #83
 423D  1643DD            jsr _LCD_display
 4240                    .dbline 108
 4240            ;        LCD_display('P');
 4240  CC0050            ldd #80
 4243  1643DD            jsr _LCD_display
 4246                    .dbline 109
 4246            ;        LCD_display('E');
 4246  CC0045            ldd #69
 4249  1643DD            jsr _LCD_display
 424C                    .dbline 110
 424C            ;        LCD_display('E');
 424C  CC0045            ldd #69
 424F  1643DD            jsr _LCD_display
 4252                    .dbline 111
 4252            ;        LCD_display('D');
 4252  CC0044            ldd #68
 4255  1643DD            jsr _LCD_display
 4258  205A              bra L76
 425A            L75:
 425A                    .dbline 113
 425A            ;        while (index>=0)
 425A            ;        {
 425A                    .dbline 114
 425A            ;                  if(holderSpeed!=0)
 425A  EC16              ldd -10,x
 425C  273C              beq L78
 425E                    .dbline 115
 425E            ;        {
 425E                    .dbline 117
 425E            ; //takes the decimal value passed in and turns it into the decimal value representation in ASCII
 425E            ;        remainder=holderSpeed%10;
 425E  EC16              ldd -10,x
 4260  CD000A            ldy #10
 4263  B7D6              exg x,y
 4265  1815              idivs
 4267  B7D6              exg x,y
 4269  6C1C              std -4,x
 426B                    .dbline 118
 426B            ;        holderSpeed=holderSpeed/10;
 426B  EC16              ldd -10,x
 426D  CD000A            ldy #10
 4270  B7D6              exg x,y
 4272  1815              idivs
 4274  B7D6              exg x,y
 4276  6D16              sty -10,x
 4278                    .dbline 119
 4278            ;        remainder=remainder+0x30;
 4278  EC1C              ldd -4,x
 427A  C30030            addd #48
 427D  6C1C              std -4,x
 427F                    .dbline 120
 427F            ;        arraychars[index]=remainder;
 427F  19E1EE            leay -18,x
 4282  6DE1E8            sty -24,x
 4285  EC1E              ldd -2,x
 4287  59                lsld
 4288  E3E1E8            addd -24,x
 428B  B7C6              xgdy
 428D  EC1C              ldd -4,x
 428F  6C40              std 0,y
 4291                    .dbline 121
 4291            ;        index=index-1;
 4291  EC1E              ldd -2,x
 4293  830001            subd #1
 4296  6C1E              std -2,x
 4298                    .dbline 122
 4298            ;        }       
 4298  201A              bra L79
 429A            L78:
 429A                    .dbline 124
 429A            ;        else
 429A            ;        {
 429A                    .dbline 125
 429A            ;                       arraychars[index]=0x30;
 429A  19E1EE            leay -18,x
 429D  6DE1E8            sty -24,x
 42A0  EC1E              ldd -2,x
 42A2  59                lsld
 42A3  E3E1E8            addd -24,x
 42A6  B7C6              xgdy
 42A8  CC0030            ldd #48
 42AB  6C40              std 0,y
 42AD                    .dbline 126
 42AD            ;                       index=index-1;
 42AD  EC1E              ldd -2,x
 42AF  830001            subd #1
 42B2  6C1E              std -2,x
 42B4                    .dbline 127
 42B4            ;        }
 42B4            L79:
 42B4                    .dbline 128
 42B4            L76:
 42B4                    .dbline 112
 42B4  EC1E              ldd -2,x
 42B6  2CA2              bge L75
 42B8                    .dbline 129
 42B8            ;        }
 42B8            ;        LCD_display(' ');
 42B8  CC0020            ldd #32
 42BB  1643DD            jsr _LCD_display
 42BE                    .dbline 130
 42BE            ;        for(index=0;index<4;index++)
 42BE  CC0000            ldd #0
 42C1  6C1E              std -2,x
 42C3            L80:
 42C3                    .dbline 131
 42C3                    .dbline 132
 42C3  19E1EE            leay -18,x
 42C6  6DE1E8            sty -24,x
 42C9  EC1E              ldd -2,x
 42CB  59                lsld
 42CC  E3E1E8            addd -24,x
 42CF  B7C6              xgdy
 42D1  ED40              ldy 0,y
 42D3  6D1A              sty -6,x
 42D5                    .dbline 133
 42D5  EC1A              ldd -6,x
 42D7  1643DD            jsr _LCD_display
 42DA                    .dbline 134
 42DA            L81:
 42DA                    .dbline 130
 42DA  EC1E              ldd -2,x
 42DC  C30001            addd #1
 42DF  6C1E              std -2,x
 42E1                    .dbline 130
 42E1  EC1E              ldd -2,x
 42E3  8C0004            cpd #4
 42E6  2DDB              blt L80
 42E8                    .dbline 136
 42E8            ;        {
 42E8            ;               number=arraychars[index];
 42E8            ;               LCD_display(number);
 42E8            ;        }
 42E8            ;        
 42E8            ;        index=1;
 42E8  CC0001            ldd #1
 42EB  6C1E              std -2,x
 42ED                    .dbline 138
 42ED            ;        //goes to the next line.
 42ED            ;        LCD_instruction(0xC0); 
 42ED  CC00C0            ldd #192
 42F0  1643D1            jsr _LCD_instruction
 42F3                    .dbline 139
 42F3            ;        LCD_display('T');
 42F3  CC0054            ldd #84
 42F6  1643DD            jsr _LCD_display
 42F9                    .dbline 140
 42F9            ;        LCD_display('E');
 42F9  CC0045            ldd #69
 42FC  1643DD            jsr _LCD_display
 42FF                    .dbline 141
 42FF            ;        LCD_display('M');
 42FF  CC004D            ldd #77
 4302  1643DD            jsr _LCD_display
 4305                    .dbline 142
 4305            ;        LCD_display('P');
 4305  CC0050            ldd #80
 4308  1643DD            jsr _LCD_display
 430B                    .dbline 143
 430B            ;        LCD_display('E');
 430B  CC0045            ldd #69
 430E  1643DD            jsr _LCD_display
 4311                    .dbline 144
 4311            ;        LCD_display('R');
 4311  CC0052            ldd #82
 4314  1643DD            jsr _LCD_display
 4317                    .dbline 145
 4317            ;        LCD_display('A');
 4317  CC0041            ldd #65
 431A  1643DD            jsr _LCD_display
 431D                    .dbline 146
 431D            ;        LCD_display('T');
 431D  CC0054            ldd #84
 4320  1643DD            jsr _LCD_display
 4323                    .dbline 147
 4323            ;        LCD_display('U');
 4323  CC0055            ldd #85
 4326  1643DD            jsr _LCD_display
 4329                    .dbline 148
 4329            ;        LCD_display('R');
 4329  CC0052            ldd #82
 432C  1643DD            jsr _LCD_display
 432F                    .dbline 149
 432F            ;        LCD_display('E');
 432F  CC0045            ldd #69
 4332  1643DD            jsr _LCD_display
 4335  203A              bra L85
 4337            L84:
 4337                    .dbline 152
 4337                    .dbline 153
 4337  EC18              ldd -8,x
 4339  CD000A            ldy #10
 433C  B7D6              exg x,y
 433E  1815              idivs
 4340  B7D6              exg x,y
 4342  6C1C              std -4,x
 4344                    .dbline 154
 4344  EC18              ldd -8,x
 4346  CD000A            ldy #10
 4349  B7D6              exg x,y
 434B  1815              idivs
 434D  B7D6              exg x,y
 434F  6D18              sty -8,x
 4351                    .dbline 155
 4351  EC1C              ldd -4,x
 4353  C30030            addd #48
 4356  6C1C              std -4,x
 4358                    .dbline 156
 4358  19E1EA            leay -22,x
 435B  6DE1E8            sty -24,x
 435E  EC1E              ldd -2,x
 4360  59                lsld
 4361  E3E1E8            addd -24,x
 4364  B7C6              xgdy
 4366  EC1C              ldd -4,x
 4368  6C40              std 0,y
 436A                    .dbline 157
 436A  EC1E              ldd -2,x
 436C  830001            subd #1
 436F  6C1E              std -2,x
 4371                    .dbline 158
 4371            L85:
 4371                    .dbline 151
 4371            ; 
 4371            ;        while (index>=0)
 4371  EC1E              ldd -2,x
 4373  2CC2              bge L84
 4375                    .dbline 159
 4375            ;        {
 4375            ;                  remainder=holderTemp%10;
 4375            ;          holderTemp=holderTemp/10;
 4375            ;                  remainder=remainder+0x30;
 4375            ;                  arraycharstemp[index]=remainder;
 4375            ;                  index=index-1;
 4375            ;        } 
 4375            ;        LCD_display(' ');
 4375  CC0020            ldd #32
 4378  1643DD            jsr _LCD_display
 437B                    .dbline 160
 437B            ;        for(index=0;index<2;index++)
 437B  CC0000            ldd #0
 437E  6C1E              std -2,x
 4380            L87:
 4380                    .dbline 161
 4380                    .dbline 162
 4380  19E1EA            leay -22,x
 4383  6DE1E8            sty -24,x
 4386  EC1E              ldd -2,x
 4388  59                lsld
 4389  E3E1E8            addd -24,x
 438C  B7C6              xgdy
 438E  ED40              ldy 0,y
 4390  6D1A              sty -6,x
 4392                    .dbline 164
 4392  EC1A              ldd -6,x
 4394  1643DD            jsr _LCD_display
 4397                    .dbline 165
 4397            L88:
 4397                    .dbline 160
 4397  EC1E              ldd -2,x
 4399  C30001            addd #1
 439C  6C1E              std -2,x
 439E                    .dbline 160
 439E  EC1E              ldd -2,x
 43A0  8C0002            cpd #2
 43A3  2DDB              blt L87
 43A5                    .dbline 167
 43A5            ;        {
 43A5            ;               number=arraycharstemp[index];
 43A5            ; 
 43A5            ;               LCD_display(number);
 43A5            ;        }
 43A5            ;        
 43A5            ;        LCD_display('C');
 43A5  CC0043            ldd #67
 43A8  1643DD            jsr _LCD_display
 43AB                    .dbline -2
 43AB                    .dbline 168
 43AB            ; }
 43AB            L74:
 43AB  B757              tfr x,s
 43AD  30                pulx
 43AE  1B82              leas 2,sp
 43B0                    .dbline 0 ; func end
 43B0  3D                rts
 43B1                    .dbsym l arraycharstemp -22 A[4:2]I
 43B1                    .dbsym l arraychars -18 A[8:4]I
 43B1                    .dbsym l holderSpeed -10 I
 43B1                    .dbsym l holderTemp -8 I
 43B1                    .dbsym l number -6 I
 43B1                    .dbsym l remainder -4 I
 43B1                    .dbsym l index -2 I
 43B1                    .dbsym l temp 6 I
 43B1                    .dbsym l speed 2 I
 43B1                    .dbend
 43B1            L70:
 43B1  4400              .byte 'D,0
 43B3            L67:
 43B3  4300              .byte 'C,0
 43B5            L64:
 43B5  4200              .byte 'B,0
 43B7            L61:
 43B7  4100              .byte 'A,0
 43B9            L57:
 43B9  4600              .byte 'F,0
 43BB            L54:
 43BB  3900              .byte 57,0
 43BD            L51:
 43BD  3600              .byte 54,0
 43BF            L48:
 43BF  3300              .byte 51,0
 43C1            L44:
 43C1  3000              .byte 48,0
 43C3            L41:
 43C3  3800              .byte 56,0
 43C5            L38:
 43C5  3500              .byte 53,0
 43C7            L35:
 43C7  3200              .byte 50,0
 43C9            L31:
 43C9  4500              .byte 'E,0
 43CB            L28:
 43CB  3700              .byte 55,0
 43CD            L25:
 43CD  3400              .byte 52,0
 43CF            L22:
 43CF  3100              .byte 49,0
                        .module vectors_dps256_NoICE.c
                        .area memory(abs)
                        .org 0x3f8c
 3F8C            _interrupt_vectors::
 3F8C  F8CF              .word 63695
 3F8E  F8CF              .word 63695
 3F90  F8CF              .word 63695
 3F92  F8CF              .word 63695
 3F94  F8CF              .word 63695
 3F96  F8CF              .word 63695
 3F98  F8CF              .word 63695
 3F9A  F8CF              .word 63695
 3F9C  F8CF              .word 63695
 3F9E  F8CF              .word 63695
 3FA0  F8CF              .word 63695
 3FA2  F8CF              .word 63695
 3FA4  F8CF              .word 63695
 3FA6  F8CF              .word 63695
 3FA8  F8CF              .word 63695
 3FAA  F8CF              .word 63695
 3FAC  F8CF              .word 63695
 3FAE  F8CF              .word 63695
 3FB0  F8CF              .word 63695
 3FB2  F8CF              .word 63695
 3FB4  F8CF              .word 63695
 3FB6  F8CF              .word 63695
 3FB8  F8CF              .word 63695
 3FBA  F8CF              .word 63695
 3FBC  F8CF              .word 63695
 3FBE  F8CF              .word 63695
 3FC0  F8CF              .word 63695
 3FC2  F8CF              .word 63695
 3FC4  F8CF              .word 63695
 3FC6  F8CF              .word 63695
 3FC8  F8CF              .word 63695
 3FCA  F8CF              .word 63695
 3FCC  406F              .word _printKeysPressed
 3FCE  F8CF              .word 63695
 3FD0  F8CF              .word 63695
 3FD2  F8CF              .word 63695
 3FD4  F8CF              .word 63695
 3FD6  F8CF              .word 63695
 3FD8  F8CF              .word 63695
 3FDA  F8CF              .word 63695
 3FDC  F8CF              .word 63695
 3FDE  F8CF              .word 63695
 3FE0  F8CF              .word 63695
 3FE2  F8CF              .word 63695
 3FE4  F8CF              .word 63695
 3FE6  F8CF              .word 63695
 3FE8  F8CF              .word 63695
 3FEA  F8CF              .word 63695
 3FEC  F8CF              .word 63695
 3FEE  F8CF              .word 63695
 3FF0  F8CF              .word 63695
 3FF2  F8CF              .word 63695
 3FF4  F8C7              .word 63687
 3FF6  F8C3              .word 63683
 3FF8  F8CB              .word 63691
 3FFA  F805              .word 63493
 3FFC  F809              .word 63497
 3FFE  4000              .word __start
 4000                    .dbfile M:\Assign51\vectors_dps256_NoICE.c
 4000                    .dbsym e interrupt_vectors _interrupt_vectors A[116:58]pfV
                        .area data
--- 0000                   .dbfile M:\Assign51\vectors_dps256_NoICE.c
 0000            REGBS = $0000 ; DP256 register bank base address
 0000            PORTA = REGBS+0 ;port A = Address lines A8 A15
 0001            PORTB = REGBS+1 ;port B = Address lines A0 A7
 0002            DDRA = REGBS+2 ;port A direction register
 0003            DDRB = REGBS+3 ;port A direction register
 0008            PORTE = REGBS+8 ;port E = mode,IRQandcontrolsignals
 0009            DDRE = REGBS+9 ;port E direction register
 000A            PEAR = REGBS+$A ;port E assignments
 000B            MODE = REGBS+$B ;Mode register
 000C            PUCR = REGBS+$C ;port pull-up control register
 000D            RDRIV = REGBS+$D ;port reduced drive control register
 000E            EBICTL = REGBS+$E ;E stretch control
--- 0000           
 0010            INITRM = REGBS+$10 ;Ram location register
 0011            INITRG = REGBS+$11 ;Register location register
 0012            INITEE = REGBS+$12 ;EEprom location register
 0013            MISC = REGBS+$13 ;MiscellaneoMapping control
 0014            MTST0 = REGBS+$14 ; RESERVED
 0015            ITCR = REGBS+$15 ;Interrupt test control register
 0016            ITEST = REGBS+$16 ;Interrupt test register
 0017            MTST1 = REGBS+$17 ; Reserved
--- 0000           
 001A            PARTIDH = REGBS+$1A ;Part ID high
 001B            PARTIDL = REGBS+$1B ;Part ID low
 001C            MEMSIZ0 = REGBS+$1C ;memory size
 001D            MEMSIZ1 = REGBS+$1D ;memory size
 001E            INTCR = REGBS+$1E ;interrupt control register
 001F            HPRIO = REGBS+$1F ;high priority reg
--- 0000           
 0028            BKPCT0 = REGBS+$28 ;Break control register
 0029            BKPCT1 = REGBS+$29 ;Break control register
 002A            BKP0X = REGBS+$2A ; Break 0 index register
 002B            BKP0H = REGBS+$2B ; Break 0 pointer high
 002C            BRP0L = REGBS+$2C ; Break 0 pointer low
 002D            BKP1X = REGBS+$2D ; Break 1 index register
 002E            BKP1H = REGBS+$2E ; Break 1 pointer high
 002F            BRP1L = REGBS+$2F ; Break 1 pointer low
 0030            PPAGE = REGBS+$30 ;Program Page register
--- 0000           
 0032            PORTK = REGBS+$32 ;Port K data
 0033            DDRK = REGBS+$33 ;Port K direction
 0034            SYNR = REGBS+$34 ; Synthesizer / multiplier register
 0035            REFDV = REGBS+$35 ; Reference divider register
 0036            CTFLG = REGBS+$36 ; RESERVED
 0037            CRGFLG = REGBS+$37 ; PLL flags register
 0038            CRGINT = REGBS+$38 ; PLL interrupt register
 0039            CLKSEL = REGBS+$39 ; Clock select register
 003A            PLLCTL = REGBS+$3A ; PLL control register
 003B            RTICTL = REGBS+$3B ;Real time interrupt control
 003C            COPCTL = REGBS+$3C ;Watchdog control
 003D            FORBYP = REGBS+$3D ;
 003E            CTCTL = REGBS+$3E ;
 003F            ARMCOP = REGBS+$3F ;COP reset register
--- 0000           
 0040            TIOS = REGBS+$40 ;timer input/output select
 0041            CFORC = REGBS+$41 ;timer compare force
 0042            OC7M = REGBS+$42 ;timer output compare 7 mask
 0043            OC7D = REGBS+$43 ;timer output compare 7 data
 0044            TCNT = REGBS+$44 ;timer counter register hi
 0045            *TCNT = REGBS+$45 ;timer counter register lo
 0046            TSCR = REGBS+$46 ;timer system control register
 0047            TTOV = REGBS+$47 ;reserved
 0048            TCTL1 = REGBS+$48 ;timer control register 1
 0049            TCTL2 = REGBS+$49 ;timer control register 2
 004A            TCTL3 = REGBS+$4A ;timer control register 3
 004B            TCTL4 = REGBS+$4B ;timer control register 4
 004C            TMSK1 = REGBS+$4C ;timer interrupt mask 1
 004D            TMSK2 = REGBS+$4D ;timer interrupt mask 2
 004E            TFLG1 = REGBS+$4E ;timer flags 1
 004F            TFLG2 = REGBS+$4F ;timer flags 2
 0050            TC0 = REGBS+$50 ;timer capture/comparregister 0
 0051            *TC0 = REGBS+$51 ;
 0052            TC1 = REGBS+$52 ;timer capture/comparregister 1
 0053            *TC1 = REGBS+$53 ;
 0054            TC2 = REGBS+$54 ;timer capture/comparregister 2
 0055            *TC2 = REGBS+$55 ;
 0056            TC3 = REGBS+$56 ;timer capture/comparregister 3
 0057            *TC3 = REGBS+$57 ;
 0058            TC4 = REGBS+$58 ;timer capture/comparregister 4
 0059            *TC4 = REGBS+$59 ;
 005A            TC5 = REGBS+$5A ;timer capture/comparregister 5
 005B            *TC5 = REGBS+$5B ;
 005C            TC6 = REGBS+$5C ;timer capture/comparregister 6
 005D            *TC6 = REGBS+$5D ;
 005E            TC7 = REGBS+$5E ;timer capture/comparregister 7
 005F            *TC7 = REGBS+$5F ;
 0060            PACTL = REGBS+$60 ;pulse accumulator controls
 0061            PAFLG = REGBS+$61 ;pulse accumulator flags
 0062            PACN3 = REGBS+$62 ;pulse accumulator counter 3
 0063            PACN2 = REGBS+$63 ;pulse accumulator counter 2
 0064            PACN1 = REGBS+$64 ;pulse accumulator counter 1
 0065            PACN0 = REGBS+$65 ;pulse accumulator counter 0
 0066            MCCTL = REGBS+$66 ;Modulus down conunter control
 0067            MCFLG = REGBS+$67 ;down counter flags
 0068            ICPAR = REGBS+$68 ;Input pulse accumulatocontrol
 0069            DLYCT = REGBS+$69 ;Delay count to down counter
 006A            ICOVW = REGBS+$6A ;Input control overwrite register
 006B            ICSYS = REGBS+$6B ;Input control system control
--- 0000           
 006D            TIMTST = REGBS+$6D ;timer test register
--- 0000           
 0070            PBCTL = REGBS+$70 ; Pulse accumulatoB control
 0071            PBFLG = REGBS+$71 ; Pulse accumulatoB flags
 0072            PA3H = REGBS+$72 ; Pulse Accumulatoholding regist3
 0073            PA2H = REGBS+$73 ; Pulse Accumulatoholding regist2
 0074            PA1H = REGBS+$74 ; Pulse Accumulatoholding regist1
 0075            PA0H = REGBS+$75 ; Pulse Accumulatoholding regist0
 0076            MCCNT = REGBS+$76 ; Modulus down counter register
 0077            *MCCNTL = REGBS+$77 ; low byte
 0078            TCOH = REGBS+$78 ; Capture 0 holding register
 007A            TC1H = REGBS+$7A ; Capture 1 holding register
 007C            TC2H = REGBS+$7C ; Capture 2 holding register
 007E            TC3H = REGBS+$7E ; Capture 3 holding register
--- 0000           
 0080            ATD0CTL0 = REGBS+$80 ;ADC control 0 (reserved)
 0081            ATD0CTL1 = REGBS+$81 ;ADC control 1 (reserved)
 0082            ATD0CTL2 = REGBS+$82 ;ADC control 2
 0083            ATD0CTL3 = REGBS+$83 ;ADC control 3
 0084            ATD0CTL4 = REGBS+$84 ;ADC control 4
 0085            ATD0CTL5 = REGBS+$85 ;ADC control 5
 0086            ATD0STAT = REGBS+$86 ;ADC status register hi
 0087            *ATD0STAT = REGBS+$87 ;ADC status register lo
 0088            ATD0TEST = REGBS+$88 ;ADC test (reserved)
 0089            *ATD0TEST = REGBS+$89 ;
--- 0000           
 008D            ATD0DIEN = REGBS+$8D ;
--- 0000           
 008F            PORTAD = REGBS+$8F ;port ADC = input only
 0090            ADR00H = REGBS+$90 ;ADC result 0 register
 0092            ADR01H = REGBS+$92 ;ADC result 1 register
 0094            ADR02H = REGBS+$94 ;ADC result 2 register
 0096            ADR03H = REGBS+$96 ;ADC result 3 register
 0098            ADR04H = REGBS+$98 ;ADC result 4 register
 009A            ADR05H = REGBS+$9A ;ADC result 5 register
 009C            ADR06H = REGBS+$9C ;ADC result 6 register
 009E            ADR07H = REGBS+$9E ;ADC result 7 register
--- 0000           
 00A0            PWME = REGBS+$A0 ;PWM enable
 00A1            PWMPOL = REGBS+$A1 ;PWM polarity
 00A2            PWMCLK = REGBS+$A2 ;PWM clock select register
 00A3            PWMPRCLK = REGBS+$A3 ;PWM Prescale clock select register
 00A4            PWMCAE = REGBS+$A4 ;PWM center align select register
 00A5            PWMCTL = REGBS+$A5 ;PWM control register
 00A6            PWMTST = REGBS+$A6 ;reserved
 00A7            PWMPRSC = REGBS+$A7 ;reserved
 00A8            PWMSCLA = REGBS+$A8 ;PWM Scale A
 00A9            PWMSCLB = REGBS+$A9 ;PWM scale B
 00AA            PWMSCNTA = REGBS+$AA ;reserved
 00AB            PWMSCNTB = REGBS+$AB ;reserved
 00AC            PWMCNT0 = REGBS+$AC ;PWM channel 0 counter
 00AD            PWMCNT1 = REGBS+$AD ;PWM channel 1 counter
 00AE            PWMCNT2 = REGBS+$AE ;PWM channel 2 counter
 00AF            PWMCNT3 = REGBS+$AF ;PWM channel 3 counter
 00B0            PWMCNT4 = REGBS+$B0 ;PWM channel 4 counter
 00B1            PWMCNT5 = REGBS+$B1 ;PWM channel 5 counter
 00B2            PWMCNT6 = REGBS+$B2 ;PWM channel 6 counter
 00B3            PWMCNT7 = REGBS+$B3 ;PWM channel 7 counter
 00B4            PWMPER0 = REGBS+$B4 ;PWM channel 0 period
 00B5            PWMPER1 = REGBS+$B5 ;PWM channel 1 period
 00B6            PWMPER2 = REGBS+$B6 ;PWM channel 2 period
 00B7            PWMPER3 = REGBS+$B7 ;PWM channel 3 period
 00B8            PWMPER4 = REGBS+$B8 ;PWM channel 4 period
 00B9            PWMPER5 = REGBS+$B9 ;PWM channel 5 period
 00BA            PWMPER6 = REGBS+$BA ;PWM channel 6 period
 00BB            PWMPER7 = REGBS+$BB ;PWM channel 7 period
 00BC            PWMDTY0 = REGBS+$BC ;PWM channel 0 duty cycle
 00BD            PWMDTY1 = REGBS+$BD ;PWM channel 1 duty cycle
 00BE            PWMDTY2 = REGBS+$BE ;PWM channel 2 duty cycle
 00BF            PWMDTY3 = REGBS+$BF ;PWM channel 3 duty cycle
 00C0            PWMDTY4 = REGBS+$C0 ;PWM channel 0 duty cycle
 00C1            PWMDTY5 = REGBS+$C1 ;PWM channel 1 duty cycle
 00C2            PWMDTY6 = REGBS+$C2 ;PWM channel 2 duty cycle
 00C3            PWMDTY7 = REGBS+$C3 ;PWM channel 3 duty cycle
 00C4            PWMSDN = REGBS+$C4 ;PWM shutdown register
--- 0000           
 00C8            SC0BDH = REGBS+$C8 ;sci 0 baud reg hi byte
 00C9            SC0BDL = REGBS+$C9 ;sci 0 baud reg lo byte
 00CA            SC0CR1 = REGBS+$CA ;sci 0 control1 reg
 00CB            SC0CR2 = REGBS+$CB ;sci 0 control2 reg
 00CC            SC0SR1 = REGBS+$CC ;sci 0 status reg 1
 00CD            SC0SR2 = REGBS+$CD ;sci 0 status reg 2
 00CE            SC0DRH = REGBS+$CE ;sci 0 data reg hi
 00CF            SC0DRL = REGBS+$CF ;sci 0 data reg lo
 00D0            SC1BDH = REGBS+$D0 ;sci 1 baud reg hi byte
 00D1            SC1BDL = REGBS+$D1 ;sci 1 baud reg lo byte
 00D2            SC1CR1 = REGBS+$D2 ;sci 1 control1 reg
 00D3            SC1CR2 = REGBS+$D3 ;sci 1 control2 reg
 00D4            SC1SR1 = REGBS+$D4 ;sci 1 status reg 1
 00D5            SC1SR2 = REGBS+$D5 ;sci 1 status reg 2
 00D6            SC1DRH = REGBS+$D6 ;sci 1 data reg hi
 00D7            SC1DRL = REGBS+$D7 ;sci 1 data reg lo
 00D8            SPI0CR1 = REGBS+$D8 ;spi 0 control1 reg
 00D9            SPI0CR2 = REGBS+$D9 ;spi 0 control2 reg
 00DA            SPI0BR = REGBS+$DA ;spi 0 baud reg
 00DB            SPI0SR = REGBS+$DB ;spi 0 status reg hi
--- 0000           
 00DD            SP0DR = REGBS+$DD ;spi 0 data reg
--- 0000           
 00E0            IBAD = REGBS+$E0 ;I2C Bus address register
 00E1            IBFD = REGBS+$E1 ;I2C Bus fr=ency divider
 00E2            IBCR = REGBS+$E2 ;I2C Bus control register
 00E3            IBSR = REGBS+$E3 ;I2C Bus status register
 00E4            IBDR = REGBS+$E4 ;I2C Bus message data register
--- 0000           
 00E8            DLCBCR1 = REGBS+$E8 ;BDLC Control regsiter 1
 00E9            DLCBSVR = REGBS+$E9 ;BDLC State vector register
 00EA            DLCBCR2 = REGBS+$EA ;BDLC Control register 2
 00EB            DLCBDR = REGBS+$EB ;BDLC Data register
 00EC            DLCBARD = REGBS+$EC ;BDLC Analog delay register
 00ED            DLCBRSR = REGBS+$ED ;BDLC Rate select register
 00EE            DLCSCR = REGBS+$EE ;BDLC Control register
 00EF            DLCBSTAT = REGBS+$EF ;BDLC Status register
 00F0            SPI1CR1 = REGBS+$F0 ;spi 1 control1 reg
 00F1            SPI1CR2 = REGBS+$F1 ;spi 1 control2 reg
 00F2            SPI1BR = REGBS+$F2 ;spi 1 baud reg
 00F3            SPI1SR = REGBS+$F3 ;spi 1 status reg hi
--- 0000           
 00F5            SP1DR = REGBS+$F5 ;spi 1 data reg
--- 0000           
 00F8            SPI2CR1 = REGBS+$F8 ;spi 2 control1 reg
 00F9            SPI2CR2 = REGBS+$F9 ;spi 2 control2 reg
 00FA            SPI2BR = REGBS+$FA ;spi 2 baud reg
 00FB            SPI2SR = REGBS+$FB ;spi 2 status reg hi
--- 0000           
 00FD            SP2DR = REGBS+$FD ;spi 2 data reg
--- 0000           
 0100            FCLKDIV = REGBS+$100 ;FLASH clock divider
 0101            FSEC = REGBS+$101 ;FLASH security register
--- 0000           
 0103            FCNFG = REGBS+$103 ;FLASH configuration register
 0104            FPROT = REGBS+$104 ;FLASH protection register
 0105            FSTAT = REGBS+$105 ;FLASH status register
 0106            FCMD = REGBS+$106 ;FLASH command register
--- 0000           
 0110            ECLKDIV = REGBS+$110 ;EEPROM clock divider
--- 0000           
 0113            ECNFG = REGBS+$113 ;EEPROM configuration register
 0114            EPROT = REGBS+$114 ;EEPROM protection register
 0115            ESTAT = REGBS+$115 ;EEPROM status register
 0116            ECMD = REGBS+$116 ;EEPROM command register
--- 0000           
 0120            ATD1CTL0 = REGBS+$120 ;ADC1 control 0 (reserved)
 0121            ATD1CTL1 = REGBS+$121 ;ADC1 control 1 (reserved)
 0122            ATD1CTL2 = REGBS+$122 ;ADC1 control 2
 0123            ATD1CTL3 = REGBS+$123 ;ADC1 control 3
 0124            ATD1CTL4 = REGBS+$124 ;ADC1 control 4
 0125            ATD1CTL5 = REGBS+$125 ;ADC1 control 5
 0126            ATD1STAT = REGBS+$126 ;ADC1 status register hi
 0127            *ATD1STAT = REGBS+$127 ;ADC1 status register lo
 0128            ATD1TEST = REGBS+$128 ;ADC1 test (reserved)
 0129            *ATD1TEST = REGBS+$129 ;
--- 0000           
 012D            ATDDIEN = REGBS+$12D ;ADC1 INPUT ENABLE REGISTER
--- 0000           
 012F            PORTAD1 = REGBS+$12F ;port ADC1 = input only
 0130            ADR10H = REGBS+$130 ;ADC1 result 0 register
 0132            ADR11H = REGBS+$132 ;ADC1 result 1 register
 0134            ADR12H = REGBS+$134 ;ADC1 result 2 register
 0136            ADR13H = REGBS+$136 ;ADC1 result 3 register
 0138            ADR14H = REGBS+$138 ;ADC1 result 4 register
 013A            ADR15H = REGBS+$13A ;ADC1 result 5 register
 013C            ADR16H = REGBS+$13C ;ADC1 result 6 register
 013E            ADR17H = REGBS+$13E ;ADC1 result 7 register
 0140            CAN0CTL0 = REGBS+$140 ;CAN0 control register 0
 0141            CAN0CTL1 = REGBS+$141 ;CAN0 control register 1
 0142            CAN0BTR0 = REGBS+$142 ;CAN0 bus timing register 0
 0143            CAN0BTR1 = REGBS+$143 ;CAN0 bus timing register 1
 0144            CAN0RFLG = REGBS+$144 ;CAN0 receiver flags
 0145            CAN0RIER = REGBS+$145 ;CAN0 receiver interrupt enables
 0146            CAN0TFLG = REGBS+$146 ;CAN0 transmit flags
 0147            CAN0TIER = REGBS+$147 ;CAN0 transmit interrupt enables
 0148            CAN0TARQ = REGBS+$148 ;CAN0 transmit message abort control
 0149            CAN0TAAK = REGBS+$149 ;CAN0 transmit message abort status
 014A            CAN0TBEL = REGBS+$14A ;CAN0 transmit buffer select
 014B            CAN0IDAC = REGBS+$14B ;CAN0 identfier acceptancecontrol
--- 0000           
 014E            CAN0RERR = REGBS+$14E ;CAN0 Receive error counter
 014F            CAN0TERR = REGBS+$14F ;CAN0 Transmit error counter
 0150            CAN0IDA0 = REGBS+$150 ;CAN0 Identifier acceptanceregister 0
 0151            CAN0IDA1 = REGBS+$151 ;CAN0 Identifier acceptanceregister 1
 0152            CAN0IDA2 = REGBS+$152 ;CAN0 Identifier acceptanceregister 2
 0153            CAN0IDA3 = REGBS+$153 ;CAN0 Identifier acceptanceregister 3
 0154            CAN0IDM0 = REGBS+$154 ;CAN0 Identifier mask register 0
 0155            CAN0IDM1 = REGBS+$155 ;CAN0 Identifier mask register 1
 0156            CAN0IDM2 = REGBS+$156 ;CAN0 Identifier mask register 2
 0157            CAN0IDM3 = REGBS+$157 ;CAN0 Identifier mask register 3
 0158            CAN0IDA4 = REGBS+$158 ;CAN0 Identifier acceptanceregister 4
 0159            CAN0IDA5 = REGBS+$159 ;CAN0 Identifier acceptanceregister 5
 015A            CAN0IDA6 = REGBS+$15A ;CAN0 Identifier acceptanceregister 6
 015B            CAN0IDA7 = REGBS+$15B ;CAN0 Identifier acceptanceregister 7
 015C            CAN0IDM4 = REGBS+$15C ;CAN0 Identifier mask register 4
 015D            CAN0IDM5 = REGBS+$15D ;CAN0 Identifier mask register 5
 015E            CAN0IDM6 = REGBS+$15E ;CAN0 Identifier mask register 6
 015F            CAN0IDM7 = REGBS+$15F ;CAN0 Identifier mask register 7
 0160            CAN0RXFG = REGBS+$160 ;CAN0 RX foregroundbuffer thru +$16F
 0170            CAN0TXFG = REGBS+$170 ;CAN0 TX foregroundbuffer thru +$17F
--- 0000           
 0180            CAN1CTL0 = REGBS+$180 ;CAN1 control register 0
 0181            CAN1CTL1 = REGBS+$181 ;CAN1 control register 1
 0182            CAN1BTR0 = REGBS+$182 ;CAN1 bus timing register 0
 0183            CAN1BTR1 = REGBS+$183 ;CAN1 bus timing register 1
 0184            CAN1RFLG = REGBS+$184 ;CAN1 receiver flags
 0185            CAN1RIER = REGBS+$185 ;CAN1 receiver interrupt enables
 0186            CAN1TFLG = REGBS+$186 ;CAN1 transmit flags
 0187            CAN1TIER = REGBS+$187 ;CAN1 transmit interrupt enables
 0188            CAN1TARQ = REGBS+$188 ;CAN1 transmit message abort control
 0189            CAN1TAAK = REGBS+$189 ;CAN1 transmit message abort status
 018A            CAN1TBEL = REGBS+$18A ;CAN1 transmit buffer select
 018B            CAN1IDAC = REGBS+$18B ;CAN1 identfier acceptancecontrol
--- 0000           
 018E            CAN1RERR = REGBS+$18E ;CAN1 Receive error counter
 018F            CAN1TERR = REGBS+$18F ;CAN1 Transmit error counter
 0190            CAN1IDA0 = REGBS+$190 ;CAN1 Identifier acceptanceregister 0
 0191            CAN1IDA1 = REGBS+$191 ;CAN1 Identifier acceptanceregister 1
 0192            CAN1IDA2 = REGBS+$192 ;CAN1 Identifier acceptanceregister 2
 0193            CAN1IDA3 = REGBS+$193 ;CAN1 Identifier acceptanceregister 3
 0194            CAN1IDM0 = REGBS+$194 ;CAN1 Identifier mask register 0
 0195            CAN1IDM1 = REGBS+$195 ;CAN1 Identifier mask register 1
 0196            CAN1IDM2 = REGBS+$196 ;CAN1 Identifier mask register 2
 0197            CAN1IDM3 = REGBS+$197 ;CAN1 Identifier mask register 3
 0198            CAN1IDA4 = REGBS+$198 ;CAN1 Identifier acceptanceregister 4
 0199            CAN1IDA5 = REGBS+$199 ;CAN1 Identifier acceptanceregister 5
 019A            CAN1IDA6 = REGBS+$19A ;CAN1 Identifier acceptanceregister 6
 019B            CAN1IDA7 = REGBS+$19B ;CAN1 Identifier acceptanceregister 7
 019C            CAN1IDM4 = REGBS+$19C ;CAN1 Identifier mask register 4
 019D            CAN1IDM5 = REGBS+$19D ;CAN1 Identifier mask register 5
 019E            CAN1IDM6 = REGBS+$19E ;CAN1 Identifier mask register 6
 019F            CAN1IDM7 = REGBS+$19F ;CAN1 Identifier mask register 7
 01A0            CAN1RXFG = REGBS+$1A0 ;CAN1 RX foregroundbuffer thru +$1AF
 01B0            CAN1TXFG = REGBS+$1B0 ;CAN1 TX foregroundbuffer thru +$1BF
--- 0000           
 01C0            CAN2CTL0 = REGBS+$1C0 ;CAN2 control register 0
 01C1            CAN2CTL1 = REGBS+$1C1 ;CAN2 control register 1
 01C2            CAN2BTR0 = REGBS+$1C2 ;CAN2 bus timing register 0
 01C3            CAN2BTR1 = REGBS+$1C3 ;CAN2 bus timing register 1
 01C4            CAN2RFLG = REGBS+$1C4 ;CAN2 receiver flags
 01C5            CAN2RIER = REGBS+$1C5 ;CAN2 receiver interrupt enables
 01C6            CAN2TFLG = REGBS+$1C6 ;CAN2 transmit flags
 01C7            CAN2TIER = REGBS+$1C7 ;CAN2 transmit interrupt enables
 01C8            CAN2TARQ = REGBS+$1C8 ;CAN2 transmit message abort control
 01C9            CAN2TAAK = REGBS+$1C9 ;CAN2 transmit message abort status
 01CA            CAN2TBEL = REGBS+$1CA ;CAN2 transmit buffer select
 01CB            CAN2IDAC = REGBS+$1CB ;CAN2 identfier acceptancecontrol
--- 0000           
 01CE            CAN2RERR = REGBS+$1CE ;CAN2 Receive error counter
 01CF            CAN2TERR = REGBS+$1CF ;CAN2 Transmit error counter
 01D0            CAN2IDA0 = REGBS+$1D0 ;CAN2 Identifier acceptanceregister 0
 01D1            CAN2IDA1 = REGBS+$1D1 ;CAN2 Identifier acceptanceregister 1
 01D2            CAN2IDA2 = REGBS+$1D2 ;CAN2 Identifier acceptanceregister 2
 01D3            CAN2IDA3 = REGBS+$1D3 ;CAN2 Identifier acceptanceregister 3
 01D4            CAN2IDM0 = REGBS+$1D4 ;CAN2 Identifier mask register 0
 01D5            CAN2IDM1 = REGBS+$1D5 ;CAN2 Identifier mask register 1
 01D6            CAN2IDM2 = REGBS+$1D6 ;CAN2 Identifier mask register 2
 01D7            CAN2IDM3 = REGBS+$1D7 ;CAN2 Identifier mask register 3
 01D8            CAN2IDA4 = REGBS+$1D8 ;CAN2 Identifier acceptanceregister 4
 01D9            CAN2IDA5 = REGBS+$1D9 ;CAN2 Identifier acceptanceregister 5
 01DA            CAN2IDA6 = REGBS+$1DA ;CAN2 Identifier acceptanceregister 6
 01DB            CAN2IDA7 = REGBS+$1DB ;CAN2 Identifier acceptanceregister 7
 01DC            CAN2IDM4 = REGBS+$1DC ;CAN2 Identifier mask register 4
 01DD            CAN2IDM5 = REGBS+$1DD ;CAN2 Identifier mask register 5
 01DE            CAN2IDM6 = REGBS+$1DE ;CAN2 Identifier mask register 6
 01DF            CAN2IDM7 = REGBS+$1DF ;CAN2 Identifier mask register 7
 01E0            CAN2RXFG = REGBS+$1E0 ;CAN2 RX foregroundbuffer thru +$1EF
 01F0            CAN2TXFG = REGBS+$1F0 ;CAN2 TX foregroundbuffer thru +$1FF
--- 0000           
 0200            CAN3CTL0 = REGBS+$200 ;CAN3 control register 0
 0201            CAN3CTL1 = REGBS+$201 ;CAN3 control register 1
 0202            CAN3BTR0 = REGBS+$202 ;CAN3 bus timing register 0
 0203            CAN3BTR1 = REGBS+$203 ;CAN3 bus timing register 1
 0204            CAN3RFLG = REGBS+$204 ;CAN3 receiver flags
 0205            CAN3RIER = REGBS+$205 ;CAN3 receiver interrupt enables
 0206            CAN3TFLG = REGBS+$206 ;CAN3 transmit flags
 0207            CAN3TIER = REGBS+$207 ;CAN3 transmit interrupt enables
 0208            CAN3TARQ = REGBS+$208 ;CAN3 transmit message abort control
 0209            CAN3TAAK = REGBS+$209 ;CAN3 transmit message abort status
 020A            CAN3TBEL = REGBS+$20A ;CAN3 transmit buffer select
 020B            CAN3IDAC = REGBS+$20B ;CAN3 identfier acceptancecontrol
--- 0000           
 020E            CAN3RERR = REGBS+$20E ;CAN3 Receive error counter
 020F            CAN3TERR = REGBS+$20F ;CAN3 Transmit error counter
 0210            CAN3IDA0 = REGBS+$210 ;CAN3 Identifier acceptanceregister 0
 0211            CAN3IDA1 = REGBS+$211 ;CAN3 Identifier acceptanceregister 1
 0212            CAN3IDA2 = REGBS+$212 ;CAN3 Identifier acceptanceregister 2
 0213            CAN3IDA3 = REGBS+$213 ;CAN3 Identifier acceptanceregister 3
 0214            CAN3IDM0 = REGBS+$214 ;CAN3 Identifier mask register 0
 0215            CAN3IDM1 = REGBS+$215 ;CAN3 Identifier mask register 1
 0216            CAN3IDM2 = REGBS+$216 ;CAN3 Identifier mask register 2
 0217            CAN3IDM3 = REGBS+$217 ;CAN3 Identifier mask register 3
 0218            CAN3IDA4 = REGBS+$218 ;CAN3 Identifier acceptanceregister 4
 0219            CAN3IDA5 = REGBS+$219 ;CAN3 Identifier acceptanceregister 5
 021A            CAN3IDA6 = REGBS+$21A ;CAN3 Identifier acceptanceregister 6
 021B            CAN3IDA7 = REGBS+$21B ;CAN3 Identifier acceptanceregister 7
 021C            CAN3IDM4 = REGBS+$21C ;CAN3 Identifier mask register 4
 021D            CAN3IDM5 = REGBS+$21D ;CAN3 Identifier mask register 5
 021E            CAN3IDM6 = REGBS+$21E ;CAN3 Identifier mask register 6
 021F            CAN3IDM7 = REGBS+$21F ;CAN3 Identifier mask register 7
 0220            CAN3RXFG = REGBS+$220 ;CAN3 RX foregroundbuffer thru +$22F
 0230            CAN3TXFG = REGBS+$230 ;CAN3 TX foregroundbuffer thru +$23F
--- 0000           
 0240            PTT = REGBS+$240 ;portT data register
 0241            PTIT = REGBS+$241 ;portT input register
 0242            DDRT = REGBS+$242 ;portT direction register
 0243            RDRT = REGBS+$243 ;portT reduced drive register
 0244            PERT = REGBS+$244 ;portT pull device enable
 0245            PPST = REGBS+$245 ;portT pull polarity select
--- 0000           
 0248            PTS = REGBS+$248 ;portS data register
 0249            PTIS = REGBS+$249 ;portS input register
 024A            DDRS = REGBS+$24A ;portS direction register
 024B            RDRS = REGBS+$24B ;portS reduced drive register
 024C            PERS = REGBS+$24C ;portS pull device enable
 024D            PPSS = REGBS+$24D ;portS pull polarity select
 024E            WOMS = REGBS+$24E ;portS Wired Or mode register
--- 0000           
 0250            PTM = REGBS+$250 ;portM data register
 0251            PTIM = REGBS+$251 ;portM input register
 0252            DDRM = REGBS+$252 ;portM direction register
 0253            RDRM = REGBS+$253 ;portM reduced drive register
 0254            PERM = REGBS+$254 ;portM pull device enable
 0255            PPSM = REGBS+$255 ;portM pull polarity select
 0256            WOMM = REGBS+$256 ;portM Wired Or mode register
 0257            MODRR = REGBS+$257 ;portM Module routing register
 0258            PTP = REGBS+$258 ;portP data register
 0259            PTIP = REGBS+$259 ;portP input register
 025A            DDRP = REGBS+$25A ;portP direction register
 025B            RDRP = REGBS+$25B ;portP reduced drive register
 025C            PERP = REGBS+$25C ;portP pull device enable
 025D            PPSP = REGBS+$25D ;portP pull polarity select
 025E            PIEP = REGBS+$25E ;portP interrupt enable register
 025F            PIFP = REGBS+$25F ;portP interrupt flag register
 0260            PTH = REGBS+$260 ;portH data register
 0261            PTIH = REGBS+$261 ;portH input register
 0262            DDRH = REGBS+$262 ;portH direction register
 0263            RDRH = REGBS+$263 ;portH reduced drive register
 0264            PERH = REGBS+$264 ;portH pull device enable
 0265            PPSH = REGBS+$265 ;portH pull polarity select
 0266            PIEH = REGBS+$266 ;portH interrupt enable register
 0267            PIFH = REGBS+$267 ;portH interrupt flag register
 0268            PTJ = REGBS+$268 ;portP data register
 0269            PTIJ = REGBS+$269 ;portP input register
 026A            DDRJ = REGBS+$26A ;portP direction register
 026B            RDRJ = REGBS+$26B ;portP reduced drive register
 026C            PERJ = REGBS+$26C ;portP pull device enable
 026D            PPSJ = REGBS+$26D ;portP pull polarity select
 026E            PIEJ = REGBS+$26E ;portP interrupt enable register
 026F            PIFJ = REGBS+$26F ;portP interrupt flag register
--- 0000           
 0280            CAN4CTL0 = REGBS+$280 ;CAN4 control register 0
 0281            CAN4CTL1 = REGBS+$281 ;CAN4 control register 1
 0282            CAN4BTR0 = REGBS+$282 ;CAN4 bus timing register 0
 0283            CAN4BTR1 = REGBS+$283 ;CAN4 bus timing register 1
 0284            CAN4RFLG = REGBS+$284 ;CAN4 receiver flags
 0285            CAN4RIER = REGBS+$285 ;CAN4 receiver interrupt enables
 0286            CAN4TFLG = REGBS+$286 ;CAN4 transmit flags
 0287            CAN4TIER = REGBS+$287 ;CAN4 transmit interrupt enables
 0288            CAN4TARQ = REGBS+$288 ;CAN4 transmit message abort control
 0289            CAN4TAAK = REGBS+$289 ;CAN4 transmit message abort status
 028A            CAN4TBEL = REGBS+$28A ;CAN4 transmit buffer select
 028B            CAN4IDAC = REGBS+$28B ;CAN4 identfier acceptancecontrol
--- 0000           
 028E            CAN4RERR = REGBS+$28E ;CAN4 Receive error counter
 028F            CAN4TERR = REGBS+$28F ;CAN4 Transmit error counter
 0290            CAN4IDA0 = REGBS+$290 ;CAN4 Identifier acceptanceregister 0
 0291            CAN4IDA1 = REGBS+$291 ;CAN4 Identifier acceptanceregister 1
 0292            CAN4IDA2 = REGBS+$292 ;CAN4 Identifier acceptanceregister 2
 0293            CAN4IDA3 = REGBS+$293 ;CAN4 Identifier acceptanceregister 3
 0294            CAN4IDM0 = REGBS+$294 ;CAN4 Identifier mask register 0
 0295            CAN4IDM1 = REGBS+$295 ;CAN4 Identifier mask register 1
 0296            CAN4IDM2 = REGBS+$296 ;CAN4 Identifier mask register 2
 0297            CAN4IDM3 = REGBS+$297 ;CAN4 Identifier mask register 3
 0298            CAN4IDA4 = REGBS+$298 ;CAN4 Identifier acceptanceregister 4
 0299            CAN4IDA5 = REGBS+$299 ;CAN4 Identifier acceptanceregister 5
 029A            CAN4IDA6 = REGBS+$29A ;CAN4 Identifier acceptanceregister 6
 029B            CAN4IDA7 = REGBS+$29B ;CAN4 Identifier acceptanceregister 7
 029C            CAN4IDM4 = REGBS+$29C ;CAN4 Identifier mask register 4
 029D            CAN4IDM5 = REGBS+$29D ;CAN4 Identifier mask register 5
 029E            CAN4IDM6 = REGBS+$29E ;CAN4 Identifier mask register 6
 029F            CAN4IDM7 = REGBS+$29F ;CAN4 Identifier mask register 7
 02A0            CAN4RXFG = REGBS+$2A0 ;CAN4 RX foregroundbuffer thru +$2AF
 02B0            CAN4TXFG = REGBS+$2B0 ;CAN4 TX foregroundbuffer thru +$2BF
 0000            REGBS = $0000 ; DP256 register bank base address
 0000            PORTA = REGBS+0 ;port A = Address lines A8 A15
 0001            PORTB = REGBS+1 ;port B = Address lines A0 A7
 0002            DDRA = REGBS+2 ;port A direction register
 0003            DDRB = REGBS+3 ;port A direction register
 0008            PORTE = REGBS+8 ;port E = mode,IRQandcontrolsignals
 0009            DDRE = REGBS+9 ;port E direction register
 000A            PEAR = REGBS+$A ;port E assignments
 000B            MODE = REGBS+$B ;Mode register
 000C            PUCR = REGBS+$C ;port pull-up control register
 000D            RDRIV = REGBS+$D ;port reduced drive control register
 000E            EBICTL = REGBS+$E ;E stretch control
--- 0000           
 0010            INITRM = REGBS+$10 ;Ram location register
 0011            INITRG = REGBS+$11 ;Register location register
 0012            INITEE = REGBS+$12 ;EEprom location register
 0013            MISC = REGBS+$13 ;MiscellaneoMapping control
 0014            MTST0 = REGBS+$14 ; RESERVED
 0015            ITCR = REGBS+$15 ;Interrupt test control register
 0016            ITEST = REGBS+$16 ;Interrupt test register
 0017            MTST1 = REGBS+$17 ; Reserved
--- 0000           
 001A            PARTIDH = REGBS+$1A ;Part ID high
 001B            PARTIDL = REGBS+$1B ;Part ID low
 001C            MEMSIZ0 = REGBS+$1C ;memory size
 001D            MEMSIZ1 = REGBS+$1D ;memory size
 001E            INTCR = REGBS+$1E ;interrupt control register
 001F            HPRIO = REGBS+$1F ;high priority reg
--- 0000           
 0028            BKPCT0 = REGBS+$28 ;Break control register
 0029            BKPCT1 = REGBS+$29 ;Break control register
 002A            BKP0X = REGBS+$2A ; Break 0 index register
 002B            BKP0H = REGBS+$2B ; Break 0 pointer high
 002C            BRP0L = REGBS+$2C ; Break 0 pointer low
 002D            BKP1X = REGBS+$2D ; Break 1 index register
 002E            BKP1H = REGBS+$2E ; Break 1 pointer high
 002F            BRP1L = REGBS+$2F ; Break 1 pointer low
 0030            PPAGE = REGBS+$30 ;Program Page register
--- 0000           
 0032            PORTK = REGBS+$32 ;Port K data
 0033            DDRK = REGBS+$33 ;Port K direction
 0034            SYNR = REGBS+$34 ; Synthesizer / multiplier register
 0035            REFDV = REGBS+$35 ; Reference divider register
 0036            CTFLG = REGBS+$36 ; RESERVED
 0037            CRGFLG = REGBS+$37 ; PLL flags register
 0038            CRGINT = REGBS+$38 ; PLL interrupt register
 0039            CLKSEL = REGBS+$39 ; Clock select register
 003A            PLLCTL = REGBS+$3A ; PLL control register
 003B            RTICTL = REGBS+$3B ;Real time interrupt control
 003C            COPCTL = REGBS+$3C ;Watchdog control
 003D            FORBYP = REGBS+$3D ;
 003E            CTCTL = REGBS+$3E ;
 003F            ARMCOP = REGBS+$3F ;COP reset register
--- 0000           
 0040            TIOS = REGBS+$40 ;timer input/output select
 0041            CFORC = REGBS+$41 ;timer compare force
 0042            OC7M = REGBS+$42 ;timer output compare 7 mask
 0043            OC7D = REGBS+$43 ;timer output compare 7 data
 0044            TCNT = REGBS+$44 ;timer counter register hi
 0045            *TCNT = REGBS+$45 ;timer counter register lo
 0046            TSCR = REGBS+$46 ;timer system control register
 0047            TTOV = REGBS+$47 ;reserved
 0048            TCTL1 = REGBS+$48 ;timer control register 1
 0049            TCTL2 = REGBS+$49 ;timer control register 2
 004A            TCTL3 = REGBS+$4A ;timer control register 3
 004B            TCTL4 = REGBS+$4B ;timer control register 4
 004C            TMSK1 = REGBS+$4C ;timer interrupt mask 1
 004D            TMSK2 = REGBS+$4D ;timer interrupt mask 2
 004E            TFLG1 = REGBS+$4E ;timer flags 1
 004F            TFLG2 = REGBS+$4F ;timer flags 2
 0050            TC0 = REGBS+$50 ;timer capture/comparregister 0
 0051            *TC0 = REGBS+$51 ;
 0052            TC1 = REGBS+$52 ;timer capture/comparregister 1
 0053            *TC1 = REGBS+$53 ;
 0054            TC2 = REGBS+$54 ;timer capture/comparregister 2
 0055            *TC2 = REGBS+$55 ;
 0056            TC3 = REGBS+$56 ;timer capture/comparregister 3
 0057            *TC3 = REGBS+$57 ;
 0058            TC4 = REGBS+$58 ;timer capture/comparregister 4
 0059            *TC4 = REGBS+$59 ;
 005A            TC5 = REGBS+$5A ;timer capture/comparregister 5
 005B            *TC5 = REGBS+$5B ;
 005C            TC6 = REGBS+$5C ;timer capture/comparregister 6
 005D            *TC6 = REGBS+$5D ;
 005E            TC7 = REGBS+$5E ;timer capture/comparregister 7
 005F            *TC7 = REGBS+$5F ;
 0060            PACTL = REGBS+$60 ;pulse accumulator controls
 0061            PAFLG = REGBS+$61 ;pulse accumulator flags
 0062            PACN3 = REGBS+$62 ;pulse accumulator counter 3
 0063            PACN2 = REGBS+$63 ;pulse accumulator counter 2
 0064            PACN1 = REGBS+$64 ;pulse accumulator counter 1
 0065            PACN0 = REGBS+$65 ;pulse accumulator counter 0
 0066            MCCTL = REGBS+$66 ;Modulus down conunter control
 0067            MCFLG = REGBS+$67 ;down counter flags
 0068            ICPAR = REGBS+$68 ;Input pulse accumulatocontrol
 0069            DLYCT = REGBS+$69 ;Delay count to down counter
 006A            ICOVW = REGBS+$6A ;Input control overwrite register
 006B            ICSYS = REGBS+$6B ;Input control system control
--- 0000           
 006D            TIMTST = REGBS+$6D ;timer test register
--- 0000           
 0070            PBCTL = REGBS+$70 ; Pulse accumulatoB control
 0071            PBFLG = REGBS+$71 ; Pulse accumulatoB flags
 0072            PA3H = REGBS+$72 ; Pulse Accumulatoholding regist3
 0073            PA2H = REGBS+$73 ; Pulse Accumulatoholding regist2
 0074            PA1H = REGBS+$74 ; Pulse Accumulatoholding regist1
 0075            PA0H = REGBS+$75 ; Pulse Accumulatoholding regist0
 0076            MCCNT = REGBS+$76 ; Modulus down counter register
 0077            *MCCNTL = REGBS+$77 ; low byte
 0078            TCOH = REGBS+$78 ; Capture 0 holding register
 007A            TC1H = REGBS+$7A ; Capture 1 holding register
 007C            TC2H = REGBS+$7C ; Capture 2 holding register
 007E            TC3H = REGBS+$7E ; Capture 3 holding register
--- 0000           
 0080            ATD0CTL0 = REGBS+$80 ;ADC control 0 (reserved)
 0081            ATD0CTL1 = REGBS+$81 ;ADC control 1 (reserved)
 0082            ATD0CTL2 = REGBS+$82 ;ADC control 2
 0083            ATD0CTL3 = REGBS+$83 ;ADC control 3
 0084            ATD0CTL4 = REGBS+$84 ;ADC control 4
 0085            ATD0CTL5 = REGBS+$85 ;ADC control 5
 0086            ATD0STAT = REGBS+$86 ;ADC status register hi
 0087            *ATD0STAT = REGBS+$87 ;ADC status register lo
 0088            ATD0TEST = REGBS+$88 ;ADC test (reserved)
 0089            *ATD0TEST = REGBS+$89 ;
--- 0000           
 008D            ATD0DIEN = REGBS+$8D ;
--- 0000           
 008F            PORTAD = REGBS+$8F ;port ADC = input only
 0090            ADR00H = REGBS+$90 ;ADC result 0 register
 0092            ADR01H = REGBS+$92 ;ADC result 1 register
 0094            ADR02H = REGBS+$94 ;ADC result 2 register
 0096            ADR03H = REGBS+$96 ;ADC result 3 register
 0098            ADR04H = REGBS+$98 ;ADC result 4 register
 009A            ADR05H = REGBS+$9A ;ADC result 5 register
 009C            ADR06H = REGBS+$9C ;ADC result 6 register
 009E            ADR07H = REGBS+$9E ;ADC result 7 register
--- 0000           
 00A0            PWME = REGBS+$A0 ;PWM enable
 00A1            PWMPOL = REGBS+$A1 ;PWM polarity
 00A2            PWMCLK = REGBS+$A2 ;PWM clock select register
 00A3            PWMPRCLK = REGBS+$A3 ;PWM Prescale clock select register
 00A4            PWMCAE = REGBS+$A4 ;PWM center align select register
 00A5            PWMCTL = REGBS+$A5 ;PWM control register
 00A6            PWMTST = REGBS+$A6 ;reserved
 00A7            PWMPRSC = REGBS+$A7 ;reserved
 00A8            PWMSCLA = REGBS+$A8 ;PWM Scale A
 00A9            PWMSCLB = REGBS+$A9 ;PWM scale B
 00AA            PWMSCNTA = REGBS+$AA ;reserved
 00AB            PWMSCNTB = REGBS+$AB ;reserved
 00AC            PWMCNT0 = REGBS+$AC ;PWM channel 0 counter
 00AD            PWMCNT1 = REGBS+$AD ;PWM channel 1 counter
 00AE            PWMCNT2 = REGBS+$AE ;PWM channel 2 counter
 00AF            PWMCNT3 = REGBS+$AF ;PWM channel 3 counter
 00B0            PWMCNT4 = REGBS+$B0 ;PWM channel 4 counter
 00B1            PWMCNT5 = REGBS+$B1 ;PWM channel 5 counter
 00B2            PWMCNT6 = REGBS+$B2 ;PWM channel 6 counter
 00B3            PWMCNT7 = REGBS+$B3 ;PWM channel 7 counter
 00B4            PWMPER0 = REGBS+$B4 ;PWM channel 0 period
 00B5            PWMPER1 = REGBS+$B5 ;PWM channel 1 period
 00B6            PWMPER2 = REGBS+$B6 ;PWM channel 2 period
 00B7            PWMPER3 = REGBS+$B7 ;PWM channel 3 period
 00B8            PWMPER4 = REGBS+$B8 ;PWM channel 4 period
 00B9            PWMPER5 = REGBS+$B9 ;PWM channel 5 period
 00BA            PWMPER6 = REGBS+$BA ;PWM channel 6 period
 00BB            PWMPER7 = REGBS+$BB ;PWM channel 7 period
 00BC            PWMDTY0 = REGBS+$BC ;PWM channel 0 duty cycle
 00BD            PWMDTY1 = REGBS+$BD ;PWM channel 1 duty cycle
 00BE            PWMDTY2 = REGBS+$BE ;PWM channel 2 duty cycle
 00BF            PWMDTY3 = REGBS+$BF ;PWM channel 3 duty cycle
 00C0            PWMDTY4 = REGBS+$C0 ;PWM channel 0 duty cycle
 00C1            PWMDTY5 = REGBS+$C1 ;PWM channel 1 duty cycle
 00C2            PWMDTY6 = REGBS+$C2 ;PWM channel 2 duty cycle
 00C3            PWMDTY7 = REGBS+$C3 ;PWM channel 3 duty cycle
 00C4            PWMSDN = REGBS+$C4 ;PWM shutdown register
--- 0000           
 00C8            SC0BDH = REGBS+$C8 ;sci 0 baud reg hi byte
 00C9            SC0BDL = REGBS+$C9 ;sci 0 baud reg lo byte
 00CA            SC0CR1 = REGBS+$CA ;sci 0 control1 reg
 00CB            SC0CR2 = REGBS+$CB ;sci 0 control2 reg
 00CC            SC0SR1 = REGBS+$CC ;sci 0 status reg 1
 00CD            SC0SR2 = REGBS+$CD ;sci 0 status reg 2
 00CE            SC0DRH = REGBS+$CE ;sci 0 data reg hi
 00CF            SC0DRL = REGBS+$CF ;sci 0 data reg lo
 00D0            SC1BDH = REGBS+$D0 ;sci 1 baud reg hi byte
 00D1            SC1BDL = REGBS+$D1 ;sci 1 baud reg lo byte
 00D2            SC1CR1 = REGBS+$D2 ;sci 1 control1 reg
 00D3            SC1CR2 = REGBS+$D3 ;sci 1 control2 reg
 00D4            SC1SR1 = REGBS+$D4 ;sci 1 status reg 1
 00D5            SC1SR2 = REGBS+$D5 ;sci 1 status reg 2
 00D6            SC1DRH = REGBS+$D6 ;sci 1 data reg hi
 00D7            SC1DRL = REGBS+$D7 ;sci 1 data reg lo
 00D8            SPI0CR1 = REGBS+$D8 ;spi 0 control1 reg
 00D9            SPI0CR2 = REGBS+$D9 ;spi 0 control2 reg
 00DA            SPI0BR = REGBS+$DA ;spi 0 baud reg
 00DB            SPI0SR = REGBS+$DB ;spi 0 status reg hi
--- 0000           
 00DD            SP0DR = REGBS+$DD ;spi 0 data reg
--- 0000           
 00E0            IBAD = REGBS+$E0 ;I2C Bus address register
 00E1            IBFD = REGBS+$E1 ;I2C Bus fr=ency divider
 00E2            IBCR = REGBS+$E2 ;I2C Bus control register
 00E3            IBSR = REGBS+$E3 ;I2C Bus status register
 00E4            IBDR = REGBS+$E4 ;I2C Bus message data register
--- 0000           
 00E8            DLCBCR1 = REGBS+$E8 ;BDLC Control regsiter 1
 00E9            DLCBSVR = REGBS+$E9 ;BDLC State vector register
 00EA            DLCBCR2 = REGBS+$EA ;BDLC Control register 2
 00EB            DLCBDR = REGBS+$EB ;BDLC Data register
 00EC            DLCBARD = REGBS+$EC ;BDLC Analog delay register
 00ED            DLCBRSR = REGBS+$ED ;BDLC Rate select register
 00EE            DLCSCR = REGBS+$EE ;BDLC Control register
 00EF            DLCBSTAT = REGBS+$EF ;BDLC Status register
 00F0            SPI1CR1 = REGBS+$F0 ;spi 1 control1 reg
 00F1            SPI1CR2 = REGBS+$F1 ;spi 1 control2 reg
 00F2            SPI1BR = REGBS+$F2 ;spi 1 baud reg
 00F3            SPI1SR = REGBS+$F3 ;spi 1 status reg hi
--- 0000           
 00F5            SP1DR = REGBS+$F5 ;spi 1 data reg
--- 0000           
 00F8            SPI2CR1 = REGBS+$F8 ;spi 2 control1 reg
 00F9            SPI2CR2 = REGBS+$F9 ;spi 2 control2 reg
 00FA            SPI2BR = REGBS+$FA ;spi 2 baud reg
 00FB            SPI2SR = REGBS+$FB ;spi 2 status reg hi
--- 0000           
 00FD            SP2DR = REGBS+$FD ;spi 2 data reg
--- 0000           
 0100            FCLKDIV = REGBS+$100 ;FLASH clock divider
 0101            FSEC = REGBS+$101 ;FLASH security register
--- 0000           
 0103            FCNFG = REGBS+$103 ;FLASH configuration register
 0104            FPROT = REGBS+$104 ;FLASH protection register
 0105            FSTAT = REGBS+$105 ;FLASH status register
 0106            FCMD = REGBS+$106 ;FLASH command register
--- 0000           
 0110            ECLKDIV = REGBS+$110 ;EEPROM clock divider
--- 0000           
 0113            ECNFG = REGBS+$113 ;EEPROM configuration register
 0114            EPROT = REGBS+$114 ;EEPROM protection register
 0115            ESTAT = REGBS+$115 ;EEPROM status register
 0116            ECMD = REGBS+$116 ;EEPROM command register
--- 0000           
 0120            ATD1CTL0 = REGBS+$120 ;ADC1 control 0 (reserved)
 0121            ATD1CTL1 = REGBS+$121 ;ADC1 control 1 (reserved)
 0122            ATD1CTL2 = REGBS+$122 ;ADC1 control 2
 0123            ATD1CTL3 = REGBS+$123 ;ADC1 control 3
 0124            ATD1CTL4 = REGBS+$124 ;ADC1 control 4
 0125            ATD1CTL5 = REGBS+$125 ;ADC1 control 5
 0126            ATD1STAT = REGBS+$126 ;ADC1 status register hi
 0127            *ATD1STAT = REGBS+$127 ;ADC1 status register lo
 0128            ATD1TEST = REGBS+$128 ;ADC1 test (reserved)
 0129            *ATD1TEST = REGBS+$129 ;
--- 0000           
 012D            ATDDIEN = REGBS+$12D ;ADC1 INPUT ENABLE REGISTER
--- 0000           
 012F            PORTAD1 = REGBS+$12F ;port ADC1 = input only
 0130            ADR10H = REGBS+$130 ;ADC1 result 0 register
 0132            ADR11H = REGBS+$132 ;ADC1 result 1 register
 0134            ADR12H = REGBS+$134 ;ADC1 result 2 register
 0136            ADR13H = REGBS+$136 ;ADC1 result 3 register
 0138            ADR14H = REGBS+$138 ;ADC1 result 4 register
 013A            ADR15H = REGBS+$13A ;ADC1 result 5 register
 013C            ADR16H = REGBS+$13C ;ADC1 result 6 register
 013E            ADR17H = REGBS+$13E ;ADC1 result 7 register
 0140            CAN0CTL0 = REGBS+$140 ;CAN0 control register 0
 0141            CAN0CTL1 = REGBS+$141 ;CAN0 control register 1
 0142            CAN0BTR0 = REGBS+$142 ;CAN0 bus timing register 0
 0143            CAN0BTR1 = REGBS+$143 ;CAN0 bus timing register 1
 0144            CAN0RFLG = REGBS+$144 ;CAN0 receiver flags
 0145            CAN0RIER = REGBS+$145 ;CAN0 receiver interrupt enables
 0146            CAN0TFLG = REGBS+$146 ;CAN0 transmit flags
 0147            CAN0TIER = REGBS+$147 ;CAN0 transmit interrupt enables
 0148            CAN0TARQ = REGBS+$148 ;CAN0 transmit message abort control
 0149            CAN0TAAK = REGBS+$149 ;CAN0 transmit message abort status
 014A            CAN0TBEL = REGBS+$14A ;CAN0 transmit buffer select
 014B            CAN0IDAC = REGBS+$14B ;CAN0 identfier acceptancecontrol
--- 0000           
 014E            CAN0RERR = REGBS+$14E ;CAN0 Receive error counter
 014F            CAN0TERR = REGBS+$14F ;CAN0 Transmit error counter
 0150            CAN0IDA0 = REGBS+$150 ;CAN0 Identifier acceptanceregister 0
 0151            CAN0IDA1 = REGBS+$151 ;CAN0 Identifier acceptanceregister 1
 0152            CAN0IDA2 = REGBS+$152 ;CAN0 Identifier acceptanceregister 2
 0153            CAN0IDA3 = REGBS+$153 ;CAN0 Identifier acceptanceregister 3
 0154            CAN0IDM0 = REGBS+$154 ;CAN0 Identifier mask register 0
 0155            CAN0IDM1 = REGBS+$155 ;CAN0 Identifier mask register 1
 0156            CAN0IDM2 = REGBS+$156 ;CAN0 Identifier mask register 2
 0157            CAN0IDM3 = REGBS+$157 ;CAN0 Identifier mask register 3
 0158            CAN0IDA4 = REGBS+$158 ;CAN0 Identifier acceptanceregister 4
 0159            CAN0IDA5 = REGBS+$159 ;CAN0 Identifier acceptanceregister 5
 015A            CAN0IDA6 = REGBS+$15A ;CAN0 Identifier acceptanceregister 6
 015B            CAN0IDA7 = REGBS+$15B ;CAN0 Identifier acceptanceregister 7
 015C            CAN0IDM4 = REGBS+$15C ;CAN0 Identifier mask register 4
 015D            CAN0IDM5 = REGBS+$15D ;CAN0 Identifier mask register 5
 015E            CAN0IDM6 = REGBS+$15E ;CAN0 Identifier mask register 6
 015F            CAN0IDM7 = REGBS+$15F ;CAN0 Identifier mask register 7
 0160            CAN0RXFG = REGBS+$160 ;CAN0 RX foregroundbuffer thru +$16F
 0170            CAN0TXFG = REGBS+$170 ;CAN0 TX foregroundbuffer thru +$17F
--- 0000           
 0180            CAN1CTL0 = REGBS+$180 ;CAN1 control register 0
 0181            CAN1CTL1 = REGBS+$181 ;CAN1 control register 1
 0182            CAN1BTR0 = REGBS+$182 ;CAN1 bus timing register 0
 0183            CAN1BTR1 = REGBS+$183 ;CAN1 bus timing register 1
 0184            CAN1RFLG = REGBS+$184 ;CAN1 receiver flags
 0185            CAN1RIER = REGBS+$185 ;CAN1 receiver interrupt enables
 0186            CAN1TFLG = REGBS+$186 ;CAN1 transmit flags
 0187            CAN1TIER = REGBS+$187 ;CAN1 transmit interrupt enables
 0188            CAN1TARQ = REGBS+$188 ;CAN1 transmit message abort control
 0189            CAN1TAAK = REGBS+$189 ;CAN1 transmit message abort status
 018A            CAN1TBEL = REGBS+$18A ;CAN1 transmit buffer select
 018B            CAN1IDAC = REGBS+$18B ;CAN1 identfier acceptancecontrol
--- 0000           
 018E            CAN1RERR = REGBS+$18E ;CAN1 Receive error counter
 018F            CAN1TERR = REGBS+$18F ;CAN1 Transmit error counter
 0190            CAN1IDA0 = REGBS+$190 ;CAN1 Identifier acceptanceregister 0
 0191            CAN1IDA1 = REGBS+$191 ;CAN1 Identifier acceptanceregister 1
 0192            CAN1IDA2 = REGBS+$192 ;CAN1 Identifier acceptanceregister 2
 0193            CAN1IDA3 = REGBS+$193 ;CAN1 Identifier acceptanceregister 3
 0194            CAN1IDM0 = REGBS+$194 ;CAN1 Identifier mask register 0
 0195            CAN1IDM1 = REGBS+$195 ;CAN1 Identifier mask register 1
 0196            CAN1IDM2 = REGBS+$196 ;CAN1 Identifier mask register 2
 0197            CAN1IDM3 = REGBS+$197 ;CAN1 Identifier mask register 3
 0198            CAN1IDA4 = REGBS+$198 ;CAN1 Identifier acceptanceregister 4
 0199            CAN1IDA5 = REGBS+$199 ;CAN1 Identifier acceptanceregister 5
 019A            CAN1IDA6 = REGBS+$19A ;CAN1 Identifier acceptanceregister 6
 019B            CAN1IDA7 = REGBS+$19B ;CAN1 Identifier acceptanceregister 7
 019C            CAN1IDM4 = REGBS+$19C ;CAN1 Identifier mask register 4
 019D            CAN1IDM5 = REGBS+$19D ;CAN1 Identifier mask register 5
 019E            CAN1IDM6 = REGBS+$19E ;CAN1 Identifier mask register 6
 019F            CAN1IDM7 = REGBS+$19F ;CAN1 Identifier mask register 7
 01A0            CAN1RXFG = REGBS+$1A0 ;CAN1 RX foregroundbuffer thru +$1AF
 01B0            CAN1TXFG = REGBS+$1B0 ;CAN1 TX foregroundbuffer thru +$1BF
--- 0000           
 01C0            CAN2CTL0 = REGBS+$1C0 ;CAN2 control register 0
 01C1            CAN2CTL1 = REGBS+$1C1 ;CAN2 control register 1
 01C2            CAN2BTR0 = REGBS+$1C2 ;CAN2 bus timing register 0
 01C3            CAN2BTR1 = REGBS+$1C3 ;CAN2 bus timing register 1
 01C4            CAN2RFLG = REGBS+$1C4 ;CAN2 receiver flags
 01C5            CAN2RIER = REGBS+$1C5 ;CAN2 receiver interrupt enables
 01C6            CAN2TFLG = REGBS+$1C6 ;CAN2 transmit flags
 01C7            CAN2TIER = REGBS+$1C7 ;CAN2 transmit interrupt enables
 01C8            CAN2TARQ = REGBS+$1C8 ;CAN2 transmit message abort control
 01C9            CAN2TAAK = REGBS+$1C9 ;CAN2 transmit message abort status
 01CA            CAN2TBEL = REGBS+$1CA ;CAN2 transmit buffer select
 01CB            CAN2IDAC = REGBS+$1CB ;CAN2 identfier acceptancecontrol
--- 0000           
 01CE            CAN2RERR = REGBS+$1CE ;CAN2 Receive error counter
 01CF            CAN2TERR = REGBS+$1CF ;CAN2 Transmit error counter
 01D0            CAN2IDA0 = REGBS+$1D0 ;CAN2 Identifier acceptanceregister 0
 01D1            CAN2IDA1 = REGBS+$1D1 ;CAN2 Identifier acceptanceregister 1
 01D2            CAN2IDA2 = REGBS+$1D2 ;CAN2 Identifier acceptanceregister 2
 01D3            CAN2IDA3 = REGBS+$1D3 ;CAN2 Identifier acceptanceregister 3
 01D4            CAN2IDM0 = REGBS+$1D4 ;CAN2 Identifier mask register 0
 01D5            CAN2IDM1 = REGBS+$1D5 ;CAN2 Identifier mask register 1
 01D6            CAN2IDM2 = REGBS+$1D6 ;CAN2 Identifier mask register 2
 01D7            CAN2IDM3 = REGBS+$1D7 ;CAN2 Identifier mask register 3
 01D8            CAN2IDA4 = REGBS+$1D8 ;CAN2 Identifier acceptanceregister 4
 01D9            CAN2IDA5 = REGBS+$1D9 ;CAN2 Identifier acceptanceregister 5
 01DA            CAN2IDA6 = REGBS+$1DA ;CAN2 Identifier acceptanceregister 6
 01DB            CAN2IDA7 = REGBS+$1DB ;CAN2 Identifier acceptanceregister 7
 01DC            CAN2IDM4 = REGBS+$1DC ;CAN2 Identifier mask register 4
 01DD            CAN2IDM5 = REGBS+$1DD ;CAN2 Identifier mask register 5
 01DE            CAN2IDM6 = REGBS+$1DE ;CAN2 Identifier mask register 6
 01DF            CAN2IDM7 = REGBS+$1DF ;CAN2 Identifier mask register 7
 01E0            CAN2RXFG = REGBS+$1E0 ;CAN2 RX foregroundbuffer thru +$1EF
 01F0            CAN2TXFG = REGBS+$1F0 ;CAN2 TX foregroundbuffer thru +$1FF
--- 0000           
 0200            CAN3CTL0 = REGBS+$200 ;CAN3 control register 0
 0201            CAN3CTL1 = REGBS+$201 ;CAN3 control register 1
 0202            CAN3BTR0 = REGBS+$202 ;CAN3 bus timing register 0
 0203            CAN3BTR1 = REGBS+$203 ;CAN3 bus timing register 1
 0204            CAN3RFLG = REGBS+$204 ;CAN3 receiver flags
 0205            CAN3RIER = REGBS+$205 ;CAN3 receiver interrupt enables
 0206            CAN3TFLG = REGBS+$206 ;CAN3 transmit flags
 0207            CAN3TIER = REGBS+$207 ;CAN3 transmit interrupt enables
 0208            CAN3TARQ = REGBS+$208 ;CAN3 transmit message abort control
 0209            CAN3TAAK = REGBS+$209 ;CAN3 transmit message abort status
 020A            CAN3TBEL = REGBS+$20A ;CAN3 transmit buffer select
 020B            CAN3IDAC = REGBS+$20B ;CAN3 identfier acceptancecontrol
--- 0000           
 020E            CAN3RERR = REGBS+$20E ;CAN3 Receive error counter
 020F            CAN3TERR = REGBS+$20F ;CAN3 Transmit error counter
 0210            CAN3IDA0 = REGBS+$210 ;CAN3 Identifier acceptanceregister 0
 0211            CAN3IDA1 = REGBS+$211 ;CAN3 Identifier acceptanceregister 1
 0212            CAN3IDA2 = REGBS+$212 ;CAN3 Identifier acceptanceregister 2
 0213            CAN3IDA3 = REGBS+$213 ;CAN3 Identifier acceptanceregister 3
 0214            CAN3IDM0 = REGBS+$214 ;CAN3 Identifier mask register 0
 0215            CAN3IDM1 = REGBS+$215 ;CAN3 Identifier mask register 1
 0216            CAN3IDM2 = REGBS+$216 ;CAN3 Identifier mask register 2
 0217            CAN3IDM3 = REGBS+$217 ;CAN3 Identifier mask register 3
 0218            CAN3IDA4 = REGBS+$218 ;CAN3 Identifier acceptanceregister 4
 0219            CAN3IDA5 = REGBS+$219 ;CAN3 Identifier acceptanceregister 5
 021A            CAN3IDA6 = REGBS+$21A ;CAN3 Identifier acceptanceregister 6
 021B            CAN3IDA7 = REGBS+$21B ;CAN3 Identifier acceptanceregister 7
 021C            CAN3IDM4 = REGBS+$21C ;CAN3 Identifier mask register 4
 021D            CAN3IDM5 = REGBS+$21D ;CAN3 Identifier mask register 5
 021E            CAN3IDM6 = REGBS+$21E ;CAN3 Identifier mask register 6
 021F            CAN3IDM7 = REGBS+$21F ;CAN3 Identifier mask register 7
 0220            CAN3RXFG = REGBS+$220 ;CAN3 RX foregroundbuffer thru +$22F
 0230            CAN3TXFG = REGBS+$230 ;CAN3 TX foregroundbuffer thru +$23F
--- 0000           
 0240            PTT = REGBS+$240 ;portT data register
 0241            PTIT = REGBS+$241 ;portT input register
 0242            DDRT = REGBS+$242 ;portT direction register
 0243            RDRT = REGBS+$243 ;portT reduced drive register
 0244            PERT = REGBS+$244 ;portT pull device enable
 0245            PPST = REGBS+$245 ;portT pull polarity select
--- 0000           
 0248            PTS = REGBS+$248 ;portS data register
 0249            PTIS = REGBS+$249 ;portS input register
 024A            DDRS = REGBS+$24A ;portS direction register
 024B            RDRS = REGBS+$24B ;portS reduced drive register
 024C            PERS = REGBS+$24C ;portS pull device enable
 024D            PPSS = REGBS+$24D ;portS pull polarity select
 024E            WOMS = REGBS+$24E ;portS Wired Or mode register
--- 0000           
 0250            PTM = REGBS+$250 ;portM data register
 0251            PTIM = REGBS+$251 ;portM input register
 0252            DDRM = REGBS+$252 ;portM direction register
 0253            RDRM = REGBS+$253 ;portM reduced drive register
 0254            PERM = REGBS+$254 ;portM pull device enable
 0255            PPSM = REGBS+$255 ;portM pull polarity select
 0256            WOMM = REGBS+$256 ;portM Wired Or mode register
 0257            MODRR = REGBS+$257 ;portM Module routing register
 0258            PTP = REGBS+$258 ;portP data register
 0259            PTIP = REGBS+$259 ;portP input register
 025A            DDRP = REGBS+$25A ;portP direction register
 025B            RDRP = REGBS+$25B ;portP reduced drive register
 025C            PERP = REGBS+$25C ;portP pull device enable
 025D            PPSP = REGBS+$25D ;portP pull polarity select
 025E            PIEP = REGBS+$25E ;portP interrupt enable register
 025F            PIFP = REGBS+$25F ;portP interrupt flag register
 0260            PTH = REGBS+$260 ;portH data register
 0261            PTIH = REGBS+$261 ;portH input register
 0262            DDRH = REGBS+$262 ;portH direction register
 0263            RDRH = REGBS+$263 ;portH reduced drive register
 0264            PERH = REGBS+$264 ;portH pull device enable
 0265            PPSH = REGBS+$265 ;portH pull polarity select
 0266            PIEH = REGBS+$266 ;portH interrupt enable register
 0267            PIFH = REGBS+$267 ;portH interrupt flag register
 0268            PTJ = REGBS+$268 ;portP data register
 0269            PTIJ = REGBS+$269 ;portP input register
 026A            DDRJ = REGBS+$26A ;portP direction register
 026B            RDRJ = REGBS+$26B ;portP reduced drive register
 026C            PERJ = REGBS+$26C ;portP pull device enable
 026D            PPSJ = REGBS+$26D ;portP pull polarity select
 026E            PIEJ = REGBS+$26E ;portP interrupt enable register
 026F            PIFJ = REGBS+$26F ;portP interrupt flag register
--- 0000           
 0280            CAN4CTL0 = REGBS+$280 ;CAN4 control register 0
 0281            CAN4CTL1 = REGBS+$281 ;CAN4 control register 1
 0282            CAN4BTR0 = REGBS+$282 ;CAN4 bus timing register 0
 0283            CAN4BTR1 = REGBS+$283 ;CAN4 bus timing register 1
 0284            CAN4RFLG = REGBS+$284 ;CAN4 receiver flags
 0285            CAN4RIER = REGBS+$285 ;CAN4 receiver interrupt enables
 0286            CAN4TFLG = REGBS+$286 ;CAN4 transmit flags
 0287            CAN4TIER = REGBS+$287 ;CAN4 transmit interrupt enables
 0288            CAN4TARQ = REGBS+$288 ;CAN4 transmit message abort control
 0289            CAN4TAAK = REGBS+$289 ;CAN4 transmit message abort status
 028A            CAN4TBEL = REGBS+$28A ;CAN4 transmit buffer select
 028B            CAN4IDAC = REGBS+$28B ;CAN4 identfier acceptancecontrol
--- 0000           
 028E            CAN4RERR = REGBS+$28E ;CAN4 Receive error counter
 028F            CAN4TERR = REGBS+$28F ;CAN4 Transmit error counter
 0290            CAN4IDA0 = REGBS+$290 ;CAN4 Identifier acceptanceregister 0
 0291            CAN4IDA1 = REGBS+$291 ;CAN4 Identifier acceptanceregister 1
 0292            CAN4IDA2 = REGBS+$292 ;CAN4 Identifier acceptanceregister 2
 0293            CAN4IDA3 = REGBS+$293 ;CAN4 Identifier acceptanceregister 3
 0294            CAN4IDM0 = REGBS+$294 ;CAN4 Identifier mask register 0
 0295            CAN4IDM1 = REGBS+$295 ;CAN4 Identifier mask register 1
 0296            CAN4IDM2 = REGBS+$296 ;CAN4 Identifier mask register 2
 0297            CAN4IDM3 = REGBS+$297 ;CAN4 Identifier mask register 3
 0298            CAN4IDA4 = REGBS+$298 ;CAN4 Identifier acceptanceregister 4
 0299            CAN4IDA5 = REGBS+$299 ;CAN4 Identifier acceptanceregister 5
 029A            CAN4IDA6 = REGBS+$29A ;CAN4 Identifier acceptanceregister 6
 029B            CAN4IDA7 = REGBS+$29B ;CAN4 Identifier acceptanceregister 7
 029C            CAN4IDM4 = REGBS+$29C ;CAN4 Identifier mask register 4
 029D            CAN4IDM5 = REGBS+$29D ;CAN4 Identifier mask register 5
 029E            CAN4IDM6 = REGBS+$29E ;CAN4 Identifier mask register 6
 029F            CAN4IDM7 = REGBS+$29F ;CAN4 Identifier mask register 7
 02A0            CAN4RXFG = REGBS+$2A0 ;CAN4 RX foregroundbuffer thru +$2AF
 02B0            CAN4TXFG = REGBS+$2B0 ;CAN4 TX foregroundbuffer thru +$2BF
--- 0000           
--- 0000           ; ========================================================
--- 0000           ;	basicLCD	Include file with minimal support 
--- 0000           ;			for LCD
--- 0000           ;	Requires : dp256reg.asm
--- 0000           ;
--- 0000           ;	Hacked from Lcd_2PP.asm:     L  Parallel Lcd Driver 
--- 0000           ;         Version:       1.0   Released 11/01/2002
--- 0000           ;          Author:       Gary Karnes , Axiom Manufacturing
--- 0000           ;        Compiler:       Asm12
--- 0000           ;        Platform:       CML12S & PROJECT BOARD 
--- 0000           ;
--- 0000           ; ========================================================
--- 0000           ;
--- 0000           ; Equates
 0001           U21_N = $01           ; LCD unused pin
 0002           LCD_RW = $02          ; LCD RW select (PT1)
 0004           LCD_RS = $04          ; LCD RS select	(PT2)
 0008           LCD_EN = $08          ; LCD EN select	(PT3)
 0080           U21_EN = $80
--- 0000           
 43D1            _LCD_instruction::
 43D1  3B                 pshd
 43D2  34                 pshx
 43D3  35                 pshy
 43D4  180F               tba
 43D6  16444B             jsr LD2PP_Instruction
 43D9  31                 puly
 43DA  30                 pulx
 43DB  3A                 puld
 43DC  3D                 rts
 43DD            _LCD_display::
 43DD  3B                 pshd
 43DE  34                 pshx
 43DF  35                 pshy
 43E0  180F               tba
 43E2  164443             jsr LCD2PP_Data
 43E5  31                 puly
 43E6  30                 pulx
 43E7  3A                 puld
 43E8  3D                 rts
 43E9                     
 43E9            ;-----------
 43E9            _Lcd2PP_Init::
 43E9  3B                 pshd
 43EA  34                 pshx
 43EB  35                 pshy
 43EC  1643F3             jsr Lcd2PP_Init
 43EF  31                 puly
 43F0  30                 pulx
 43F1  3A                 puld
 43F2  3D                 rts    
 43F3                      
 43F3            Lcd2PP_Init:	; Note : Use 4-bit init sequence (not 8-bit)  Page 3 LCD_spec.pdf
 43F3            		; Bottom table contains sequence of instructions
 43F3            		; Each row in the table represents one WRITE to the LCD instruction register (via Port P)
 43F3            		;	First instruction involves only a 4-bit instruction (one WRITE)
 43F3            		;	Following instructions involve 8 bit instruction, therefore
 43F3            		;		2 * 4-bit writes
 43F3            
 43F3            	; "System init"
 43F3            	; Setup Port T for output
 43F3  180B0F0242           movb #$0F,DDRT        ; setup port T
 43F8  180B000240           movb #$00,PTT         ; all low
 43FD                    ; Disable SPI AND setup SPI1 as four output bits
 43FD  1C025A0F                bset  DDRP,#$0F           ; set P0-3 as outputs
 4401  1D00F040            bclr  SPI1CR1,#$40    ; Disable SP by turning SPI1 off
 4405            
 4405  180BFE0252           movb #$FE,DDRM        ; set PM1-7 as outputs
 440A  180B080250           movb #$08,PTM         ; D.P.(PM2) = Off, U7_EN(PM3)= low,
 440F                                            ; SS0*(PM4), SS1*(PM5), SS2*(PM6) = Low
 440F                                            ; Heat(PM7) = Off
 440F            
 440F  1D02400E            bclr    PTT,LCD_RW+LCD_RS+LCD_EN  ; select lcd commands Cs=0 En=0
 4413            
 4413  164491              jsr      DELAY50M
 4416  8602                ldaa     #$02         ; Set to 4-bit operation (0010)
 4418  164457              jsr      LCD2PP_4     ; This first instruction is only 4 bits long!!!  Rest are 8 bits.  
 441B  164491              jsr      DELAY50M
 441E            
 441E                    ;  ldaa     #$2c                ; Function Set = 001(D/L)NF** where D/L = 0(4-bit) N=1(2-lines) F=0(font=5x7 dots)
 441E  8628                ldaa     #$28         ; Function Set = 001(D/L)NF** where D/L = 0(4-bit) N=1(2-lines) F=0(font=5x7 dots)
 4420  16444B              jsr      LD2PP_Instruction         
 4423  16449F              jsr      DELAY10M         
 4426            
 4426  860E                ldaa      #$0e        ; Display On/off Control = 00001DCB where D=1(display on) C=1(cursor on) B=0 (blink off)
 4428  16444B              jsr      LD2PP_Instruction          
 442B  16449F              jsr      DELAY10M          
 442E                            
 442E  8601                ldaa     #$01         ; Clear display = 00000001
 4430  16444B              jsr      LD2PP_Instruction           
 4433  16449A              jsr      DELAY20M          
 4436  8680                ldaa     #$80         ; DDRAM Address Set = 01xxxxxx where xxxxxx = address
 4438  16444B              jsr      LD2PP_Instruction
 443B  16449F              jsr      DELAY10M        
 443E            
 443E            ; Reset Lcd states to rest
 443E  1D02400E           bclr    PTT,LCD_RS+LCD_RW+LCD_EN ; turn all signals off on lcd
 4442  3D                  rts
 4443            ;
 4443            ;-----------------------------------------------
 4443            ; Lcd Routines
 4443            ;
 4443            ; Write a byte to the LCD Data Register
 4443            LCD2PP_Data:
 4443  1C024004        bset  PTT,LCD_RS     ; select lcd data buffer RS=1
 4447  164484          jsr   LCD_W_8        ; write byte
 444A  3D              rts
 444B            
 444B            ; Write a byte to the LCD Instruction Register (leaves LCD in Data mode)
 444B            LD2PP_Instruction:
 444B  1D024004          bclr   PTT,LCD_RS        ; select lcd command buffer
 444F  164484            jsr    LCD_W_8           ; wait
 4452  1C024004          bset   PTT,LCD_RS        ; select data buffer
 4456  3D                rts
 4457            
 4457            LCD2PP_4:			; Destroys a and b
 4457  1C024880           bset   PTS,#U21_EN     ; set U21_EN high so that latch becomes transparent
 445B  1644A8             jsr      DELAY1MS      ; delay     
 445E  F60258             ldab     PTP              ; Port P
 4461  C4F0               andb     #$f0             ; get only bits 4 - 7
 4463  840F               anda     #$0f             ; get data
 4465  1806               aba
 4467  7A0258             staa     PTP              ; save data 
 446A                    ; For LCD's write cycle, Enable must pulse high and then low (for specified time)
 446A  1D024008           bclr     PTT,LCD_EN       ; enable low
 446E  1644A8             jsr      DELAY1MS         ; delay for LCD
 4471  1C024008           bset     PTT,LCD_EN       ; latch data
 4475  1644A8             jsr      DELAY1MS         ; delay for LCD 
 4478  1D024008           bclr     PTT,LCD_EN           ; enable low
 447C  1644A8             jsr      DELAY1MS
 447F  1D024880           bclr  PTS,#U21_EN    ; set U21_EN low to isolate LCD from parallel control (outputs are latched)
 4483  3D                 rts
 4484            ;
 4484            ;
 4484            ; Lcd Write 8 bit Data , lower 4 bits first in acc A   (Destroys A)
 4484            LCD_W_8:					
 4484  36                 psha                     ; save a 
 4485  44                 lsra                     ; shift upper 4 bits to lower
 4486  44                 lsra
 4487  44                 lsra
 4488  44                 lsra
 4489  164457             jsr      LCD2PP_4        ; write upper 4 bits to lcd
 448C  32                 pula
 448D  164457             jsr      LCD2PP_4         ; write lower 4 bits to lcd
 4490  3D                 rts
 4491                                                    
 4491            
 4491            ;
 4491            ; Delay routines
 4491            ;
 4491            ;
 4491            ; Generate a 50 ms delay
 4491            DELAY50M:
 4491  34                  pshx
 4492  CEC34E              ldx  #49998      ; delay 50,000 usecs,
 4495  1644B1              jsr  DELML01     ; call usec delay
 4498  30                  pulx
 4499  3D                  rts
 449A            ;
 449A            ;
 449A            ; Generate a 20 ms delay
 449A            DELAY20M:
 449A  0703                bsr  DELAY10M
 449C  0701                bsr  DELAY10M 
 449E  3D                  rts
 449F            ;
 449F            ; Generate a 10 ms delay
 449F            DELAY10M:                            ; jsr=4cyles
 449F  34                  pshx             ; 2 cycles ,save x
 44A0  CE270E              ldx  #9998       ; 2 cycles,delay 9998 usec + 2 for this routine
 44A3  1644B1              jsr  DELML01     ; call usec delay, this delay offset in sub
 44A6  30                  pulx             ; 3 cycles restore x
 44A7  3D                  rts              ; 5 cycles
 44A8            ;
 44A8            ;
 44A8            ; Generate a 1 ms delay
 44A8            DELAY1MS:
 44A8                                       ; jsr=4cyles
 44A8  34                  pshx             ; 2 cycles ,save x
 44A9  CE03E6              ldx  #998       ; 2 cycles,delay 9998 usec + 2 for this routine
 44AC  1644B1              jsr  DELML01     ; call usec delay, this delay offset in sub
 44AF  30                  pulx             ; 3 cycles restore x
 44B0  3D                  rts              ; 5 cycles
 44B1            
 44B1            
 44B1            ;
 44B1            ; 8 cycles = 1 usec e = 8mhz
 44B1            DELML01:
 44B1  A7                  nop              ; 1 cycle
 44B2  A7                  nop              ; 1 cycle
 44B3  A7                  nop              ; 1 cycle
 44B4  A7                  nop              ; 1 cycle
 44B5  09                  dex              ; 1 cycle 
 44B6  26F9                bne   DELML01    ; 3 cycles
 44B8  3D                  rts              ; 5 cycles
