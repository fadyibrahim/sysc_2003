WARNING: EXTCODE CODE AREA DO NOT CONTAIN RELOCATED ADDRESSES.
THIS WILL BE REMEDIED IN A LATER RELEASE.
                        .module Assign52.c
                        .area memory(abs)
                        .org 0x3f8c
 3F8C            _interrupt_vectors::
 3F8C  F8CF              .word 63695
 3F8E  F8CF              .word 63695
 3F90  F8CF              .word 63695
 3F92  F8CF              .word 63695
 3F94  F8CF              .word 63695
 3F96  F8CF              .word 63695
 3F98  F8CF              .word 63695
 3F9A  F8CF              .word 63695
 3F9C  F8CF              .word 63695
 3F9E  F8CF              .word 63695
 3FA0  F8CF              .word 63695
 3FA2  F8CF              .word 63695
 3FA4  F8CF              .word 63695
 3FA6  F8CF              .word 63695
 3FA8  F8CF              .word 63695
 3FAA  F8CF              .word 63695
 3FAC  F8CF              .word 63695
 3FAE  F8CF              .word 63695
 3FB0  F8CF              .word 63695
 3FB2  F8CF              .word 63695
 3FB4  F8CF              .word 63695
 3FB6  F8CF              .word 63695
 3FB8  F8CF              .word 63695
 3FBA  F8CF              .word 63695
 3FBC  F8CF              .word 63695
 3FBE  F8CF              .word 63695
 3FC0  F8CF              .word 63695
 3FC2  F8CF              .word 63695
 3FC4  F8CF              .word 63695
 3FC6  F8CF              .word 63695
 3FC8  F8CF              .word 63695
 3FCA  F8CF              .word 63695
 3FCC  40B0              .word _printKeysPressed
 3FCE  F8CF              .word 63695
 3FD0  F8CF              .word 63695
 3FD2  F8CF              .word 63695
 3FD4  F8CF              .word 63695
 3FD6  F8CF              .word 63695
 3FD8  F8CF              .word 63695
 3FDA  4456              .word _pacA_isr
 3FDC  F8CF              .word 63695
 3FDE  F8CF              .word 63695
 3FE0  F8CF              .word 63695
 3FE2  F8CF              .word 63695
 3FE4  F8CF              .word 63695
 3FE6  F8CF              .word 63695
 3FE8  F8CF              .word 63695
 3FEA  F8CF              .word 63695
 3FEC  F8CF              .word 63695
 3FEE  F8CF              .word 63695
 3FF0  441C              .word _CollisionDetect
 3FF2  F8CF              .word 63695
 3FF4  F8C7              .word 63687
 3FF6  F8C3              .word 63683
 3FF8  F8CB              .word 63691
 3FFA  F805              .word 63493
 3FFC  F809              .word 63497
 3FFE  4000              .word __start
 4000                    .dbfile M:\Assign51/vectors_dps256_NoICE.c
 4000                    .dbsym e interrupt_vectors _interrupt_vectors A[116:58]pfV
                        .area data
--- 0000                   .dbfile M:\Assign51/vectors_dps256_NoICE.c
 1000            _changingSpeed::
 1000                    .blkb 2
                        .area idata
--- 0000 0009              .word 9
                        .area data
--- 0002                   .dbfile M:\Assign51/vectors_dps256_NoICE.c
--- 0002                   .dbfile M:\Assign51\Assign52.c
--- 0002                   .dbsym e changingSpeed _changingSpeed I
 1002            _changingTemp::
 1002                    .blkb 2
                        .area idata
--- 0002 0019              .word 25
                        .area data
--- 0004                   .dbfile M:\Assign51\Assign52.c
--- 0004                   .dbsym e changingTemp _changingTemp I
 1004            _counterInterrupt::
 1004                    .blkb 2
                        .area idata
--- 0004 0001              .word 1
                        .area data
--- 0006                   .dbfile M:\Assign51\Assign52.c
--- 0006                   .dbsym e counterInterrupt _counterInterrupt I
 1006            _optCount::
 1006                    .blkb 2
                        .area idata
--- 0006 0000              .word 0
                        .area data
--- 0008                   .dbfile M:\Assign51\Assign52.c
--- 0008                   .dbsym e optCount _optCount I
                        .area text
--- 0000                   .dbfile M:\Assign51\Assign52.c
--- 0000                   .dbfunc e main _main fV
--- 0000           ;          ?temp -> -2,x
 402A            _main::
 402A  34                pshx
 402B  B775              tfr s,x
 402D  1B9C              leas -4,sp
 402F                    .dbline -1
 402F                    .dbline 19
 402F            ; /*
 402F            ; Authors Gavez Smith 100857991, Fady Ibrahim 100876906
 402F            ; */
 402F            ; #include "hcs12dp256.h"
 402F            ; #include"stdio.h"
 402F            ; #include "vectors_dps256_NoICE.c"
 402F            ; 
 402F            ; void CollisionDetect(void);
 402F            ; void Inc_Dec_Speed(int speed, int temp );
 402F            ; void displaySpeed_Temp(int speed, int temp);
 402F            ; int changingSpeed=9;
 402F            ; int changingTemp=25;
 402F            ; int counterInterrupt=1;
 402F            ; int optCount = 0;
 402F            ; int duty, i;
 402F            ; #pragma interrupt_handler printKeysPressed()
 402F            ; #pragma interrupt_handler CollisionDetect()
 402F            ; #pragma interrupt_handler pacA_isr()
 402F            ; void main(){
 402F                    .dbline 22
 402F            ;        
 402F            ;        
 402F            ;        Lcd2PP_Init();
 402F  1644B0            jsr _Lcd2PP_Init
 4032                    .dbline 23
 4032            ;        displaySpeed_Temp(++changingSpeed, changingTemp);
 4032  1801801002        movw _changingTemp,0,sp
 4037  FC1000            ldd _changingSpeed
 403A  C30001            addd #1
 403D  6C1E              std -2,x
 403F  18051E1000        movw -2,x,_changingSpeed
 4044  EC1E              ldd -2,x
 4046  164286            jsr _displaySpeed_Temp
 4049                    .dbline 24
 4049            ;        DDRP |= 0x0F; // bitset PP0-3 as outputs (rows) 
 4049  1C025A0F          bset 0x25a,#15
 404D                    .dbline 25
 404D            ;        DDRH &= 0x0F; // bitclear PH4..7 as inputs (columns)
 404D  1D0262F0          bclr 0x262,#0xf0
 4051                    .dbline 26
 4051            ;        PTP = 0x0F; // Set scan row(s)
 4051  C60F              ldab #15
 4053  7B0258            stab 0x258
 4056                    .dbline 27
 4056            ;        PIFH = 0xFF; // Clear previous interrupt flags
 4056  C6FF              ldab #255
 4058  7B0267            stab 0x267
 405B                    .dbline 28
 405B            ;        PPSH = 0xF0; // Rising Edge
 405B  C6F0              ldab #240
 405D  7B0265            stab 0x265
 4060                    .dbline 29
 4060            ;        PERH = 0x00; // Disable pulldowns
 4060  790264            clr 0x264
 4063                    .dbline 30
 4063            ;        PIEH |= 0xF0; // Local enable on columns inputs
 4063  1C0266F0          bset 0x266,#240
 4067                    .dbline 34
 4067            ;        // enable the latch.
 4067            ;        //PTM |= 0x08;
 4067            ;        //
 4067            ;        duty = 20; 
 4067  CC0014            ldd #20
 406A  7C100A            std _duty
 406D                    .dbline 35
 406D            ;        PWMDTY7 = duty;
 406D  FC100A            ldd _duty
 4070  7B00C3            stab 0xc3
 4073                    .dbline 37
 4073            ;       
 4073            ;      PWMPOL = 0xFF; // Initial Polarity is high
 4073  C6FF              ldab #255
 4075  7B00A1            stab 0xa1
 4078                    .dbline 38
 4078            ;      PWMCLK &= 0x7F; //Select Clock B for channel 7
 4078  1D00A280          bclr 0xa2,#0x80
 407C                    .dbline 39
 407C            ;      PWMPRCLK = 0x70; //Prescale ClockB : busclock/128
 407C  C670              ldab #112
 407E  7B00A3            stab 0xa3
 4081                    .dbline 40
 4081            ;      PWMCAE &= 0x7F; //Channel 7 : left aligned
 4081  1D00A480          bclr 0xa4,#0x80
 4085                    .dbline 41
 4085            ;      PWMCTL &= 0xF3; //PWM in Wait and Freeze Modes
 4085  1D00A50C          bclr 0xa5,#0xc
 4089                    .dbline 42
 4089            ;      PWMPER7 = 100; //Set period for PWM7
 4089  C664              ldab #100
 408B  7B00BB            stab 0xbb
 408E                    .dbline 43
 408E            ;      PWME = 0x80; //Enable PWM Channel 7
 408E  C680              ldab #128
 4090  7B00A0            stab 0xa0
 4093                    .dbline 44
 4093            ;      DDRP |= 0x40; //For Motor Direction Control 
 4093  1C025A40          bset 0x25a,#64
 4097                    .dbline 45
 4097            ;      PAFLG |= 1; //Clear out the interrupt flag
 4097  1C006101          bset 0x61,#1
 409B                    .dbline 46
 409B            ;      PACTL = 0x51; //Enable PACA for Optical Sensor
 409B  C651              ldab #81
 409D  7B0060            stab 0x60
 40A0                    .dbline 48
 40A0            ;        
 40A0            ;        CRGINT |= 0x80; //Enables timer interrupts
 40A0  1C003880          bset 0x38,#128
 40A4                    .dbline 49
 40A4            ;        RTICTL |= 0x72; //Sets the prescale factor
 40A4  1C003B72          bset 0x3b,#114
 40A8                    .dbline 50
 40A8            ;        asm("cli");
 40A8  10EF                      cli
 40AA            
 40AA            L4:
 40AA                    .dbline 52
 40AA                    .dbline 52
 40AA            L5:
 40AA                    .dbline 52
 40AA  20FE              bra L4
 40AC            X0:
 40AC                    .dbline 52
 40AC            ;        
 40AC            ;        while(1){};
 40AC                    .dbline -2
 40AC                    .dbline 54
 40AC            ;        
 40AC            ; }
 40AC            L3:
 40AC  B757              tfr x,s
 40AE  30                pulx
 40AF                    .dbline 0 ; func end
 40AF  3D                rts
 40B0                    .dbend
 40B0                    .dbfunc e printKeysPressed _printKeysPressed fV
 40B0            ;          ?temp -> -8,x
 40B0            ;          ?temp -> -8,x
 40B0            ;          ?temp -> -6,x
 40B0            ;          count -> -4,x
 40B0            ;              i -> -2,x
 40B0            _printKeysPressed::
 40B0  34                pshx
 40B1  B775              tfr s,x
 40B3  1B96              leas -10,sp
 40B5                    .dbline -1
 40B5                    .dbline 60
 40B5            ; 
 40B5            ; /*
 40B5            ; printKeysPressed gets the character pressed on the keyboard by through the keyboard ISR and then it prints out the value on the terminal.
 40B5            ; 
 40B5            ; */
 40B5            ; void printKeysPressed(){   
 40B5                    .dbline 62
 40B5            ;       int i, count;
 40B5            ;       asm("sei");
 40B5  1410                      sei
 40B7            
 40B7                    .dbline 64
 40B7            ; 
 40B7            ;       for (count=1; count<=0x08; count<<=1)
 40B7  CC0001            ldd #1
 40BA  6C1C              std -4,x
 40BC            L8:
 40BC                    .dbline 65
 40BC            ;       {
 40BC                    .dbline 66
 40BC            ;               PTH&=0x0F;
 40BC  1D0260F0          bclr 0x260,#0xf0
 40C0                    .dbline 67
 40C0            ;               PTP = (PTP&0xF0) | count;
 40C0                    ; vol
 40C0  F60258            ldab 0x258
 40C3  87                clra
 40C4  8400              anda #0
 40C6  C4F0              andb #240
 40C8  AA1C              ora -4,x
 40CA  EA1D              orb -3,x
 40CC  7B0258            stab 0x258
 40CF                    .dbline 69
 40CF  CC0000            ldd #0
 40D2  6C1E              std -2,x
 40D4            L12:
 40D4                    .dbline 69
 40D4            L13:
 40D4                    .dbline 69
 40D4            ;               
 40D4            ;               for (i=0;i<1000;i++);
 40D4  EC1E              ldd -2,x
 40D6  C30001            addd #1
 40D9  6C1E              std -2,x
 40DB                    .dbline 69
 40DB  EC1E              ldd -2,x
 40DD  8C03E8            cpd #1000
 40E0  2DF2              blt L12
 40E2                    .dbline 70
 40E2            ;               switch(PTH & 0xF0){
 40E2                    ; vol
 40E2  F60260            ldab 0x260
 40E5  87                clra
 40E6  8400              anda #0
 40E8  C4F0              andb #240
 40EA  6C1A              std -6,x
 40EC  8C0020            cpd #32
 40EF  18270099          lbeq L32
 40F3  EC1A              ldd -6,x
 40F5  8C0020            cpd #32
 40F8  2E0B              bgt L74
 40FA            L73:
 40FA  EC1A              ldd -6,x
 40FC  8C0010            cpd #16
 40FF  2723              beq L19
 4101  18200162          lbra L16
 4105            L74:
 4105  EC1A              ldd -6,x
 4107  8C0040            cpd #64
 410A  182700C4          lbeq L45
 410E  EC1A              ldd -6,x
 4110  8C0040            cpd #64
 4113  182D0150          lblt L16
 4117            L75:
 4117  EC1A              ldd -6,x
 4119  8C0080            cpd #128
 411C  182700EA          lbeq L58
 4120  18200143          lbra L16
 4124            X1:
 4124                    .dbline 70
 4124            L19:
 4124                    .dbline 72
 4124            ;                    case 0x10:
 4124            ;                                 if(PTP & 0x01) printf("1");
 4124  1F0258010A        brclr 0x258,#1,L20
 4129                    .dbline 72
 4129  CC4496            ldd #L22
 412C  1649D0            jsr _printf
 412F  18200134          lbra L17
 4133            L20:
 4133                    .dbline 73
 4133            ;                                 else if(PTP & 0x02) printf("4");
 4133  1F0258020A        brclr 0x258,#2,L23
 4138                    .dbline 73
 4138  CC4494            ldd #L25
 413B  1649D0            jsr _printf
 413E  18200125          lbra L17
 4142            L23:
 4142                    .dbline 74
 4142            ;                                 else if(PTP & 0x04) printf("7");
 4142  1F0258040A        brclr 0x258,#4,L26
 4147                    .dbline 74
 4147  CC4492            ldd #L28
 414A  1649D0            jsr _printf
 414D  18200116          lbra L17
 4151            L26:
 4151                    .dbline 75
 4151            ;                                 else if(PTP & 0x08){ 
 4151  1F02580802        brclr 0x258,#8,X2
 4156  2004              bra X3
 4158  1820010B  X2:     lbra L17
 415C            X3:
 415C                    .dbline 75
 415C                    .dbline 77
 415C            ;                                      
 415C            ;                                         duty++; 
 415C  FC100A            ldd _duty
 415F  C30001            addd #1
 4162  7C100A            std _duty
 4165                    .dbline 78
 4165            ;                                         PWMDTY7 = duty;
 4165  FC100A            ldd _duty
 4168  7B00C3            stab 0xc3
 416B                    .dbline 80
 416B            ;                                        
 416B            ;                                         printf("E");
 416B  CC4490            ldd #L31
 416E  1649D0            jsr _printf
 4171                    .dbline 82
 4171            ;                                        
 4171            ;                                         displaySpeed_Temp(++changingSpeed, changingTemp);
 4171  1801801002        movw _changingTemp,0,sp
 4176  FC1000            ldd _changingSpeed
 4179  C30001            addd #1
 417C  6C18              std -8,x
 417E  1805181000        movw -8,x,_changingSpeed
 4183  EC18              ldd -8,x
 4185  164286            jsr _displaySpeed_Temp
 4188                    .dbline 84
 4188            ;                             
 4188            ;                               }  
 4188                    .dbline 85
 4188            ;                        break;
 4188  182000DB          lbra L17
 418C            L32:
 418C                    .dbline 88
 418C            ; 
 418C            ;                    case 0x20:
 418C            ;                             if(PTP & 0x01) printf("2");
 418C  1F0258010A        brclr 0x258,#1,L33
 4191                    .dbline 88
 4191  CC448E            ldd #L35
 4194  1649D0            jsr _printf
 4197  182000CC          lbra L17
 419B            L33:
 419B                    .dbline 89
 419B            ;                                 else if(PTP & 0x02) printf("5");
 419B  1F0258020A        brclr 0x258,#2,L36
 41A0                    .dbline 89
 41A0  CC448C            ldd #L38
 41A3  1649D0            jsr _printf
 41A6  182000BD          lbra L17
 41AA            L36:
 41AA                    .dbline 90
 41AA            ;                                 else if(PTP & 0x04) printf("8");
 41AA  1F0258040A        brclr 0x258,#4,L39
 41AF                    .dbline 90
 41AF  CC448A            ldd #L41
 41B2  1649D0            jsr _printf
 41B5  182000AE          lbra L17
 41B9            L39:
 41B9                    .dbline 91
 41B9            ;                                 else if(PTP & 0x08){
 41B9  1F02580802        brclr 0x258,#8,X4
 41BE  2004              bra X5
 41C0  182000A3  X4:     lbra L17
 41C4            X5:
 41C4                    .dbline 91
 41C4                    .dbline 92
 41C4            ;                                     printf("0");
 41C4  CC4488            ldd #L44
 41C7  1649D0            jsr _printf
 41CA                    .dbline 94
 41CA            ;                                         
 41CA            ;                                         PWMDTY7=0;
 41CA  7900C3            clr 0xc3
 41CD                    .dbline 95
 41CD            ;                                         asm("swi");
 41CD  3F                        swi
 41CE            
 41CE                    .dbline 96
 41CE            ;                                 }
 41CE                    .dbline 97
 41CE            ;                        break;
 41CE  18200095          lbra L17
 41D2            L45:
 41D2                    .dbline 100
 41D2            ;                    
 41D2            ;                    case 0x40:
 41D2            ;                             if(PTP & 0x01) printf("3");
 41D2  1F0258010A        brclr 0x258,#1,L46
 41D7                    .dbline 100
 41D7  CC4486            ldd #L48
 41DA  1649D0            jsr _printf
 41DD  18200086          lbra L17
 41E1            L46:
 41E1                    .dbline 101
 41E1            ;                                 else if(PTP & 0x02) printf("6");
 41E1  1F0258020A        brclr 0x258,#2,L49
 41E6                    .dbline 101
 41E6  CC4484            ldd #L51
 41E9  1649D0            jsr _printf
 41EC  18200077          lbra L17
 41F0            L49:
 41F0                    .dbline 102
 41F0            ;                                 else if(PTP & 0x04) printf("9");
 41F0  1F02580408        brclr 0x258,#4,L52
 41F5                    .dbline 102
 41F5  CC4482            ldd #L54
 41F8  1649D0            jsr _printf
 41FB  206A              bra L17
 41FD            L52:
 41FD                    .dbline 103
 41FD            ;                                 else if(PTP & 0x08) printf("F");
 41FD  1F02580865        brclr 0x258,#8,L17
 4202                    .dbline 103
 4202  CC4480            ldd #L57
 4205  1649D0            jsr _printf
 4208                    .dbline 104
 4208            ;                    break;
 4208  205D              bra L17
 420A            L58:
 420A                    .dbline 107
 420A            ;                        
 420A            ;                    case 0x80:
 420A            ;                             if(PTP & 0x01) printf("A");
 420A  1F02580108        brclr 0x258,#1,L59
 420F                    .dbline 107
 420F  CC447E            ldd #L61
 4212  1649D0            jsr _printf
 4215  2050              bra L17
 4217            L59:
 4217                    .dbline 108
 4217            ;                                 else if(PTP & 0x02) printf("B");
 4217  1F02580208        brclr 0x258,#2,L62
 421C                    .dbline 108
 421C  CC447C            ldd #L64
 421F  1649D0            jsr _printf
 4222  2043              bra L17
 4224            L62:
 4224                    .dbline 109
 4224            ;                                 else if(PTP & 0x04) printf("C");
 4224  1F02580408        brclr 0x258,#4,L65
 4229                    .dbline 109
 4229  CC447A            ldd #L67
 422C  1649D0            jsr _printf
 422F  2036              bra L17
 4231            L65:
 4231                    .dbline 110
 4231            ;                                 else if(PTP & 0x08){
 4231  1F02580831        brclr 0x258,#8,L17
 4236                    .dbline 110
 4236                    .dbline 111
 4236            ;                                      printf("D");
 4236  CC4478            ldd #L70
 4239  1649D0            jsr _printf
 423C                    .dbline 112
 423C            ;                                          if (optCount>0) {
 423C  FC1006            ldd _optCount
 423F  2F0F              ble L71
 4241                    .dbline 112
 4241                    .dbline 113
 4241            ;                                         duty--; 
 4241  FC100A            ldd _duty
 4244  830001            subd #1
 4247  7C100A            std _duty
 424A                    .dbline 114
 424A            ;                                         PWMDTY7 = duty;
 424A  FC100A            ldd _duty
 424D  7B00C3            stab 0xc3
 4250                    .dbline 115
 4250            ;                                         }
 4250            L71:
 4250                    .dbline 116
 4250            ;                                          displaySpeed_Temp(--changingSpeed, changingTemp);
 4250  1801801002        movw _changingTemp,0,sp
 4255  FC1000            ldd _changingSpeed
 4258  830001            subd #1
 425B  6C18              std -8,x
 425D  1805181000        movw -8,x,_changingSpeed
 4262  EC18              ldd -8,x
 4264  164286            jsr _displaySpeed_Temp
 4267                    .dbline 117
 4267            ;                                 }
 4267                    .dbline 118
 4267            ;                    break; 
 4267            L16:
 4267            L17:
 4267                    .dbline 120
 4267            L9:
 4267                    .dbline 64
 4267  EC1C              ldd -4,x
 4269  59                lsld
 426A  6C1C              std -4,x
 426C                    .dbline 64
 426C  EC1C              ldd -4,x
 426E  8C0008            cpd #8
 4271  182FFE47          lble L8
 4275                    .dbline 123
 4275            ;               }
 4275            ;        }
 4275            ;               
 4275            ;                                               
 4275            ;       PTP = 0x0F;
 4275  C60F              ldab #15
 4277  7B0258            stab 0x258
 427A                    .dbline 124
 427A            ;       PIFH = PIFH; // Acknowledge (all) interrupts
 427A                    ; vol
 427A  F60267            ldab 0x267
 427D  7B0267            stab 0x267
 4280                    .dbline 125
 4280            ;     asm("cli");
 4280  10EF                      cli
 4282            
 4282                    .dbline -2
 4282                    .dbline 126
 4282            ; }
 4282            L7:
 4282  B757              tfr x,s
 4284  30                pulx
 4285                    .dbline 0 ; func end
 4285  0B                rti
 4286                    .dbsym l count -4 I
 4286                    .dbsym l i -2 I
 4286                    .dbend
 4286                    .dbfunc e displaySpeed_Temp _displaySpeed_Temp fV
 4286            ; arraycharstemp -> -22,x
 4286            ;     arraychars -> -18,x
 4286            ;    holderSpeed -> -10,x
 4286            ;     holderTemp -> -8,x
 4286            ;         number -> -6,x
 4286            ;      remainder -> -4,x
 4286            ;          index -> -2,x
 4286            ;           temp -> 6,x
 4286            ;          speed -> 2,x
 4286            _displaySpeed_Temp::
 4286  3B                pshd
 4287  34                pshx
 4288  B775              tfr s,x
 428A  1BF1E8            leas -24,sp
 428D                    .dbline -1
 428D                    .dbline 131
 428D            ; /*
 428D            ; DisplaySpeed_Temp displays the speed and temp passed in to the lcd display.
 428D            ; */
 428D            ; 
 428D            ; void displaySpeed_Temp(int speed, int temp){  
 428D                    .dbline 133
 428D            ;        int number;
 428D            ;        int index=3;
 428D  CC0003            ldd #3
 4290  6C1E              std -2,x
 4292                    .dbline 136
 4292            ;        int arraychars[4];
 4292            ;        int arraycharstemp[2];
 4292            ;        int remainder=0;
 4292  CC0000            ldd #0
 4295  6C1C              std -4,x
 4297                    .dbline 137
 4297            ;        int holderSpeed=speed;
 4297  ED02              ldy 2,x
 4299  6D16              sty -10,x
 429B                    .dbline 138
 429B            ;        int holderTemp=temp;
 429B  18020618          movw 6,x,-8,x
 429F                    .dbline 141
 429F            ;      
 429F            ;        
 429F            ;        LCD_instruction(1);
 429F  CC0001            ldd #1
 42A2  164498            jsr _LCD_instruction
 42A5                    .dbline 142
 42A5            ;        LCD_display('S');
 42A5  CC0053            ldd #83
 42A8  1644A4            jsr _LCD_display
 42AB                    .dbline 143
 42AB            ;        LCD_display('P');
 42AB  CC0050            ldd #80
 42AE  1644A4            jsr _LCD_display
 42B1                    .dbline 144
 42B1            ;        LCD_display('E');
 42B1  CC0045            ldd #69
 42B4  1644A4            jsr _LCD_display
 42B7                    .dbline 145
 42B7            ;        LCD_display('E');
 42B7  CC0045            ldd #69
 42BA  1644A4            jsr _LCD_display
 42BD                    .dbline 146
 42BD            ;        LCD_display('D');
 42BD  CC0044            ldd #68
 42C0  1644A4            jsr _LCD_display
 42C3  205A              bra L78
 42C5            L77:
 42C5                    .dbline 148
 42C5            ;        while (index>=0)
 42C5            ;        {
 42C5                    .dbline 149
 42C5            ;                  if(holderSpeed!=0)
 42C5  EC16              ldd -10,x
 42C7  273C              beq L80
 42C9                    .dbline 150
 42C9            ;        {
 42C9                    .dbline 152
 42C9            ;      //takes the decimal value passed in and turns it into the decimal value representation in ASCII
 42C9            ;        remainder=holderSpeed%10;
 42C9  EC16              ldd -10,x
 42CB  CD000A            ldy #10
 42CE  B7D6              exg x,y
 42D0  1815              idivs
 42D2  B7D6              exg x,y
 42D4  6C1C              std -4,x
 42D6                    .dbline 153
 42D6            ;        holderSpeed=holderSpeed/10;
 42D6  EC16              ldd -10,x
 42D8  CD000A            ldy #10
 42DB  B7D6              exg x,y
 42DD  1815              idivs
 42DF  B7D6              exg x,y
 42E1  6D16              sty -10,x
 42E3                    .dbline 154
 42E3            ;        remainder=remainder+0x30;
 42E3  EC1C              ldd -4,x
 42E5  C30030            addd #48
 42E8  6C1C              std -4,x
 42EA                    .dbline 155
 42EA            ;        arraychars[index]=remainder;
 42EA  19E1EE            leay -18,x
 42ED  6DE1E8            sty -24,x
 42F0  EC1E              ldd -2,x
 42F2  59                lsld
 42F3  E3E1E8            addd -24,x
 42F6  B7C6              xgdy
 42F8  EC1C              ldd -4,x
 42FA  6C40              std 0,y
 42FC                    .dbline 156
 42FC            ;        index=index-1;
 42FC  EC1E              ldd -2,x
 42FE  830001            subd #1
 4301  6C1E              std -2,x
 4303                    .dbline 157
 4303            ;        }       
 4303  201A              bra L81
 4305            L80:
 4305                    .dbline 159
 4305            ;        else
 4305            ;        {
 4305                    .dbline 160
 4305            ;                       arraychars[index]=0x30;
 4305  19E1EE            leay -18,x
 4308  6DE1E8            sty -24,x
 430B  EC1E              ldd -2,x
 430D  59                lsld
 430E  E3E1E8            addd -24,x
 4311  B7C6              xgdy
 4313  CC0030            ldd #48
 4316  6C40              std 0,y
 4318                    .dbline 161
 4318            ;                       index=index-1;
 4318  EC1E              ldd -2,x
 431A  830001            subd #1
 431D  6C1E              std -2,x
 431F                    .dbline 162
 431F            ;        }
 431F            L81:
 431F                    .dbline 163
 431F            L78:
 431F                    .dbline 147
 431F  EC1E              ldd -2,x
 4321  2CA2              bge L77
 4323                    .dbline 164
 4323            ;        }
 4323            ;        LCD_display(' ');
 4323  CC0020            ldd #32
 4326  1644A4            jsr _LCD_display
 4329                    .dbline 165
 4329            ;        for(index=0;index<4;index++)
 4329  CC0000            ldd #0
 432C  6C1E              std -2,x
 432E            L82:
 432E                    .dbline 166
 432E                    .dbline 167
 432E  19E1EE            leay -18,x
 4331  6DE1E8            sty -24,x
 4334  EC1E              ldd -2,x
 4336  59                lsld
 4337  E3E1E8            addd -24,x
 433A  B7C6              xgdy
 433C  ED40              ldy 0,y
 433E  6D1A              sty -6,x
 4340                    .dbline 168
 4340  EC1A              ldd -6,x
 4342  1644A4            jsr _LCD_display
 4345                    .dbline 169
 4345            L83:
 4345                    .dbline 165
 4345  EC1E              ldd -2,x
 4347  C30001            addd #1
 434A  6C1E              std -2,x
 434C                    .dbline 165
 434C  EC1E              ldd -2,x
 434E  8C0004            cpd #4
 4351  2DDB              blt L82
 4353                    .dbline 171
 4353            ;        {
 4353            ;               number=arraychars[index];
 4353            ;               LCD_display(number);
 4353            ;        }
 4353            ;        
 4353            ;        index=1;
 4353  CC0001            ldd #1
 4356  6C1E              std -2,x
 4358                    .dbline 173
 4358            ;        //goes to the next line.
 4358            ;        LCD_instruction(0xC0); 
 4358  CC00C0            ldd #192
 435B  164498            jsr _LCD_instruction
 435E                    .dbline 174
 435E            ;        LCD_display('T');
 435E  CC0054            ldd #84
 4361  1644A4            jsr _LCD_display
 4364                    .dbline 175
 4364            ;        LCD_display('E');
 4364  CC0045            ldd #69
 4367  1644A4            jsr _LCD_display
 436A                    .dbline 176
 436A            ;        LCD_display('M');
 436A  CC004D            ldd #77
 436D  1644A4            jsr _LCD_display
 4370                    .dbline 177
 4370            ;        LCD_display('P');
 4370  CC0050            ldd #80
 4373  1644A4            jsr _LCD_display
 4376                    .dbline 178
 4376            ;        LCD_display('E');
 4376  CC0045            ldd #69
 4379  1644A4            jsr _LCD_display
 437C                    .dbline 179
 437C            ;        LCD_display('R');
 437C  CC0052            ldd #82
 437F  1644A4            jsr _LCD_display
 4382                    .dbline 180
 4382            ;        LCD_display('A');
 4382  CC0041            ldd #65
 4385  1644A4            jsr _LCD_display
 4388                    .dbline 181
 4388            ;        LCD_display('T');
 4388  CC0054            ldd #84
 438B  1644A4            jsr _LCD_display
 438E                    .dbline 182
 438E            ;        LCD_display('U');
 438E  CC0055            ldd #85
 4391  1644A4            jsr _LCD_display
 4394                    .dbline 183
 4394            ;        LCD_display('R');
 4394  CC0052            ldd #82
 4397  1644A4            jsr _LCD_display
 439A                    .dbline 184
 439A            ;        LCD_display('E');
 439A  CC0045            ldd #69
 439D  1644A4            jsr _LCD_display
 43A0  203A              bra L87
 43A2            L86:
 43A2                    .dbline 187
 43A2                    .dbline 188
 43A2  EC18              ldd -8,x
 43A4  CD000A            ldy #10
 43A7  B7D6              exg x,y
 43A9  1815              idivs
 43AB  B7D6              exg x,y
 43AD  6C1C              std -4,x
 43AF                    .dbline 189
 43AF  EC18              ldd -8,x
 43B1  CD000A            ldy #10
 43B4  B7D6              exg x,y
 43B6  1815              idivs
 43B8  B7D6              exg x,y
 43BA  6D18              sty -8,x
 43BC                    .dbline 190
 43BC  EC1C              ldd -4,x
 43BE  C30030            addd #48
 43C1  6C1C              std -4,x
 43C3                    .dbline 191
 43C3  19E1EA            leay -22,x
 43C6  6DE1E8            sty -24,x
 43C9  EC1E              ldd -2,x
 43CB  59                lsld
 43CC  E3E1E8            addd -24,x
 43CF  B7C6              xgdy
 43D1  EC1C              ldd -4,x
 43D3  6C40              std 0,y
 43D5                    .dbline 192
 43D5  EC1E              ldd -2,x
 43D7  830001            subd #1
 43DA  6C1E              std -2,x
 43DC                    .dbline 193
 43DC            L87:
 43DC                    .dbline 186
 43DC            ; 
 43DC            ;        while (index>=0)
 43DC  EC1E              ldd -2,x
 43DE  2CC2              bge L86
 43E0                    .dbline 194
 43E0            ;        {
 43E0            ;                  remainder=holderTemp%10;
 43E0            ;          holderTemp=holderTemp/10;
 43E0            ;                  remainder=remainder+0x30;
 43E0            ;                  arraycharstemp[index]=remainder;
 43E0            ;                  index=index-1;
 43E0            ;        } 
 43E0            ;        LCD_display(' ');
 43E0  CC0020            ldd #32
 43E3  1644A4            jsr _LCD_display
 43E6                    .dbline 195
 43E6            ;        for(index=0;index<2;index++)
 43E6  CC0000            ldd #0
 43E9  6C1E              std -2,x
 43EB            L89:
 43EB                    .dbline 196
 43EB                    .dbline 197
 43EB  19E1EA            leay -22,x
 43EE  6DE1E8            sty -24,x
 43F1  EC1E              ldd -2,x
 43F3  59                lsld
 43F4  E3E1E8            addd -24,x
 43F7  B7C6              xgdy
 43F9  ED40              ldy 0,y
 43FB  6D1A              sty -6,x
 43FD                    .dbline 199
 43FD  EC1A              ldd -6,x
 43FF  1644A4            jsr _LCD_display
 4402                    .dbline 200
 4402            L90:
 4402                    .dbline 195
 4402  EC1E              ldd -2,x
 4404  C30001            addd #1
 4407  6C1E              std -2,x
 4409                    .dbline 195
 4409  EC1E              ldd -2,x
 440B  8C0002            cpd #2
 440E  2DDB              blt L89
 4410                    .dbline 202
 4410            ;        {
 4410            ;               number=arraycharstemp[index];
 4410            ; 
 4410            ;               LCD_display(number);
 4410            ;        }
 4410            ;        
 4410            ;        LCD_display('C');
 4410  CC0043            ldd #67
 4413  1644A4            jsr _LCD_display
 4416                    .dbline -2
 4416                    .dbline 203
 4416            ; }
 4416            L76:
 4416  B757              tfr x,s
 4418  30                pulx
 4419  1B82              leas 2,sp
 441B                    .dbline 0 ; func end
 441B  3D                rts
 441C                    .dbsym l arraycharstemp -22 A[4:2]I
 441C                    .dbsym l arraychars -18 A[8:4]I
 441C                    .dbsym l holderSpeed -10 I
 441C                    .dbsym l holderTemp -8 I
 441C                    .dbsym l number -6 I
 441C                    .dbsym l remainder -4 I
 441C                    .dbsym l index -2 I
 441C                    .dbsym l temp 6 I
 441C                    .dbsym l speed 2 I
 441C                    .dbend
 441C                    .dbfunc e CollisionDetect _CollisionDetect fV
 441C            _CollisionDetect::
 441C  34                pshx
 441D  B775              tfr s,x
 441F  1B9E              leas -2,sp
 4421                    .dbline -1
 4421                    .dbline 210
 4421            ; 
 4421            ; /*
 4421            ; This function is the Real-Time ISR and interruts the program when the user presses 5 on the keyboard. It executes the
 4421            ; interrupt turns off the dc motor waits 3-4 second and turns the steppor motor then afterwards it turns on the dc motor again.
 4421            ; */
 4421            ;  void CollisionDetect(void)
 4421            ; {
 4421                    .dbline 211
 4421            ;        asm("sei");
 4421  1410                      sei
 4423            
 4423                    .dbline 213
 4423            ; 
 4423            ;      counterInterrupt++;
 4423  FC1004            ldd _counterInterrupt
 4426  C30001            addd #1
 4429  7C1004            std _counterInterrupt
 442C                    .dbline 215
 442C            ;        //printf("counterInterrupt = %d\n", counterInterrupt);
 442C            ;        if (counterInterrupt==4) {
 442C  FC1004            ldd _counterInterrupt
 442F  8C0004            cpd #4
 4432  2617              bne L94
 4434                    .dbline 215
 4434                    .dbline 216
 4434            ;             printf(" the RPS is \t%d",optCount);
 4434  1801801006        movw _optCount,0,sp
 4439  CC4468            ldd #L96
 443C  1649D0            jsr _printf
 443F                    .dbline 217
 443F            ;                 counterInterrupt=0;
 443F  CC0000            ldd #0
 4442  7C1004            std _counterInterrupt
 4445                    .dbline 218
 4445            ;                 optCount =0;
 4445  CC0000            ldd #0
 4448  7C1006            std _optCount
 444B                    .dbline 219
 444B            ;        }
 444B            L94:
 444B                    .dbline 221
 444B            ;        
 444B            ;        CRGFLG = 0x80; //clear the RTI flag
 444B  C680              ldab #128
 444D  7B0037            stab 0x37
 4450                    .dbline 222
 4450            ;        asm("cli");
 4450  10EF                      cli
 4452            
 4452                    .dbline -2
 4452                    .dbline 223
 4452            ; }
 4452            L93:
 4452  B757              tfr x,s
 4454  30                pulx
 4455                    .dbline 0 ; func end
 4455  0B                rti
 4456                    .dbend
 4456                    .dbfunc e pacA_isr _pacA_isr fV
 4456            _pacA_isr::
 4456                    .dbline -1
 4456                    .dbline 225
 4456            ; 
 4456            ; void pacA_isr(void) {
 4456                    .dbline 227
 4456            ;       //printf("MOTOR WORKS");
 4456            ;       INTR_OFF();
 4456  1410                      sei
 4458            
 4458                    .dbline 228
 4458            ;     optCount++;
 4458  FC1006            ldd _optCount
 445B  C30001            addd #1
 445E  7C1006            std _optCount
 4461                    .dbline 229
 4461            ;     PAFLG |= 1;
 4461  1C006101          bset 0x61,#1
 4465                    .dbline 230
 4465            ;     INTR_ON();
 4465  10EF                      cli
 4467            
 4467                    .dbline -2
 4467                    .dbline 231
 4467            ; }
 4467            L97:
 4467                    .dbline 0 ; func end
 4467  0B                rti
 4468                    .dbend
                        .area bss
--- 0000                   .dbfile M:\Assign51\Assign52.c
 1008            _i::
 1008                    .blkb 2
 100A                    .dbsym e i _i I
 100A            _duty::
 100A                    .blkb 2
 100C                    .dbsym e duty _duty I
                        .area text
--- 043E                   .dbfile M:\Assign51\Assign52.c
--- 043E           L96:
--- 043E 20746865205250532069732009256400  .byte 32,'t,'h,'e,32,'R,'P,'S,32,'i,'s,32,9,37,'d,0
--- 044E           L70:
--- 044E 4400              .byte 'D,0
--- 0450           L67:
--- 0450 4300              .byte 'C,0
--- 0452           L64:
--- 0452 4200              .byte 'B,0
--- 0454           L61:
--- 0454 4100              .byte 'A,0
--- 0456           L57:
--- 0456 4600              .byte 'F,0
--- 0458           L54:
--- 0458 3900              .byte 57,0
--- 045A           L51:
--- 045A 3600              .byte 54,0
--- 045C           L48:
--- 045C 3300              .byte 51,0
--- 045E           L44:
--- 045E 3000              .byte 48,0
--- 0460           L41:
--- 0460 3800              .byte 56,0
--- 0462           L38:
--- 0462 3500              .byte 53,0
--- 0464           L35:
--- 0464 3200              .byte 50,0
--- 0466           L31:
--- 0466 4500              .byte 'E,0
--- 0468           L28:
--- 0468 3700              .byte 55,0
--- 046A           L25:
--- 046A 3400              .byte 52,0
--- 046C           L22:
--- 046C 3100              .byte 49,0
 0000            REGBS = $0000 ; DP256 register bank base address
 0000            PORTA = REGBS+0 ;port A = Address lines A8 A15
 0001            PORTB = REGBS+1 ;port B = Address lines A0 A7
 0002            DDRA = REGBS+2 ;port A direction register
 0003            DDRB = REGBS+3 ;port A direction register
 0008            PORTE = REGBS+8 ;port E = mode,IRQandcontrolsignals
 0009            DDRE = REGBS+9 ;port E direction register
 000A            PEAR = REGBS+$A ;port E assignments
 000B            MODE = REGBS+$B ;Mode register
 000C            PUCR = REGBS+$C ;port pull-up control register
 000D            RDRIV = REGBS+$D ;port reduced drive control register
 000E            EBICTL = REGBS+$E ;E stretch control
--- 0000           
 0010            INITRM = REGBS+$10 ;Ram location register
 0011            INITRG = REGBS+$11 ;Register location register
 0012            INITEE = REGBS+$12 ;EEprom location register
 0013            MISC = REGBS+$13 ;MiscellaneoMapping control
 0014            MTST0 = REGBS+$14 ; RESERVED
 0015            ITCR = REGBS+$15 ;Interrupt test control register
 0016            ITEST = REGBS+$16 ;Interrupt test register
 0017            MTST1 = REGBS+$17 ; Reserved
--- 0000           
 001A            PARTIDH = REGBS+$1A ;Part ID high
 001B            PARTIDL = REGBS+$1B ;Part ID low
 001C            MEMSIZ0 = REGBS+$1C ;memory size
 001D            MEMSIZ1 = REGBS+$1D ;memory size
 001E            INTCR = REGBS+$1E ;interrupt control register
 001F            HPRIO = REGBS+$1F ;high priority reg
--- 0000           
 0028            BKPCT0 = REGBS+$28 ;Break control register
 0029            BKPCT1 = REGBS+$29 ;Break control register
 002A            BKP0X = REGBS+$2A ; Break 0 index register
 002B            BKP0H = REGBS+$2B ; Break 0 pointer high
 002C            BRP0L = REGBS+$2C ; Break 0 pointer low
 002D            BKP1X = REGBS+$2D ; Break 1 index register
 002E            BKP1H = REGBS+$2E ; Break 1 pointer high
 002F            BRP1L = REGBS+$2F ; Break 1 pointer low
 0030            PPAGE = REGBS+$30 ;Program Page register
--- 0000           
 0032            PORTK = REGBS+$32 ;Port K data
 0033            DDRK = REGBS+$33 ;Port K direction
 0034            SYNR = REGBS+$34 ; Synthesizer / multiplier register
 0035            REFDV = REGBS+$35 ; Reference divider register
 0036            CTFLG = REGBS+$36 ; RESERVED
 0037            CRGFLG = REGBS+$37 ; PLL flags register
 0038            CRGINT = REGBS+$38 ; PLL interrupt register
 0039            CLKSEL = REGBS+$39 ; Clock select register
 003A            PLLCTL = REGBS+$3A ; PLL control register
 003B            RTICTL = REGBS+$3B ;Real time interrupt control
 003C            COPCTL = REGBS+$3C ;Watchdog control
 003D            FORBYP = REGBS+$3D ;
 003E            CTCTL = REGBS+$3E ;
 003F            ARMCOP = REGBS+$3F ;COP reset register
--- 0000           
 0040            TIOS = REGBS+$40 ;timer input/output select
 0041            CFORC = REGBS+$41 ;timer compare force
 0042            OC7M = REGBS+$42 ;timer output compare 7 mask
 0043            OC7D = REGBS+$43 ;timer output compare 7 data
 0044            TCNT = REGBS+$44 ;timer counter register hi
 0045            *TCNT = REGBS+$45 ;timer counter register lo
 0046            TSCR = REGBS+$46 ;timer system control register
 0047            TTOV = REGBS+$47 ;reserved
 0048            TCTL1 = REGBS+$48 ;timer control register 1
 0049            TCTL2 = REGBS+$49 ;timer control register 2
 004A            TCTL3 = REGBS+$4A ;timer control register 3
 004B            TCTL4 = REGBS+$4B ;timer control register 4
 004C            TMSK1 = REGBS+$4C ;timer interrupt mask 1
 004D            TMSK2 = REGBS+$4D ;timer interrupt mask 2
 004E            TFLG1 = REGBS+$4E ;timer flags 1
 004F            TFLG2 = REGBS+$4F ;timer flags 2
 0050            TC0 = REGBS+$50 ;timer capture/comparregister 0
 0051            *TC0 = REGBS+$51 ;
 0052            TC1 = REGBS+$52 ;timer capture/comparregister 1
 0053            *TC1 = REGBS+$53 ;
 0054            TC2 = REGBS+$54 ;timer capture/comparregister 2
 0055            *TC2 = REGBS+$55 ;
 0056            TC3 = REGBS+$56 ;timer capture/comparregister 3
 0057            *TC3 = REGBS+$57 ;
 0058            TC4 = REGBS+$58 ;timer capture/comparregister 4
 0059            *TC4 = REGBS+$59 ;
 005A            TC5 = REGBS+$5A ;timer capture/comparregister 5
 005B            *TC5 = REGBS+$5B ;
 005C            TC6 = REGBS+$5C ;timer capture/comparregister 6
 005D            *TC6 = REGBS+$5D ;
 005E            TC7 = REGBS+$5E ;timer capture/comparregister 7
 005F            *TC7 = REGBS+$5F ;
 0060            PACTL = REGBS+$60 ;pulse accumulator controls
 0061            PAFLG = REGBS+$61 ;pulse accumulator flags
 0062            PACN3 = REGBS+$62 ;pulse accumulator counter 3
 0063            PACN2 = REGBS+$63 ;pulse accumulator counter 2
 0064            PACN1 = REGBS+$64 ;pulse accumulator counter 1
 0065            PACN0 = REGBS+$65 ;pulse accumulator counter 0
 0066            MCCTL = REGBS+$66 ;Modulus down conunter control
 0067            MCFLG = REGBS+$67 ;down counter flags
 0068            ICPAR = REGBS+$68 ;Input pulse accumulatocontrol
 0069            DLYCT = REGBS+$69 ;Delay count to down counter
 006A            ICOVW = REGBS+$6A ;Input control overwrite register
 006B            ICSYS = REGBS+$6B ;Input control system control
--- 0000           
 006D            TIMTST = REGBS+$6D ;timer test register
--- 0000           
 0070            PBCTL = REGBS+$70 ; Pulse accumulatoB control
 0071            PBFLG = REGBS+$71 ; Pulse accumulatoB flags
 0072            PA3H = REGBS+$72 ; Pulse Accumulatoholding regist3
 0073            PA2H = REGBS+$73 ; Pulse Accumulatoholding regist2
 0074            PA1H = REGBS+$74 ; Pulse Accumulatoholding regist1
 0075            PA0H = REGBS+$75 ; Pulse Accumulatoholding regist0
 0076            MCCNT = REGBS+$76 ; Modulus down counter register
 0077            *MCCNTL = REGBS+$77 ; low byte
 0078            TCOH = REGBS+$78 ; Capture 0 holding register
 007A            TC1H = REGBS+$7A ; Capture 1 holding register
 007C            TC2H = REGBS+$7C ; Capture 2 holding register
 007E            TC3H = REGBS+$7E ; Capture 3 holding register
--- 0000           
 0080            ATD0CTL0 = REGBS+$80 ;ADC control 0 (reserved)
 0081            ATD0CTL1 = REGBS+$81 ;ADC control 1 (reserved)
 0082            ATD0CTL2 = REGBS+$82 ;ADC control 2
 0083            ATD0CTL3 = REGBS+$83 ;ADC control 3
 0084            ATD0CTL4 = REGBS+$84 ;ADC control 4
 0085            ATD0CTL5 = REGBS+$85 ;ADC control 5
 0086            ATD0STAT = REGBS+$86 ;ADC status register hi
 0087            *ATD0STAT = REGBS+$87 ;ADC status register lo
 0088            ATD0TEST = REGBS+$88 ;ADC test (reserved)
 0089            *ATD0TEST = REGBS+$89 ;
--- 0000           
 008D            ATD0DIEN = REGBS+$8D ;
--- 0000           
 008F            PORTAD = REGBS+$8F ;port ADC = input only
 0090            ADR00H = REGBS+$90 ;ADC result 0 register
 0092            ADR01H = REGBS+$92 ;ADC result 1 register
 0094            ADR02H = REGBS+$94 ;ADC result 2 register
 0096            ADR03H = REGBS+$96 ;ADC result 3 register
 0098            ADR04H = REGBS+$98 ;ADC result 4 register
 009A            ADR05H = REGBS+$9A ;ADC result 5 register
 009C            ADR06H = REGBS+$9C ;ADC result 6 register
 009E            ADR07H = REGBS+$9E ;ADC result 7 register
--- 0000           
 00A0            PWME = REGBS+$A0 ;PWM enable
 00A1            PWMPOL = REGBS+$A1 ;PWM polarity
 00A2            PWMCLK = REGBS+$A2 ;PWM clock select register
 00A3            PWMPRCLK = REGBS+$A3 ;PWM Prescale clock select register
 00A4            PWMCAE = REGBS+$A4 ;PWM center align select register
 00A5            PWMCTL = REGBS+$A5 ;PWM control register
 00A6            PWMTST = REGBS+$A6 ;reserved
 00A7            PWMPRSC = REGBS+$A7 ;reserved
 00A8            PWMSCLA = REGBS+$A8 ;PWM Scale A
 00A9            PWMSCLB = REGBS+$A9 ;PWM scale B
 00AA            PWMSCNTA = REGBS+$AA ;reserved
 00AB            PWMSCNTB = REGBS+$AB ;reserved
 00AC            PWMCNT0 = REGBS+$AC ;PWM channel 0 counter
 00AD            PWMCNT1 = REGBS+$AD ;PWM channel 1 counter
 00AE            PWMCNT2 = REGBS+$AE ;PWM channel 2 counter
 00AF            PWMCNT3 = REGBS+$AF ;PWM channel 3 counter
 00B0            PWMCNT4 = REGBS+$B0 ;PWM channel 4 counter
 00B1            PWMCNT5 = REGBS+$B1 ;PWM channel 5 counter
 00B2            PWMCNT6 = REGBS+$B2 ;PWM channel 6 counter
 00B3            PWMCNT7 = REGBS+$B3 ;PWM channel 7 counter
 00B4            PWMPER0 = REGBS+$B4 ;PWM channel 0 period
 00B5            PWMPER1 = REGBS+$B5 ;PWM channel 1 period
 00B6            PWMPER2 = REGBS+$B6 ;PWM channel 2 period
 00B7            PWMPER3 = REGBS+$B7 ;PWM channel 3 period
 00B8            PWMPER4 = REGBS+$B8 ;PWM channel 4 period
 00B9            PWMPER5 = REGBS+$B9 ;PWM channel 5 period
 00BA            PWMPER6 = REGBS+$BA ;PWM channel 6 period
 00BB            PWMPER7 = REGBS+$BB ;PWM channel 7 period
 00BC            PWMDTY0 = REGBS+$BC ;PWM channel 0 duty cycle
 00BD            PWMDTY1 = REGBS+$BD ;PWM channel 1 duty cycle
 00BE            PWMDTY2 = REGBS+$BE ;PWM channel 2 duty cycle
 00BF            PWMDTY3 = REGBS+$BF ;PWM channel 3 duty cycle
 00C0            PWMDTY4 = REGBS+$C0 ;PWM channel 0 duty cycle
 00C1            PWMDTY5 = REGBS+$C1 ;PWM channel 1 duty cycle
 00C2            PWMDTY6 = REGBS+$C2 ;PWM channel 2 duty cycle
 00C3            PWMDTY7 = REGBS+$C3 ;PWM channel 3 duty cycle
 00C4            PWMSDN = REGBS+$C4 ;PWM shutdown register
--- 0000           
 00C8            SC0BDH = REGBS+$C8 ;sci 0 baud reg hi byte
 00C9            SC0BDL = REGBS+$C9 ;sci 0 baud reg lo byte
 00CA            SC0CR1 = REGBS+$CA ;sci 0 control1 reg
 00CB            SC0CR2 = REGBS+$CB ;sci 0 control2 reg
 00CC            SC0SR1 = REGBS+$CC ;sci 0 status reg 1
 00CD            SC0SR2 = REGBS+$CD ;sci 0 status reg 2
 00CE            SC0DRH = REGBS+$CE ;sci 0 data reg hi
 00CF            SC0DRL = REGBS+$CF ;sci 0 data reg lo
 00D0            SC1BDH = REGBS+$D0 ;sci 1 baud reg hi byte
 00D1            SC1BDL = REGBS+$D1 ;sci 1 baud reg lo byte
 00D2            SC1CR1 = REGBS+$D2 ;sci 1 control1 reg
 00D3            SC1CR2 = REGBS+$D3 ;sci 1 control2 reg
 00D4            SC1SR1 = REGBS+$D4 ;sci 1 status reg 1
 00D5            SC1SR2 = REGBS+$D5 ;sci 1 status reg 2
 00D6            SC1DRH = REGBS+$D6 ;sci 1 data reg hi
 00D7            SC1DRL = REGBS+$D7 ;sci 1 data reg lo
 00D8            SPI0CR1 = REGBS+$D8 ;spi 0 control1 reg
 00D9            SPI0CR2 = REGBS+$D9 ;spi 0 control2 reg
 00DA            SPI0BR = REGBS+$DA ;spi 0 baud reg
 00DB            SPI0SR = REGBS+$DB ;spi 0 status reg hi
--- 0000           
 00DD            SP0DR = REGBS+$DD ;spi 0 data reg
--- 0000           
 00E0            IBAD = REGBS+$E0 ;I2C Bus address register
 00E1            IBFD = REGBS+$E1 ;I2C Bus fr=ency divider
 00E2            IBCR = REGBS+$E2 ;I2C Bus control register
 00E3            IBSR = REGBS+$E3 ;I2C Bus status register
 00E4            IBDR = REGBS+$E4 ;I2C Bus message data register
--- 0000           
 00E8            DLCBCR1 = REGBS+$E8 ;BDLC Control regsiter 1
 00E9            DLCBSVR = REGBS+$E9 ;BDLC State vector register
 00EA            DLCBCR2 = REGBS+$EA ;BDLC Control register 2
 00EB            DLCBDR = REGBS+$EB ;BDLC Data register
 00EC            DLCBARD = REGBS+$EC ;BDLC Analog delay register
 00ED            DLCBRSR = REGBS+$ED ;BDLC Rate select register
 00EE            DLCSCR = REGBS+$EE ;BDLC Control register
 00EF            DLCBSTAT = REGBS+$EF ;BDLC Status register
 00F0            SPI1CR1 = REGBS+$F0 ;spi 1 control1 reg
 00F1            SPI1CR2 = REGBS+$F1 ;spi 1 control2 reg
 00F2            SPI1BR = REGBS+$F2 ;spi 1 baud reg
 00F3            SPI1SR = REGBS+$F3 ;spi 1 status reg hi
--- 0000           
 00F5            SP1DR = REGBS+$F5 ;spi 1 data reg
--- 0000           
 00F8            SPI2CR1 = REGBS+$F8 ;spi 2 control1 reg
 00F9            SPI2CR2 = REGBS+$F9 ;spi 2 control2 reg
 00FA            SPI2BR = REGBS+$FA ;spi 2 baud reg
 00FB            SPI2SR = REGBS+$FB ;spi 2 status reg hi
--- 0000           
 00FD            SP2DR = REGBS+$FD ;spi 2 data reg
--- 0000           
 0100            FCLKDIV = REGBS+$100 ;FLASH clock divider
 0101            FSEC = REGBS+$101 ;FLASH security register
--- 0000           
 0103            FCNFG = REGBS+$103 ;FLASH configuration register
 0104            FPROT = REGBS+$104 ;FLASH protection register
 0105            FSTAT = REGBS+$105 ;FLASH status register
 0106            FCMD = REGBS+$106 ;FLASH command register
--- 0000           
 0110            ECLKDIV = REGBS+$110 ;EEPROM clock divider
--- 0000           
 0113            ECNFG = REGBS+$113 ;EEPROM configuration register
 0114            EPROT = REGBS+$114 ;EEPROM protection register
 0115            ESTAT = REGBS+$115 ;EEPROM status register
 0116            ECMD = REGBS+$116 ;EEPROM command register
--- 0000           
 0120            ATD1CTL0 = REGBS+$120 ;ADC1 control 0 (reserved)
 0121            ATD1CTL1 = REGBS+$121 ;ADC1 control 1 (reserved)
 0122            ATD1CTL2 = REGBS+$122 ;ADC1 control 2
 0123            ATD1CTL3 = REGBS+$123 ;ADC1 control 3
 0124            ATD1CTL4 = REGBS+$124 ;ADC1 control 4
 0125            ATD1CTL5 = REGBS+$125 ;ADC1 control 5
 0126            ATD1STAT = REGBS+$126 ;ADC1 status register hi
 0127            *ATD1STAT = REGBS+$127 ;ADC1 status register lo
 0128            ATD1TEST = REGBS+$128 ;ADC1 test (reserved)
 0129            *ATD1TEST = REGBS+$129 ;
--- 0000           
 012D            ATDDIEN = REGBS+$12D ;ADC1 INPUT ENABLE REGISTER
--- 0000           
 012F            PORTAD1 = REGBS+$12F ;port ADC1 = input only
 0130            ADR10H = REGBS+$130 ;ADC1 result 0 register
 0132            ADR11H = REGBS+$132 ;ADC1 result 1 register
 0134            ADR12H = REGBS+$134 ;ADC1 result 2 register
 0136            ADR13H = REGBS+$136 ;ADC1 result 3 register
 0138            ADR14H = REGBS+$138 ;ADC1 result 4 register
 013A            ADR15H = REGBS+$13A ;ADC1 result 5 register
 013C            ADR16H = REGBS+$13C ;ADC1 result 6 register
 013E            ADR17H = REGBS+$13E ;ADC1 result 7 register
 0140            CAN0CTL0 = REGBS+$140 ;CAN0 control register 0
 0141            CAN0CTL1 = REGBS+$141 ;CAN0 control register 1
 0142            CAN0BTR0 = REGBS+$142 ;CAN0 bus timing register 0
 0143            CAN0BTR1 = REGBS+$143 ;CAN0 bus timing register 1
 0144            CAN0RFLG = REGBS+$144 ;CAN0 receiver flags
 0145            CAN0RIER = REGBS+$145 ;CAN0 receiver interrupt enables
 0146            CAN0TFLG = REGBS+$146 ;CAN0 transmit flags
 0147            CAN0TIER = REGBS+$147 ;CAN0 transmit interrupt enables
 0148            CAN0TARQ = REGBS+$148 ;CAN0 transmit message abort control
 0149            CAN0TAAK = REGBS+$149 ;CAN0 transmit message abort status
 014A            CAN0TBEL = REGBS+$14A ;CAN0 transmit buffer select
 014B            CAN0IDAC = REGBS+$14B ;CAN0 identfier acceptancecontrol
--- 0000           
 014E            CAN0RERR = REGBS+$14E ;CAN0 Receive error counter
 014F            CAN0TERR = REGBS+$14F ;CAN0 Transmit error counter
 0150            CAN0IDA0 = REGBS+$150 ;CAN0 Identifier acceptanceregister 0
 0151            CAN0IDA1 = REGBS+$151 ;CAN0 Identifier acceptanceregister 1
 0152            CAN0IDA2 = REGBS+$152 ;CAN0 Identifier acceptanceregister 2
 0153            CAN0IDA3 = REGBS+$153 ;CAN0 Identifier acceptanceregister 3
 0154            CAN0IDM0 = REGBS+$154 ;CAN0 Identifier mask register 0
 0155            CAN0IDM1 = REGBS+$155 ;CAN0 Identifier mask register 1
 0156            CAN0IDM2 = REGBS+$156 ;CAN0 Identifier mask register 2
 0157            CAN0IDM3 = REGBS+$157 ;CAN0 Identifier mask register 3
 0158            CAN0IDA4 = REGBS+$158 ;CAN0 Identifier acceptanceregister 4
 0159            CAN0IDA5 = REGBS+$159 ;CAN0 Identifier acceptanceregister 5
 015A            CAN0IDA6 = REGBS+$15A ;CAN0 Identifier acceptanceregister 6
 015B            CAN0IDA7 = REGBS+$15B ;CAN0 Identifier acceptanceregister 7
 015C            CAN0IDM4 = REGBS+$15C ;CAN0 Identifier mask register 4
 015D            CAN0IDM5 = REGBS+$15D ;CAN0 Identifier mask register 5
 015E            CAN0IDM6 = REGBS+$15E ;CAN0 Identifier mask register 6
 015F            CAN0IDM7 = REGBS+$15F ;CAN0 Identifier mask register 7
 0160            CAN0RXFG = REGBS+$160 ;CAN0 RX foregroundbuffer thru +$16F
 0170            CAN0TXFG = REGBS+$170 ;CAN0 TX foregroundbuffer thru +$17F
--- 0000           
 0180            CAN1CTL0 = REGBS+$180 ;CAN1 control register 0
 0181            CAN1CTL1 = REGBS+$181 ;CAN1 control register 1
 0182            CAN1BTR0 = REGBS+$182 ;CAN1 bus timing register 0
 0183            CAN1BTR1 = REGBS+$183 ;CAN1 bus timing register 1
 0184            CAN1RFLG = REGBS+$184 ;CAN1 receiver flags
 0185            CAN1RIER = REGBS+$185 ;CAN1 receiver interrupt enables
 0186            CAN1TFLG = REGBS+$186 ;CAN1 transmit flags
 0187            CAN1TIER = REGBS+$187 ;CAN1 transmit interrupt enables
 0188            CAN1TARQ = REGBS+$188 ;CAN1 transmit message abort control
 0189            CAN1TAAK = REGBS+$189 ;CAN1 transmit message abort status
 018A            CAN1TBEL = REGBS+$18A ;CAN1 transmit buffer select
 018B            CAN1IDAC = REGBS+$18B ;CAN1 identfier acceptancecontrol
--- 0000           
 018E            CAN1RERR = REGBS+$18E ;CAN1 Receive error counter
 018F            CAN1TERR = REGBS+$18F ;CAN1 Transmit error counter
 0190            CAN1IDA0 = REGBS+$190 ;CAN1 Identifier acceptanceregister 0
 0191            CAN1IDA1 = REGBS+$191 ;CAN1 Identifier acceptanceregister 1
 0192            CAN1IDA2 = REGBS+$192 ;CAN1 Identifier acceptanceregister 2
 0193            CAN1IDA3 = REGBS+$193 ;CAN1 Identifier acceptanceregister 3
 0194            CAN1IDM0 = REGBS+$194 ;CAN1 Identifier mask register 0
 0195            CAN1IDM1 = REGBS+$195 ;CAN1 Identifier mask register 1
 0196            CAN1IDM2 = REGBS+$196 ;CAN1 Identifier mask register 2
 0197            CAN1IDM3 = REGBS+$197 ;CAN1 Identifier mask register 3
 0198            CAN1IDA4 = REGBS+$198 ;CAN1 Identifier acceptanceregister 4
 0199            CAN1IDA5 = REGBS+$199 ;CAN1 Identifier acceptanceregister 5
 019A            CAN1IDA6 = REGBS+$19A ;CAN1 Identifier acceptanceregister 6
 019B            CAN1IDA7 = REGBS+$19B ;CAN1 Identifier acceptanceregister 7
 019C            CAN1IDM4 = REGBS+$19C ;CAN1 Identifier mask register 4
 019D            CAN1IDM5 = REGBS+$19D ;CAN1 Identifier mask register 5
 019E            CAN1IDM6 = REGBS+$19E ;CAN1 Identifier mask register 6
 019F            CAN1IDM7 = REGBS+$19F ;CAN1 Identifier mask register 7
 01A0            CAN1RXFG = REGBS+$1A0 ;CAN1 RX foregroundbuffer thru +$1AF
 01B0            CAN1TXFG = REGBS+$1B0 ;CAN1 TX foregroundbuffer thru +$1BF
--- 0000           
 01C0            CAN2CTL0 = REGBS+$1C0 ;CAN2 control register 0
 01C1            CAN2CTL1 = REGBS+$1C1 ;CAN2 control register 1
 01C2            CAN2BTR0 = REGBS+$1C2 ;CAN2 bus timing register 0
 01C3            CAN2BTR1 = REGBS+$1C3 ;CAN2 bus timing register 1
 01C4            CAN2RFLG = REGBS+$1C4 ;CAN2 receiver flags
 01C5            CAN2RIER = REGBS+$1C5 ;CAN2 receiver interrupt enables
 01C6            CAN2TFLG = REGBS+$1C6 ;CAN2 transmit flags
 01C7            CAN2TIER = REGBS+$1C7 ;CAN2 transmit interrupt enables
 01C8            CAN2TARQ = REGBS+$1C8 ;CAN2 transmit message abort control
 01C9            CAN2TAAK = REGBS+$1C9 ;CAN2 transmit message abort status
 01CA            CAN2TBEL = REGBS+$1CA ;CAN2 transmit buffer select
 01CB            CAN2IDAC = REGBS+$1CB ;CAN2 identfier acceptancecontrol
--- 0000           
 01CE            CAN2RERR = REGBS+$1CE ;CAN2 Receive error counter
 01CF            CAN2TERR = REGBS+$1CF ;CAN2 Transmit error counter
 01D0            CAN2IDA0 = REGBS+$1D0 ;CAN2 Identifier acceptanceregister 0
 01D1            CAN2IDA1 = REGBS+$1D1 ;CAN2 Identifier acceptanceregister 1
 01D2            CAN2IDA2 = REGBS+$1D2 ;CAN2 Identifier acceptanceregister 2
 01D3            CAN2IDA3 = REGBS+$1D3 ;CAN2 Identifier acceptanceregister 3
 01D4            CAN2IDM0 = REGBS+$1D4 ;CAN2 Identifier mask register 0
 01D5            CAN2IDM1 = REGBS+$1D5 ;CAN2 Identifier mask register 1
 01D6            CAN2IDM2 = REGBS+$1D6 ;CAN2 Identifier mask register 2
 01D7            CAN2IDM3 = REGBS+$1D7 ;CAN2 Identifier mask register 3
 01D8            CAN2IDA4 = REGBS+$1D8 ;CAN2 Identifier acceptanceregister 4
 01D9            CAN2IDA5 = REGBS+$1D9 ;CAN2 Identifier acceptanceregister 5
 01DA            CAN2IDA6 = REGBS+$1DA ;CAN2 Identifier acceptanceregister 6
 01DB            CAN2IDA7 = REGBS+$1DB ;CAN2 Identifier acceptanceregister 7
 01DC            CAN2IDM4 = REGBS+$1DC ;CAN2 Identifier mask register 4
 01DD            CAN2IDM5 = REGBS+$1DD ;CAN2 Identifier mask register 5
 01DE            CAN2IDM6 = REGBS+$1DE ;CAN2 Identifier mask register 6
 01DF            CAN2IDM7 = REGBS+$1DF ;CAN2 Identifier mask register 7
 01E0            CAN2RXFG = REGBS+$1E0 ;CAN2 RX foregroundbuffer thru +$1EF
 01F0            CAN2TXFG = REGBS+$1F0 ;CAN2 TX foregroundbuffer thru +$1FF
--- 0000           
 0200            CAN3CTL0 = REGBS+$200 ;CAN3 control register 0
 0201            CAN3CTL1 = REGBS+$201 ;CAN3 control register 1
 0202            CAN3BTR0 = REGBS+$202 ;CAN3 bus timing register 0
 0203            CAN3BTR1 = REGBS+$203 ;CAN3 bus timing register 1
 0204            CAN3RFLG = REGBS+$204 ;CAN3 receiver flags
 0205            CAN3RIER = REGBS+$205 ;CAN3 receiver interrupt enables
 0206            CAN3TFLG = REGBS+$206 ;CAN3 transmit flags
 0207            CAN3TIER = REGBS+$207 ;CAN3 transmit interrupt enables
 0208            CAN3TARQ = REGBS+$208 ;CAN3 transmit message abort control
 0209            CAN3TAAK = REGBS+$209 ;CAN3 transmit message abort status
 020A            CAN3TBEL = REGBS+$20A ;CAN3 transmit buffer select
 020B            CAN3IDAC = REGBS+$20B ;CAN3 identfier acceptancecontrol
--- 0000           
 020E            CAN3RERR = REGBS+$20E ;CAN3 Receive error counter
 020F            CAN3TERR = REGBS+$20F ;CAN3 Transmit error counter
 0210            CAN3IDA0 = REGBS+$210 ;CAN3 Identifier acceptanceregister 0
 0211            CAN3IDA1 = REGBS+$211 ;CAN3 Identifier acceptanceregister 1
 0212            CAN3IDA2 = REGBS+$212 ;CAN3 Identifier acceptanceregister 2
 0213            CAN3IDA3 = REGBS+$213 ;CAN3 Identifier acceptanceregister 3
 0214            CAN3IDM0 = REGBS+$214 ;CAN3 Identifier mask register 0
 0215            CAN3IDM1 = REGBS+$215 ;CAN3 Identifier mask register 1
 0216            CAN3IDM2 = REGBS+$216 ;CAN3 Identifier mask register 2
 0217            CAN3IDM3 = REGBS+$217 ;CAN3 Identifier mask register 3
 0218            CAN3IDA4 = REGBS+$218 ;CAN3 Identifier acceptanceregister 4
 0219            CAN3IDA5 = REGBS+$219 ;CAN3 Identifier acceptanceregister 5
 021A            CAN3IDA6 = REGBS+$21A ;CAN3 Identifier acceptanceregister 6
 021B            CAN3IDA7 = REGBS+$21B ;CAN3 Identifier acceptanceregister 7
 021C            CAN3IDM4 = REGBS+$21C ;CAN3 Identifier mask register 4
 021D            CAN3IDM5 = REGBS+$21D ;CAN3 Identifier mask register 5
 021E            CAN3IDM6 = REGBS+$21E ;CAN3 Identifier mask register 6
 021F            CAN3IDM7 = REGBS+$21F ;CAN3 Identifier mask register 7
 0220            CAN3RXFG = REGBS+$220 ;CAN3 RX foregroundbuffer thru +$22F
 0230            CAN3TXFG = REGBS+$230 ;CAN3 TX foregroundbuffer thru +$23F
--- 0000           
 0240            PTT = REGBS+$240 ;portT data register
 0241            PTIT = REGBS+$241 ;portT input register
 0242            DDRT = REGBS+$242 ;portT direction register
 0243            RDRT = REGBS+$243 ;portT reduced drive register
 0244            PERT = REGBS+$244 ;portT pull device enable
 0245            PPST = REGBS+$245 ;portT pull polarity select
--- 0000           
 0248            PTS = REGBS+$248 ;portS data register
 0249            PTIS = REGBS+$249 ;portS input register
 024A            DDRS = REGBS+$24A ;portS direction register
 024B            RDRS = REGBS+$24B ;portS reduced drive register
 024C            PERS = REGBS+$24C ;portS pull device enable
 024D            PPSS = REGBS+$24D ;portS pull polarity select
 024E            WOMS = REGBS+$24E ;portS Wired Or mode register
--- 0000           
 0250            PTM = REGBS+$250 ;portM data register
 0251            PTIM = REGBS+$251 ;portM input register
 0252            DDRM = REGBS+$252 ;portM direction register
 0253            RDRM = REGBS+$253 ;portM reduced drive register
 0254            PERM = REGBS+$254 ;portM pull device enable
 0255            PPSM = REGBS+$255 ;portM pull polarity select
 0256            WOMM = REGBS+$256 ;portM Wired Or mode register
 0257            MODRR = REGBS+$257 ;portM Module routing register
 0258            PTP = REGBS+$258 ;portP data register
 0259            PTIP = REGBS+$259 ;portP input register
 025A            DDRP = REGBS+$25A ;portP direction register
 025B            RDRP = REGBS+$25B ;portP reduced drive register
 025C            PERP = REGBS+$25C ;portP pull device enable
 025D            PPSP = REGBS+$25D ;portP pull polarity select
 025E            PIEP = REGBS+$25E ;portP interrupt enable register
 025F            PIFP = REGBS+$25F ;portP interrupt flag register
 0260            PTH = REGBS+$260 ;portH data register
 0261            PTIH = REGBS+$261 ;portH input register
 0262            DDRH = REGBS+$262 ;portH direction register
 0263            RDRH = REGBS+$263 ;portH reduced drive register
 0264            PERH = REGBS+$264 ;portH pull device enable
 0265            PPSH = REGBS+$265 ;portH pull polarity select
 0266            PIEH = REGBS+$266 ;portH interrupt enable register
 0267            PIFH = REGBS+$267 ;portH interrupt flag register
 0268            PTJ = REGBS+$268 ;portP data register
 0269            PTIJ = REGBS+$269 ;portP input register
 026A            DDRJ = REGBS+$26A ;portP direction register
 026B            RDRJ = REGBS+$26B ;portP reduced drive register
 026C            PERJ = REGBS+$26C ;portP pull device enable
 026D            PPSJ = REGBS+$26D ;portP pull polarity select
 026E            PIEJ = REGBS+$26E ;portP interrupt enable register
 026F            PIFJ = REGBS+$26F ;portP interrupt flag register
--- 0000           
 0280            CAN4CTL0 = REGBS+$280 ;CAN4 control register 0
 0281            CAN4CTL1 = REGBS+$281 ;CAN4 control register 1
 0282            CAN4BTR0 = REGBS+$282 ;CAN4 bus timing register 0
 0283            CAN4BTR1 = REGBS+$283 ;CAN4 bus timing register 1
 0284            CAN4RFLG = REGBS+$284 ;CAN4 receiver flags
 0285            CAN4RIER = REGBS+$285 ;CAN4 receiver interrupt enables
 0286            CAN4TFLG = REGBS+$286 ;CAN4 transmit flags
 0287            CAN4TIER = REGBS+$287 ;CAN4 transmit interrupt enables
 0288            CAN4TARQ = REGBS+$288 ;CAN4 transmit message abort control
 0289            CAN4TAAK = REGBS+$289 ;CAN4 transmit message abort status
 028A            CAN4TBEL = REGBS+$28A ;CAN4 transmit buffer select
 028B            CAN4IDAC = REGBS+$28B ;CAN4 identfier acceptancecontrol
--- 0000           
 028E            CAN4RERR = REGBS+$28E ;CAN4 Receive error counter
 028F            CAN4TERR = REGBS+$28F ;CAN4 Transmit error counter
 0290            CAN4IDA0 = REGBS+$290 ;CAN4 Identifier acceptanceregister 0
 0291            CAN4IDA1 = REGBS+$291 ;CAN4 Identifier acceptanceregister 1
 0292            CAN4IDA2 = REGBS+$292 ;CAN4 Identifier acceptanceregister 2
 0293            CAN4IDA3 = REGBS+$293 ;CAN4 Identifier acceptanceregister 3
 0294            CAN4IDM0 = REGBS+$294 ;CAN4 Identifier mask register 0
 0295            CAN4IDM1 = REGBS+$295 ;CAN4 Identifier mask register 1
 0296            CAN4IDM2 = REGBS+$296 ;CAN4 Identifier mask register 2
 0297            CAN4IDM3 = REGBS+$297 ;CAN4 Identifier mask register 3
 0298            CAN4IDA4 = REGBS+$298 ;CAN4 Identifier acceptanceregister 4
 0299            CAN4IDA5 = REGBS+$299 ;CAN4 Identifier acceptanceregister 5
 029A            CAN4IDA6 = REGBS+$29A ;CAN4 Identifier acceptanceregister 6
 029B            CAN4IDA7 = REGBS+$29B ;CAN4 Identifier acceptanceregister 7
 029C            CAN4IDM4 = REGBS+$29C ;CAN4 Identifier mask register 4
 029D            CAN4IDM5 = REGBS+$29D ;CAN4 Identifier mask register 5
 029E            CAN4IDM6 = REGBS+$29E ;CAN4 Identifier mask register 6
 029F            CAN4IDM7 = REGBS+$29F ;CAN4 Identifier mask register 7
 02A0            CAN4RXFG = REGBS+$2A0 ;CAN4 RX foregroundbuffer thru +$2AF
 02B0            CAN4TXFG = REGBS+$2B0 ;CAN4 TX foregroundbuffer thru +$2BF
--- 0000           
--- 0000           ; ========================================================
--- 0000           ;	basicLCD	Include file with minimal support 
--- 0000           ;			for LCD
--- 0000           ;	Requires : dp256reg.asm
--- 0000           ;
--- 0000           ;	Hacked from Lcd_2PP.asm:     L  Parallel Lcd Driver 
--- 0000           ;         Version:       1.0   Released 11/01/2002
--- 0000           ;          Author:       Gary Karnes , Axiom Manufacturing
--- 0000           ;        Compiler:       Asm12
--- 0000           ;        Platform:       CML12S & PROJECT BOARD 
--- 0000           ;
--- 0000           ; ========================================================
--- 0000           ;
--- 0000           ; Equates
 0001           U21_N = $01           ; LCD unused pin
 0002           LCD_RW = $02          ; LCD RW select (PT1)
 0004           LCD_RS = $04          ; LCD RS select	(PT2)
 0008           LCD_EN = $08          ; LCD EN select	(PT3)
 0080           U21_EN = $80
--- 0000           
 4498            _LCD_instruction::
 4498  3B                 pshd
 4499  34                 pshx
 449A  35                 pshy
 449B  180F               tba
 449D  164512             jsr LD2PP_Instruction
 44A0  31                 puly
 44A1  30                 pulx
 44A2  3A                 puld
 44A3  3D                 rts
 44A4            _LCD_display::
 44A4  3B                 pshd
 44A5  34                 pshx
 44A6  35                 pshy
 44A7  180F               tba
 44A9  16450A             jsr LCD2PP_Data
 44AC  31                 puly
 44AD  30                 pulx
 44AE  3A                 puld
 44AF  3D                 rts
 44B0                     
 44B0            ;-----------
 44B0            _Lcd2PP_Init::
 44B0  3B                 pshd
 44B1  34                 pshx
 44B2  35                 pshy
 44B3  1644BA             jsr Lcd2PP_Init
 44B6  31                 puly
 44B7  30                 pulx
 44B8  3A                 puld
 44B9  3D                 rts    
 44BA                      
 44BA            Lcd2PP_Init:	; Note : Use 4-bit init sequence (not 8-bit)  Page 3 LCD_spec.pdf
 44BA            		; Bottom table contains sequence of instructions
 44BA            		; Each row in the table represents one WRITE to the LCD instruction register (via Port P)
 44BA            		;	First instruction involves only a 4-bit instruction (one WRITE)
 44BA            		;	Following instructions involve 8 bit instruction, therefore
 44BA            		;		2 * 4-bit writes
 44BA            
 44BA            	; "System init"
 44BA            	; Setup Port T for output
 44BA  180B0F0242           movb #$0F,DDRT        ; setup port T
 44BF  180B000240           movb #$00,PTT         ; all low
 44C4                    ; Disable SPI AND setup SPI1 as four output bits
 44C4  1C025A0F                bset  DDRP,#$0F           ; set P0-3 as outputs
 44C8  1D00F040            bclr  SPI1CR1,#$40    ; Disable SP by turning SPI1 off
 44CC            
 44CC  180BFE0252           movb #$FE,DDRM        ; set PM1-7 as outputs
 44D1  180B080250           movb #$08,PTM         ; D.P.(PM2) = Off, U7_EN(PM3)= low,
 44D6                                            ; SS0*(PM4), SS1*(PM5), SS2*(PM6) = Low
 44D6                                            ; Heat(PM7) = Off
 44D6            
 44D6  1D02400E            bclr    PTT,LCD_RW+LCD_RS+LCD_EN  ; select lcd commands Cs=0 En=0
 44DA            
 44DA  164558              jsr      DELAY50M
 44DD  8602                ldaa     #$02         ; Set to 4-bit operation (0010)
 44DF  16451E              jsr      LCD2PP_4     ; This first instruction is only 4 bits long!!!  Rest are 8 bits.  
 44E2  164558              jsr      DELAY50M
 44E5            
 44E5                    ;  ldaa     #$2c                ; Function Set = 001(D/L)NF** where D/L = 0(4-bit) N=1(2-lines) F=0(font=5x7 dots)
 44E5  8628                ldaa     #$28         ; Function Set = 001(D/L)NF** where D/L = 0(4-bit) N=1(2-lines) F=0(font=5x7 dots)
 44E7  164512              jsr      LD2PP_Instruction         
 44EA  164566              jsr      DELAY10M         
 44ED            
 44ED  860E                ldaa      #$0e        ; Display On/off Control = 00001DCB where D=1(display on) C=1(cursor on) B=0 (blink off)
 44EF  164512              jsr      LD2PP_Instruction          
 44F2  164566              jsr      DELAY10M          
 44F5                            
 44F5  8601                ldaa     #$01         ; Clear display = 00000001
 44F7  164512              jsr      LD2PP_Instruction           
 44FA  164561              jsr      DELAY20M          
 44FD  8680                ldaa     #$80         ; DDRAM Address Set = 01xxxxxx where xxxxxx = address
 44FF  164512              jsr      LD2PP_Instruction
 4502  164566              jsr      DELAY10M        
 4505            
 4505            ; Reset Lcd states to rest
 4505  1D02400E           bclr    PTT,LCD_RS+LCD_RW+LCD_EN ; turn all signals off on lcd
 4509  3D                  rts
 450A            ;
 450A            ;-----------------------------------------------
 450A            ; Lcd Routines
 450A            ;
 450A            ; Write a byte to the LCD Data Register
 450A            LCD2PP_Data:
 450A  1C024004        bset  PTT,LCD_RS     ; select lcd data buffer RS=1
 450E  16454B          jsr   LCD_W_8        ; write byte
 4511  3D              rts
 4512            
 4512            ; Write a byte to the LCD Instruction Register (leaves LCD in Data mode)
 4512            LD2PP_Instruction:
 4512  1D024004          bclr   PTT,LCD_RS        ; select lcd command buffer
 4516  16454B            jsr    LCD_W_8           ; wait
 4519  1C024004          bset   PTT,LCD_RS        ; select data buffer
 451D  3D                rts
 451E            
 451E            LCD2PP_4:			; Destroys a and b
 451E  1C024880           bset   PTS,#U21_EN     ; set U21_EN high so that latch becomes transparent
 4522  16456F             jsr      DELAY1MS      ; delay     
 4525  F60258             ldab     PTP              ; Port P
 4528  C4F0               andb     #$f0             ; get only bits 4 - 7
 452A  840F               anda     #$0f             ; get data
 452C  1806               aba
 452E  7A0258             staa     PTP              ; save data 
 4531                    ; For LCD's write cycle, Enable must pulse high and then low (for specified time)
 4531  1D024008           bclr     PTT,LCD_EN       ; enable low
 4535  16456F             jsr      DELAY1MS         ; delay for LCD
 4538  1C024008           bset     PTT,LCD_EN       ; latch data
 453C  16456F             jsr      DELAY1MS         ; delay for LCD 
 453F  1D024008           bclr     PTT,LCD_EN           ; enable low
 4543  16456F             jsr      DELAY1MS
 4546  1D024880           bclr  PTS,#U21_EN    ; set U21_EN low to isolate LCD from parallel control (outputs are latched)
 454A  3D                 rts
 454B            ;
 454B            ;
 454B            ; Lcd Write 8 bit Data , lower 4 bits first in acc A   (Destroys A)
 454B            LCD_W_8:					
 454B  36                 psha                     ; save a 
 454C  44                 lsra                     ; shift upper 4 bits to lower
 454D  44                 lsra
 454E  44                 lsra
 454F  44                 lsra
 4550  16451E             jsr      LCD2PP_4        ; write upper 4 bits to lcd
 4553  32                 pula
 4554  16451E             jsr      LCD2PP_4         ; write lower 4 bits to lcd
 4557  3D                 rts
 4558                                                    
 4558            
 4558            ;
 4558            ; Delay routines
 4558            ;
 4558            ;
 4558            ; Generate a 50 ms delay
 4558            DELAY50M:
 4558  34                  pshx
 4559  CEC34E              ldx  #49998      ; delay 50,000 usecs,
 455C  164578              jsr  DELML01     ; call usec delay
 455F  30                  pulx
 4560  3D                  rts
 4561            ;
 4561            ;
 4561            ; Generate a 20 ms delay
 4561            DELAY20M:
 4561  0703                bsr  DELAY10M
 4563  0701                bsr  DELAY10M 
 4565  3D                  rts
 4566            ;
 4566            ; Generate a 10 ms delay
 4566            DELAY10M:                            ; jsr=4cyles
 4566  34                  pshx             ; 2 cycles ,save x
 4567  CE270E              ldx  #9998       ; 2 cycles,delay 9998 usec + 2 for this routine
 456A  164578              jsr  DELML01     ; call usec delay, this delay offset in sub
 456D  30                  pulx             ; 3 cycles restore x
 456E  3D                  rts              ; 5 cycles
 456F            ;
 456F            ;
 456F            ; Generate a 1 ms delay
 456F            DELAY1MS:
 456F                                       ; jsr=4cyles
 456F  34                  pshx             ; 2 cycles ,save x
 4570  CE03E6              ldx  #998       ; 2 cycles,delay 9998 usec + 2 for this routine
 4573  164578              jsr  DELML01     ; call usec delay, this delay offset in sub
 4576  30                  pulx             ; 3 cycles restore x
 4577  3D                  rts              ; 5 cycles
 4578            
 4578            
 4578            ;
 4578            ; 8 cycles = 1 usec e = 8mhz
 4578            DELML01:
 4578  A7                  nop              ; 1 cycle
 4579  A7                  nop              ; 1 cycle
 457A  A7                  nop              ; 1 cycle
 457B  A7                  nop              ; 1 cycle
 457C  09                  dex              ; 1 cycle 
 457D  26F9                bne   DELML01    ; 3 cycles
 457F  3D                  rts              ; 5 cycles
 0000            REGBS = $0000 ; DP256 register bank base address
 0000            PORTA = REGBS+0 ;port A = Address lines A8 A15
 0001            PORTB = REGBS+1 ;port B = Address lines A0 A7
 0002            DDRA = REGBS+2 ;port A direction register
 0003            DDRB = REGBS+3 ;port A direction register
 0008            PORTE = REGBS+8 ;port E = mode,IRQandcontrolsignals
 0009            DDRE = REGBS+9 ;port E direction register
 000A            PEAR = REGBS+$A ;port E assignments
 000B            MODE = REGBS+$B ;Mode register
 000C            PUCR = REGBS+$C ;port pull-up control register
 000D            RDRIV = REGBS+$D ;port reduced drive control register
 000E            EBICTL = REGBS+$E ;E stretch control
--- 0000           
 0010            INITRM = REGBS+$10 ;Ram location register
 0011            INITRG = REGBS+$11 ;Register location register
 0012            INITEE = REGBS+$12 ;EEprom location register
 0013            MISC = REGBS+$13 ;MiscellaneoMapping control
 0014            MTST0 = REGBS+$14 ; RESERVED
 0015            ITCR = REGBS+$15 ;Interrupt test control register
 0016            ITEST = REGBS+$16 ;Interrupt test register
 0017            MTST1 = REGBS+$17 ; Reserved
--- 0000           
 001A            PARTIDH = REGBS+$1A ;Part ID high
 001B            PARTIDL = REGBS+$1B ;Part ID low
 001C            MEMSIZ0 = REGBS+$1C ;memory size
 001D            MEMSIZ1 = REGBS+$1D ;memory size
 001E            INTCR = REGBS+$1E ;interrupt control register
 001F            HPRIO = REGBS+$1F ;high priority reg
--- 0000           
 0028            BKPCT0 = REGBS+$28 ;Break control register
 0029            BKPCT1 = REGBS+$29 ;Break control register
 002A            BKP0X = REGBS+$2A ; Break 0 index register
 002B            BKP0H = REGBS+$2B ; Break 0 pointer high
 002C            BRP0L = REGBS+$2C ; Break 0 pointer low
 002D            BKP1X = REGBS+$2D ; Break 1 index register
 002E            BKP1H = REGBS+$2E ; Break 1 pointer high
 002F            BRP1L = REGBS+$2F ; Break 1 pointer low
 0030            PPAGE = REGBS+$30 ;Program Page register
--- 0000           
 0032            PORTK = REGBS+$32 ;Port K data
 0033            DDRK = REGBS+$33 ;Port K direction
 0034            SYNR = REGBS+$34 ; Synthesizer / multiplier register
 0035            REFDV = REGBS+$35 ; Reference divider register
 0036            CTFLG = REGBS+$36 ; RESERVED
 0037            CRGFLG = REGBS+$37 ; PLL flags register
 0038            CRGINT = REGBS+$38 ; PLL interrupt register
 0039            CLKSEL = REGBS+$39 ; Clock select register
 003A            PLLCTL = REGBS+$3A ; PLL control register
 003B            RTICTL = REGBS+$3B ;Real time interrupt control
 003C            COPCTL = REGBS+$3C ;Watchdog control
 003D            FORBYP = REGBS+$3D ;
 003E            CTCTL = REGBS+$3E ;
 003F            ARMCOP = REGBS+$3F ;COP reset register
--- 0000           
 0040            TIOS = REGBS+$40 ;timer input/output select
 0041            CFORC = REGBS+$41 ;timer compare force
 0042            OC7M = REGBS+$42 ;timer output compare 7 mask
 0043            OC7D = REGBS+$43 ;timer output compare 7 data
 0044            TCNT = REGBS+$44 ;timer counter register hi
 0045            *TCNT = REGBS+$45 ;timer counter register lo
 0046            TSCR = REGBS+$46 ;timer system control register
 0047            TTOV = REGBS+$47 ;reserved
 0048            TCTL1 = REGBS+$48 ;timer control register 1
 0049            TCTL2 = REGBS+$49 ;timer control register 2
 004A            TCTL3 = REGBS+$4A ;timer control register 3
 004B            TCTL4 = REGBS+$4B ;timer control register 4
 004C            TMSK1 = REGBS+$4C ;timer interrupt mask 1
 004D            TMSK2 = REGBS+$4D ;timer interrupt mask 2
 004E            TFLG1 = REGBS+$4E ;timer flags 1
 004F            TFLG2 = REGBS+$4F ;timer flags 2
 0050            TC0 = REGBS+$50 ;timer capture/comparregister 0
 0051            *TC0 = REGBS+$51 ;
 0052            TC1 = REGBS+$52 ;timer capture/comparregister 1
 0053            *TC1 = REGBS+$53 ;
 0054            TC2 = REGBS+$54 ;timer capture/comparregister 2
 0055            *TC2 = REGBS+$55 ;
 0056            TC3 = REGBS+$56 ;timer capture/comparregister 3
 0057            *TC3 = REGBS+$57 ;
 0058            TC4 = REGBS+$58 ;timer capture/comparregister 4
 0059            *TC4 = REGBS+$59 ;
 005A            TC5 = REGBS+$5A ;timer capture/comparregister 5
 005B            *TC5 = REGBS+$5B ;
 005C            TC6 = REGBS+$5C ;timer capture/comparregister 6
 005D            *TC6 = REGBS+$5D ;
 005E            TC7 = REGBS+$5E ;timer capture/comparregister 7
 005F            *TC7 = REGBS+$5F ;
 0060            PACTL = REGBS+$60 ;pulse accumulator controls
 0061            PAFLG = REGBS+$61 ;pulse accumulator flags
 0062            PACN3 = REGBS+$62 ;pulse accumulator counter 3
 0063            PACN2 = REGBS+$63 ;pulse accumulator counter 2
 0064            PACN1 = REGBS+$64 ;pulse accumulator counter 1
 0065            PACN0 = REGBS+$65 ;pulse accumulator counter 0
 0066            MCCTL = REGBS+$66 ;Modulus down conunter control
 0067            MCFLG = REGBS+$67 ;down counter flags
 0068            ICPAR = REGBS+$68 ;Input pulse accumulatocontrol
 0069            DLYCT = REGBS+$69 ;Delay count to down counter
 006A            ICOVW = REGBS+$6A ;Input control overwrite register
 006B            ICSYS = REGBS+$6B ;Input control system control
--- 0000           
 006D            TIMTST = REGBS+$6D ;timer test register
--- 0000           
 0070            PBCTL = REGBS+$70 ; Pulse accumulatoB control
 0071            PBFLG = REGBS+$71 ; Pulse accumulatoB flags
 0072            PA3H = REGBS+$72 ; Pulse Accumulatoholding regist3
 0073            PA2H = REGBS+$73 ; Pulse Accumulatoholding regist2
 0074            PA1H = REGBS+$74 ; Pulse Accumulatoholding regist1
 0075            PA0H = REGBS+$75 ; Pulse Accumulatoholding regist0
 0076            MCCNT = REGBS+$76 ; Modulus down counter register
 0077            *MCCNTL = REGBS+$77 ; low byte
 0078            TCOH = REGBS+$78 ; Capture 0 holding register
 007A            TC1H = REGBS+$7A ; Capture 1 holding register
 007C            TC2H = REGBS+$7C ; Capture 2 holding register
 007E            TC3H = REGBS+$7E ; Capture 3 holding register
--- 0000           
 0080            ATD0CTL0 = REGBS+$80 ;ADC control 0 (reserved)
 0081            ATD0CTL1 = REGBS+$81 ;ADC control 1 (reserved)
 0082            ATD0CTL2 = REGBS+$82 ;ADC control 2
 0083            ATD0CTL3 = REGBS+$83 ;ADC control 3
 0084            ATD0CTL4 = REGBS+$84 ;ADC control 4
 0085            ATD0CTL5 = REGBS+$85 ;ADC control 5
 0086            ATD0STAT = REGBS+$86 ;ADC status register hi
 0087            *ATD0STAT = REGBS+$87 ;ADC status register lo
 0088            ATD0TEST = REGBS+$88 ;ADC test (reserved)
 0089            *ATD0TEST = REGBS+$89 ;
--- 0000           
 008D            ATD0DIEN = REGBS+$8D ;
--- 0000           
 008F            PORTAD = REGBS+$8F ;port ADC = input only
 0090            ADR00H = REGBS+$90 ;ADC result 0 register
 0092            ADR01H = REGBS+$92 ;ADC result 1 register
 0094            ADR02H = REGBS+$94 ;ADC result 2 register
 0096            ADR03H = REGBS+$96 ;ADC result 3 register
 0098            ADR04H = REGBS+$98 ;ADC result 4 register
 009A            ADR05H = REGBS+$9A ;ADC result 5 register
 009C            ADR06H = REGBS+$9C ;ADC result 6 register
 009E            ADR07H = REGBS+$9E ;ADC result 7 register
--- 0000           
 00A0            PWME = REGBS+$A0 ;PWM enable
 00A1            PWMPOL = REGBS+$A1 ;PWM polarity
 00A2            PWMCLK = REGBS+$A2 ;PWM clock select register
 00A3            PWMPRCLK = REGBS+$A3 ;PWM Prescale clock select register
 00A4            PWMCAE = REGBS+$A4 ;PWM center align select register
 00A5            PWMCTL = REGBS+$A5 ;PWM control register
 00A6            PWMTST = REGBS+$A6 ;reserved
 00A7            PWMPRSC = REGBS+$A7 ;reserved
 00A8            PWMSCLA = REGBS+$A8 ;PWM Scale A
 00A9            PWMSCLB = REGBS+$A9 ;PWM scale B
 00AA            PWMSCNTA = REGBS+$AA ;reserved
 00AB            PWMSCNTB = REGBS+$AB ;reserved
 00AC            PWMCNT0 = REGBS+$AC ;PWM channel 0 counter
 00AD            PWMCNT1 = REGBS+$AD ;PWM channel 1 counter
 00AE            PWMCNT2 = REGBS+$AE ;PWM channel 2 counter
 00AF            PWMCNT3 = REGBS+$AF ;PWM channel 3 counter
 00B0            PWMCNT4 = REGBS+$B0 ;PWM channel 4 counter
 00B1            PWMCNT5 = REGBS+$B1 ;PWM channel 5 counter
 00B2            PWMCNT6 = REGBS+$B2 ;PWM channel 6 counter
 00B3            PWMCNT7 = REGBS+$B3 ;PWM channel 7 counter
 00B4            PWMPER0 = REGBS+$B4 ;PWM channel 0 period
 00B5            PWMPER1 = REGBS+$B5 ;PWM channel 1 period
 00B6            PWMPER2 = REGBS+$B6 ;PWM channel 2 period
 00B7            PWMPER3 = REGBS+$B7 ;PWM channel 3 period
 00B8            PWMPER4 = REGBS+$B8 ;PWM channel 4 period
 00B9            PWMPER5 = REGBS+$B9 ;PWM channel 5 period
 00BA            PWMPER6 = REGBS+$BA ;PWM channel 6 period
 00BB            PWMPER7 = REGBS+$BB ;PWM channel 7 period
 00BC            PWMDTY0 = REGBS+$BC ;PWM channel 0 duty cycle
 00BD            PWMDTY1 = REGBS+$BD ;PWM channel 1 duty cycle
 00BE            PWMDTY2 = REGBS+$BE ;PWM channel 2 duty cycle
 00BF            PWMDTY3 = REGBS+$BF ;PWM channel 3 duty cycle
 00C0            PWMDTY4 = REGBS+$C0 ;PWM channel 0 duty cycle
 00C1            PWMDTY5 = REGBS+$C1 ;PWM channel 1 duty cycle
 00C2            PWMDTY6 = REGBS+$C2 ;PWM channel 2 duty cycle
 00C3            PWMDTY7 = REGBS+$C3 ;PWM channel 3 duty cycle
 00C4            PWMSDN = REGBS+$C4 ;PWM shutdown register
--- 0000           
 00C8            SC0BDH = REGBS+$C8 ;sci 0 baud reg hi byte
 00C9            SC0BDL = REGBS+$C9 ;sci 0 baud reg lo byte
 00CA            SC0CR1 = REGBS+$CA ;sci 0 control1 reg
 00CB            SC0CR2 = REGBS+$CB ;sci 0 control2 reg
 00CC            SC0SR1 = REGBS+$CC ;sci 0 status reg 1
 00CD            SC0SR2 = REGBS+$CD ;sci 0 status reg 2
 00CE            SC0DRH = REGBS+$CE ;sci 0 data reg hi
 00CF            SC0DRL = REGBS+$CF ;sci 0 data reg lo
 00D0            SC1BDH = REGBS+$D0 ;sci 1 baud reg hi byte
 00D1            SC1BDL = REGBS+$D1 ;sci 1 baud reg lo byte
 00D2            SC1CR1 = REGBS+$D2 ;sci 1 control1 reg
 00D3            SC1CR2 = REGBS+$D3 ;sci 1 control2 reg
 00D4            SC1SR1 = REGBS+$D4 ;sci 1 status reg 1
 00D5            SC1SR2 = REGBS+$D5 ;sci 1 status reg 2
 00D6            SC1DRH = REGBS+$D6 ;sci 1 data reg hi
 00D7            SC1DRL = REGBS+$D7 ;sci 1 data reg lo
 00D8            SPI0CR1 = REGBS+$D8 ;spi 0 control1 reg
 00D9            SPI0CR2 = REGBS+$D9 ;spi 0 control2 reg
 00DA            SPI0BR = REGBS+$DA ;spi 0 baud reg
 00DB            SPI0SR = REGBS+$DB ;spi 0 status reg hi
--- 0000           
 00DD            SP0DR = REGBS+$DD ;spi 0 data reg
--- 0000           
 00E0            IBAD = REGBS+$E0 ;I2C Bus address register
 00E1            IBFD = REGBS+$E1 ;I2C Bus fr=ency divider
 00E2            IBCR = REGBS+$E2 ;I2C Bus control register
 00E3            IBSR = REGBS+$E3 ;I2C Bus status register
 00E4            IBDR = REGBS+$E4 ;I2C Bus message data register
--- 0000           
 00E8            DLCBCR1 = REGBS+$E8 ;BDLC Control regsiter 1
 00E9            DLCBSVR = REGBS+$E9 ;BDLC State vector register
 00EA            DLCBCR2 = REGBS+$EA ;BDLC Control register 2
 00EB            DLCBDR = REGBS+$EB ;BDLC Data register
 00EC            DLCBARD = REGBS+$EC ;BDLC Analog delay register
 00ED            DLCBRSR = REGBS+$ED ;BDLC Rate select register
 00EE            DLCSCR = REGBS+$EE ;BDLC Control register
 00EF            DLCBSTAT = REGBS+$EF ;BDLC Status register
 00F0            SPI1CR1 = REGBS+$F0 ;spi 1 control1 reg
 00F1            SPI1CR2 = REGBS+$F1 ;spi 1 control2 reg
 00F2            SPI1BR = REGBS+$F2 ;spi 1 baud reg
 00F3            SPI1SR = REGBS+$F3 ;spi 1 status reg hi
--- 0000           
 00F5            SP1DR = REGBS+$F5 ;spi 1 data reg
--- 0000           
 00F8            SPI2CR1 = REGBS+$F8 ;spi 2 control1 reg
 00F9            SPI2CR2 = REGBS+$F9 ;spi 2 control2 reg
 00FA            SPI2BR = REGBS+$FA ;spi 2 baud reg
 00FB            SPI2SR = REGBS+$FB ;spi 2 status reg hi
--- 0000           
 00FD            SP2DR = REGBS+$FD ;spi 2 data reg
--- 0000           
 0100            FCLKDIV = REGBS+$100 ;FLASH clock divider
 0101            FSEC = REGBS+$101 ;FLASH security register
--- 0000           
 0103            FCNFG = REGBS+$103 ;FLASH configuration register
 0104            FPROT = REGBS+$104 ;FLASH protection register
 0105            FSTAT = REGBS+$105 ;FLASH status register
 0106            FCMD = REGBS+$106 ;FLASH command register
--- 0000           
 0110            ECLKDIV = REGBS+$110 ;EEPROM clock divider
--- 0000           
 0113            ECNFG = REGBS+$113 ;EEPROM configuration register
 0114            EPROT = REGBS+$114 ;EEPROM protection register
 0115            ESTAT = REGBS+$115 ;EEPROM status register
 0116            ECMD = REGBS+$116 ;EEPROM command register
--- 0000           
 0120            ATD1CTL0 = REGBS+$120 ;ADC1 control 0 (reserved)
 0121            ATD1CTL1 = REGBS+$121 ;ADC1 control 1 (reserved)
 0122            ATD1CTL2 = REGBS+$122 ;ADC1 control 2
 0123            ATD1CTL3 = REGBS+$123 ;ADC1 control 3
 0124            ATD1CTL4 = REGBS+$124 ;ADC1 control 4
 0125            ATD1CTL5 = REGBS+$125 ;ADC1 control 5
 0126            ATD1STAT = REGBS+$126 ;ADC1 status register hi
 0127            *ATD1STAT = REGBS+$127 ;ADC1 status register lo
 0128            ATD1TEST = REGBS+$128 ;ADC1 test (reserved)
 0129            *ATD1TEST = REGBS+$129 ;
--- 0000           
 012D            ATDDIEN = REGBS+$12D ;ADC1 INPUT ENABLE REGISTER
--- 0000           
 012F            PORTAD1 = REGBS+$12F ;port ADC1 = input only
 0130            ADR10H = REGBS+$130 ;ADC1 result 0 register
 0132            ADR11H = REGBS+$132 ;ADC1 result 1 register
 0134            ADR12H = REGBS+$134 ;ADC1 result 2 register
 0136            ADR13H = REGBS+$136 ;ADC1 result 3 register
 0138            ADR14H = REGBS+$138 ;ADC1 result 4 register
 013A            ADR15H = REGBS+$13A ;ADC1 result 5 register
 013C            ADR16H = REGBS+$13C ;ADC1 result 6 register
 013E            ADR17H = REGBS+$13E ;ADC1 result 7 register
 0140            CAN0CTL0 = REGBS+$140 ;CAN0 control register 0
 0141            CAN0CTL1 = REGBS+$141 ;CAN0 control register 1
 0142            CAN0BTR0 = REGBS+$142 ;CAN0 bus timing register 0
 0143            CAN0BTR1 = REGBS+$143 ;CAN0 bus timing register 1
 0144            CAN0RFLG = REGBS+$144 ;CAN0 receiver flags
 0145            CAN0RIER = REGBS+$145 ;CAN0 receiver interrupt enables
 0146            CAN0TFLG = REGBS+$146 ;CAN0 transmit flags
 0147            CAN0TIER = REGBS+$147 ;CAN0 transmit interrupt enables
 0148            CAN0TARQ = REGBS+$148 ;CAN0 transmit message abort control
 0149            CAN0TAAK = REGBS+$149 ;CAN0 transmit message abort status
 014A            CAN0TBEL = REGBS+$14A ;CAN0 transmit buffer select
 014B            CAN0IDAC = REGBS+$14B ;CAN0 identfier acceptancecontrol
--- 0000           
 014E            CAN0RERR = REGBS+$14E ;CAN0 Receive error counter
 014F            CAN0TERR = REGBS+$14F ;CAN0 Transmit error counter
 0150            CAN0IDA0 = REGBS+$150 ;CAN0 Identifier acceptanceregister 0
 0151            CAN0IDA1 = REGBS+$151 ;CAN0 Identifier acceptanceregister 1
 0152            CAN0IDA2 = REGBS+$152 ;CAN0 Identifier acceptanceregister 2
 0153            CAN0IDA3 = REGBS+$153 ;CAN0 Identifier acceptanceregister 3
 0154            CAN0IDM0 = REGBS+$154 ;CAN0 Identifier mask register 0
 0155            CAN0IDM1 = REGBS+$155 ;CAN0 Identifier mask register 1
 0156            CAN0IDM2 = REGBS+$156 ;CAN0 Identifier mask register 2
 0157            CAN0IDM3 = REGBS+$157 ;CAN0 Identifier mask register 3
 0158            CAN0IDA4 = REGBS+$158 ;CAN0 Identifier acceptanceregister 4
 0159            CAN0IDA5 = REGBS+$159 ;CAN0 Identifier acceptanceregister 5
 015A            CAN0IDA6 = REGBS+$15A ;CAN0 Identifier acceptanceregister 6
 015B            CAN0IDA7 = REGBS+$15B ;CAN0 Identifier acceptanceregister 7
 015C            CAN0IDM4 = REGBS+$15C ;CAN0 Identifier mask register 4
 015D            CAN0IDM5 = REGBS+$15D ;CAN0 Identifier mask register 5
 015E            CAN0IDM6 = REGBS+$15E ;CAN0 Identifier mask register 6
 015F            CAN0IDM7 = REGBS+$15F ;CAN0 Identifier mask register 7
 0160            CAN0RXFG = REGBS+$160 ;CAN0 RX foregroundbuffer thru +$16F
 0170            CAN0TXFG = REGBS+$170 ;CAN0 TX foregroundbuffer thru +$17F
--- 0000           
 0180            CAN1CTL0 = REGBS+$180 ;CAN1 control register 0
 0181            CAN1CTL1 = REGBS+$181 ;CAN1 control register 1
 0182            CAN1BTR0 = REGBS+$182 ;CAN1 bus timing register 0
 0183            CAN1BTR1 = REGBS+$183 ;CAN1 bus timing register 1
 0184            CAN1RFLG = REGBS+$184 ;CAN1 receiver flags
 0185            CAN1RIER = REGBS+$185 ;CAN1 receiver interrupt enables
 0186            CAN1TFLG = REGBS+$186 ;CAN1 transmit flags
 0187            CAN1TIER = REGBS+$187 ;CAN1 transmit interrupt enables
 0188            CAN1TARQ = REGBS+$188 ;CAN1 transmit message abort control
 0189            CAN1TAAK = REGBS+$189 ;CAN1 transmit message abort status
 018A            CAN1TBEL = REGBS+$18A ;CAN1 transmit buffer select
 018B            CAN1IDAC = REGBS+$18B ;CAN1 identfier acceptancecontrol
--- 0000           
 018E            CAN1RERR = REGBS+$18E ;CAN1 Receive error counter
 018F            CAN1TERR = REGBS+$18F ;CAN1 Transmit error counter
 0190            CAN1IDA0 = REGBS+$190 ;CAN1 Identifier acceptanceregister 0
 0191            CAN1IDA1 = REGBS+$191 ;CAN1 Identifier acceptanceregister 1
 0192            CAN1IDA2 = REGBS+$192 ;CAN1 Identifier acceptanceregister 2
 0193            CAN1IDA3 = REGBS+$193 ;CAN1 Identifier acceptanceregister 3
 0194            CAN1IDM0 = REGBS+$194 ;CAN1 Identifier mask register 0
 0195            CAN1IDM1 = REGBS+$195 ;CAN1 Identifier mask register 1
 0196            CAN1IDM2 = REGBS+$196 ;CAN1 Identifier mask register 2
 0197            CAN1IDM3 = REGBS+$197 ;CAN1 Identifier mask register 3
 0198            CAN1IDA4 = REGBS+$198 ;CAN1 Identifier acceptanceregister 4
 0199            CAN1IDA5 = REGBS+$199 ;CAN1 Identifier acceptanceregister 5
 019A            CAN1IDA6 = REGBS+$19A ;CAN1 Identifier acceptanceregister 6
 019B            CAN1IDA7 = REGBS+$19B ;CAN1 Identifier acceptanceregister 7
 019C            CAN1IDM4 = REGBS+$19C ;CAN1 Identifier mask register 4
 019D            CAN1IDM5 = REGBS+$19D ;CAN1 Identifier mask register 5
 019E            CAN1IDM6 = REGBS+$19E ;CAN1 Identifier mask register 6
 019F            CAN1IDM7 = REGBS+$19F ;CAN1 Identifier mask register 7
 01A0            CAN1RXFG = REGBS+$1A0 ;CAN1 RX foregroundbuffer thru +$1AF
 01B0            CAN1TXFG = REGBS+$1B0 ;CAN1 TX foregroundbuffer thru +$1BF
--- 0000           
 01C0            CAN2CTL0 = REGBS+$1C0 ;CAN2 control register 0
 01C1            CAN2CTL1 = REGBS+$1C1 ;CAN2 control register 1
 01C2            CAN2BTR0 = REGBS+$1C2 ;CAN2 bus timing register 0
 01C3            CAN2BTR1 = REGBS+$1C3 ;CAN2 bus timing register 1
 01C4            CAN2RFLG = REGBS+$1C4 ;CAN2 receiver flags
 01C5            CAN2RIER = REGBS+$1C5 ;CAN2 receiver interrupt enables
 01C6            CAN2TFLG = REGBS+$1C6 ;CAN2 transmit flags
 01C7            CAN2TIER = REGBS+$1C7 ;CAN2 transmit interrupt enables
 01C8            CAN2TARQ = REGBS+$1C8 ;CAN2 transmit message abort control
 01C9            CAN2TAAK = REGBS+$1C9 ;CAN2 transmit message abort status
 01CA            CAN2TBEL = REGBS+$1CA ;CAN2 transmit buffer select
 01CB            CAN2IDAC = REGBS+$1CB ;CAN2 identfier acceptancecontrol
--- 0000           
 01CE            CAN2RERR = REGBS+$1CE ;CAN2 Receive error counter
 01CF            CAN2TERR = REGBS+$1CF ;CAN2 Transmit error counter
 01D0            CAN2IDA0 = REGBS+$1D0 ;CAN2 Identifier acceptanceregister 0
 01D1            CAN2IDA1 = REGBS+$1D1 ;CAN2 Identifier acceptanceregister 1
 01D2            CAN2IDA2 = REGBS+$1D2 ;CAN2 Identifier acceptanceregister 2
 01D3            CAN2IDA3 = REGBS+$1D3 ;CAN2 Identifier acceptanceregister 3
 01D4            CAN2IDM0 = REGBS+$1D4 ;CAN2 Identifier mask register 0
 01D5            CAN2IDM1 = REGBS+$1D5 ;CAN2 Identifier mask register 1
 01D6            CAN2IDM2 = REGBS+$1D6 ;CAN2 Identifier mask register 2
 01D7            CAN2IDM3 = REGBS+$1D7 ;CAN2 Identifier mask register 3
 01D8            CAN2IDA4 = REGBS+$1D8 ;CAN2 Identifier acceptanceregister 4
 01D9            CAN2IDA5 = REGBS+$1D9 ;CAN2 Identifier acceptanceregister 5
 01DA            CAN2IDA6 = REGBS+$1DA ;CAN2 Identifier acceptanceregister 6
 01DB            CAN2IDA7 = REGBS+$1DB ;CAN2 Identifier acceptanceregister 7
 01DC            CAN2IDM4 = REGBS+$1DC ;CAN2 Identifier mask register 4
 01DD            CAN2IDM5 = REGBS+$1DD ;CAN2 Identifier mask register 5
 01DE            CAN2IDM6 = REGBS+$1DE ;CAN2 Identifier mask register 6
 01DF            CAN2IDM7 = REGBS+$1DF ;CAN2 Identifier mask register 7
 01E0            CAN2RXFG = REGBS+$1E0 ;CAN2 RX foregroundbuffer thru +$1EF
 01F0            CAN2TXFG = REGBS+$1F0 ;CAN2 TX foregroundbuffer thru +$1FF
--- 0000           
 0200            CAN3CTL0 = REGBS+$200 ;CAN3 control register 0
 0201            CAN3CTL1 = REGBS+$201 ;CAN3 control register 1
 0202            CAN3BTR0 = REGBS+$202 ;CAN3 bus timing register 0
 0203            CAN3BTR1 = REGBS+$203 ;CAN3 bus timing register 1
 0204            CAN3RFLG = REGBS+$204 ;CAN3 receiver flags
 0205            CAN3RIER = REGBS+$205 ;CAN3 receiver interrupt enables
 0206            CAN3TFLG = REGBS+$206 ;CAN3 transmit flags
 0207            CAN3TIER = REGBS+$207 ;CAN3 transmit interrupt enables
 0208            CAN3TARQ = REGBS+$208 ;CAN3 transmit message abort control
 0209            CAN3TAAK = REGBS+$209 ;CAN3 transmit message abort status
 020A            CAN3TBEL = REGBS+$20A ;CAN3 transmit buffer select
 020B            CAN3IDAC = REGBS+$20B ;CAN3 identfier acceptancecontrol
--- 0000           
 020E            CAN3RERR = REGBS+$20E ;CAN3 Receive error counter
 020F            CAN3TERR = REGBS+$20F ;CAN3 Transmit error counter
 0210            CAN3IDA0 = REGBS+$210 ;CAN3 Identifier acceptanceregister 0
 0211            CAN3IDA1 = REGBS+$211 ;CAN3 Identifier acceptanceregister 1
 0212            CAN3IDA2 = REGBS+$212 ;CAN3 Identifier acceptanceregister 2
 0213            CAN3IDA3 = REGBS+$213 ;CAN3 Identifier acceptanceregister 3
 0214            CAN3IDM0 = REGBS+$214 ;CAN3 Identifier mask register 0
 0215            CAN3IDM1 = REGBS+$215 ;CAN3 Identifier mask register 1
 0216            CAN3IDM2 = REGBS+$216 ;CAN3 Identifier mask register 2
 0217            CAN3IDM3 = REGBS+$217 ;CAN3 Identifier mask register 3
 0218            CAN3IDA4 = REGBS+$218 ;CAN3 Identifier acceptanceregister 4
 0219            CAN3IDA5 = REGBS+$219 ;CAN3 Identifier acceptanceregister 5
 021A            CAN3IDA6 = REGBS+$21A ;CAN3 Identifier acceptanceregister 6
 021B            CAN3IDA7 = REGBS+$21B ;CAN3 Identifier acceptanceregister 7
 021C            CAN3IDM4 = REGBS+$21C ;CAN3 Identifier mask register 4
 021D            CAN3IDM5 = REGBS+$21D ;CAN3 Identifier mask register 5
 021E            CAN3IDM6 = REGBS+$21E ;CAN3 Identifier mask register 6
 021F            CAN3IDM7 = REGBS+$21F ;CAN3 Identifier mask register 7
 0220            CAN3RXFG = REGBS+$220 ;CAN3 RX foregroundbuffer thru +$22F
 0230            CAN3TXFG = REGBS+$230 ;CAN3 TX foregroundbuffer thru +$23F
--- 0000           
 0240            PTT = REGBS+$240 ;portT data register
 0241            PTIT = REGBS+$241 ;portT input register
 0242            DDRT = REGBS+$242 ;portT direction register
 0243            RDRT = REGBS+$243 ;portT reduced drive register
 0244            PERT = REGBS+$244 ;portT pull device enable
 0245            PPST = REGBS+$245 ;portT pull polarity select
--- 0000           
 0248            PTS = REGBS+$248 ;portS data register
 0249            PTIS = REGBS+$249 ;portS input register
 024A            DDRS = REGBS+$24A ;portS direction register
 024B            RDRS = REGBS+$24B ;portS reduced drive register
 024C            PERS = REGBS+$24C ;portS pull device enable
 024D            PPSS = REGBS+$24D ;portS pull polarity select
 024E            WOMS = REGBS+$24E ;portS Wired Or mode register
--- 0000           
 0250            PTM = REGBS+$250 ;portM data register
 0251            PTIM = REGBS+$251 ;portM input register
 0252            DDRM = REGBS+$252 ;portM direction register
 0253            RDRM = REGBS+$253 ;portM reduced drive register
 0254            PERM = REGBS+$254 ;portM pull device enable
 0255            PPSM = REGBS+$255 ;portM pull polarity select
 0256            WOMM = REGBS+$256 ;portM Wired Or mode register
 0257            MODRR = REGBS+$257 ;portM Module routing register
 0258            PTP = REGBS+$258 ;portP data register
 0259            PTIP = REGBS+$259 ;portP input register
 025A            DDRP = REGBS+$25A ;portP direction register
 025B            RDRP = REGBS+$25B ;portP reduced drive register
 025C            PERP = REGBS+$25C ;portP pull device enable
 025D            PPSP = REGBS+$25D ;portP pull polarity select
 025E            PIEP = REGBS+$25E ;portP interrupt enable register
 025F            PIFP = REGBS+$25F ;portP interrupt flag register
 0260            PTH = REGBS+$260 ;portH data register
 0261            PTIH = REGBS+$261 ;portH input register
 0262            DDRH = REGBS+$262 ;portH direction register
 0263            RDRH = REGBS+$263 ;portH reduced drive register
 0264            PERH = REGBS+$264 ;portH pull device enable
 0265            PPSH = REGBS+$265 ;portH pull polarity select
 0266            PIEH = REGBS+$266 ;portH interrupt enable register
 0267            PIFH = REGBS+$267 ;portH interrupt flag register
 0268            PTJ = REGBS+$268 ;portP data register
 0269            PTIJ = REGBS+$269 ;portP input register
 026A            DDRJ = REGBS+$26A ;portP direction register
 026B            RDRJ = REGBS+$26B ;portP reduced drive register
 026C            PERJ = REGBS+$26C ;portP pull device enable
 026D            PPSJ = REGBS+$26D ;portP pull polarity select
 026E            PIEJ = REGBS+$26E ;portP interrupt enable register
 026F            PIFJ = REGBS+$26F ;portP interrupt flag register
--- 0000           
 0280            CAN4CTL0 = REGBS+$280 ;CAN4 control register 0
 0281            CAN4CTL1 = REGBS+$281 ;CAN4 control register 1
 0282            CAN4BTR0 = REGBS+$282 ;CAN4 bus timing register 0
 0283            CAN4BTR1 = REGBS+$283 ;CAN4 bus timing register 1
 0284            CAN4RFLG = REGBS+$284 ;CAN4 receiver flags
 0285            CAN4RIER = REGBS+$285 ;CAN4 receiver interrupt enables
 0286            CAN4TFLG = REGBS+$286 ;CAN4 transmit flags
 0287            CAN4TIER = REGBS+$287 ;CAN4 transmit interrupt enables
 0288            CAN4TARQ = REGBS+$288 ;CAN4 transmit message abort control
 0289            CAN4TAAK = REGBS+$289 ;CAN4 transmit message abort status
 028A            CAN4TBEL = REGBS+$28A ;CAN4 transmit buffer select
 028B            CAN4IDAC = REGBS+$28B ;CAN4 identfier acceptancecontrol
--- 0000           
 028E            CAN4RERR = REGBS+$28E ;CAN4 Receive error counter
 028F            CAN4TERR = REGBS+$28F ;CAN4 Transmit error counter
 0290            CAN4IDA0 = REGBS+$290 ;CAN4 Identifier acceptanceregister 0
 0291            CAN4IDA1 = REGBS+$291 ;CAN4 Identifier acceptanceregister 1
 0292            CAN4IDA2 = REGBS+$292 ;CAN4 Identifier acceptanceregister 2
 0293            CAN4IDA3 = REGBS+$293 ;CAN4 Identifier acceptanceregister 3
 0294            CAN4IDM0 = REGBS+$294 ;CAN4 Identifier mask register 0
 0295            CAN4IDM1 = REGBS+$295 ;CAN4 Identifier mask register 1
 0296            CAN4IDM2 = REGBS+$296 ;CAN4 Identifier mask register 2
 0297            CAN4IDM3 = REGBS+$297 ;CAN4 Identifier mask register 3
 0298            CAN4IDA4 = REGBS+$298 ;CAN4 Identifier acceptanceregister 4
 0299            CAN4IDA5 = REGBS+$299 ;CAN4 Identifier acceptanceregister 5
 029A            CAN4IDA6 = REGBS+$29A ;CAN4 Identifier acceptanceregister 6
 029B            CAN4IDA7 = REGBS+$29B ;CAN4 Identifier acceptanceregister 7
 029C            CAN4IDM4 = REGBS+$29C ;CAN4 Identifier mask register 4
 029D            CAN4IDM5 = REGBS+$29D ;CAN4 Identifier mask register 5
 029E            CAN4IDM6 = REGBS+$29E ;CAN4 Identifier mask register 6
 029F            CAN4IDM7 = REGBS+$29F ;CAN4 Identifier mask register 7
 02A0            CAN4RXFG = REGBS+$2A0 ;CAN4 RX foregroundbuffer thru +$2AF
 02B0            CAN4TXFG = REGBS+$2B0 ;CAN4 TX foregroundbuffer thru +$2BF
