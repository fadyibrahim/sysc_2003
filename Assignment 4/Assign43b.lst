WARNING: EXTCODE CODE AREA DO NOT CONTAIN RELOCATED ADDRESSES.
THIS WILL BE REMEDIED IN A LATER RELEASE.
                        .module Assign43b.C
                        .area memory(abs)
                        .org 0x3f8c
 3F8C            _interrupt_vectors::
 3F8C  F8CF              .word 63695
 3F8E  F8CF              .word 63695
 3F90  F8CF              .word 63695
 3F92  F8CF              .word 63695
 3F94  F8CF              .word 63695
 3F96  F8CF              .word 63695
 3F98  F8CF              .word 63695
 3F9A  F8CF              .word 63695
 3F9C  F8CF              .word 63695
 3F9E  F8CF              .word 63695
 3FA0  F8CF              .word 63695
 3FA2  F8CF              .word 63695
 3FA4  F8CF              .word 63695
 3FA6  F8CF              .word 63695
 3FA8  F8CF              .word 63695
 3FAA  F8CF              .word 63695
 3FAC  F8CF              .word 63695
 3FAE  F8CF              .word 63695
 3FB0  F8CF              .word 63695
 3FB2  F8CF              .word 63695
 3FB4  F8CF              .word 63695
 3FB6  F8CF              .word 63695
 3FB8  F8CF              .word 63695
 3FBA  F8CF              .word 63695
 3FBC  F8CF              .word 63695
 3FBE  F8CF              .word 63695
 3FC0  F8CF              .word 63695
 3FC2  F8CF              .word 63695
 3FC4  F8CF              .word 63695
 3FC6  F8CF              .word 63695
 3FC8  F8CF              .word 63695
 3FCA  F8CF              .word 63695
 3FCC  F8CF              .word 63695
 3FCE  F8CF              .word 63695
 3FD0  F8CF              .word 63695
 3FD2  F8CF              .word 63695
 3FD4  F8CF              .word 63695
 3FD6  F8CF              .word 63695
 3FD8  F8CF              .word 63695
 3FDA  F8CF              .word 63695
 3FDC  F8CF              .word 63695
 3FDE  F8CF              .word 63695
 3FE0  F8CF              .word 63695
 3FE2  F8CF              .word 63695
 3FE4  F8CF              .word 63695
 3FE6  F8CF              .word 63695
 3FE8  F8CF              .word 63695
 3FEA  F8CF              .word 63695
 3FEC  F8CF              .word 63695
 3FEE  F8CF              .word 63695
 3FF0  4031              .word _CollisionDetect
 3FF2  F8CF              .word 63695
 3FF4  F8C7              .word 63687
 3FF6  F8C3              .word 63683
 3FF8  F8CB              .word 63691
 3FFA  F805              .word 63493
 3FFC  F809              .word 63497
 3FFE  4000              .word __start
 4000                    .dbfile M:\Sysc 2003\Assignment 4/vectors_dp256_NoICE.c
 4000                    .dbsym e interrupt_vectors _interrupt_vectors A[116:58]pfV
                        .area data
--- 0000                   .dbfile M:\Sysc 2003\Assignment 4/vectors_dp256_NoICE.c
 1000            _x::
 1000                    .blkb 2
                        .area idata
--- 0000 0001              .word 1
                        .area data
--- 0002                   .dbfile M:\Sysc 2003\Assignment 4/vectors_dp256_NoICE.c
--- 0002                   .dbfile Assign43b.C
--- 0002                   .dbsym e x _x I
 1002            _motorOn::
 1002                    .blkb 2
                        .area idata
--- 0002 0001              .word 1
                        .area data
--- 0004                   .dbfile Assign43b.C
--- 0004                   .dbsym e motorOn _motorOn I
                        .area text
--- 0000                   .dbfile Assign43b.C
--- 0000                   .dbfunc e main _main fV
 402A            _main::
 402A                    .dbline -1
 402A                    .dbline 14
 402A            ; /*
 402A            ; Authors Fady Ibrahim 100876906, Gavez Smith 100857991 
 402A            ; */
 402A            ; #include<stdio.h>
 402A            ; #include "hcs12dp256.h"
 402A            ; #include "vectors_dp256_NoICE.c"
 402A            ; void delay();
 402A            ; void printKeysPressed();
 402A            ; int x=1;
 402A            ; int motorOn=1;
 402A            ; 
 402A            ; 
 402A            ; void main(void)
 402A            ; {
 402A                    .dbline 15
 402A            ; SPI1CR1=0;
 402A  7900F0            clr 0xf0
 402D                    .dbline 17
 402D            ; 
 402D            ; printKeysPressed();
 402D  1640F7            jsr _printKeysPressed
 4030                    .dbline -2
 4030                    .dbline 18
 4030            ; }
 4030            L3:
 4030                    .dbline 0 ; func end
 4030  3D                rts
 4031                    .dbend
 4031                    .dbfunc e CollisionDetect _CollisionDetect fV
 4031            ;      clockwise -> -4,x
 4031            _CollisionDetect::
 4031  34                pshx
 4032  B775              tfr s,x
 4034  1B9C              leas -4,sp
 4036                    .dbline -1
 4036                    .dbline 26
 4036            ; #pragma interrupt_handler CollisionDetect()
 4036            ; 
 4036            ; /*
 4036            ; This function is the Real-Time ISR and interruts the program when the user presses 5 on the keyboard. It executes the
 4036            ; interrupt turns off the dc motor waits 3-4 second and turns the steppor motor then afterwards it turns on the dc motor again.
 4036            ; */
 4036            ;  void CollisionDetect(void)
 4036            ; {
 4036                    .dbline 28
 4036            ; 
 4036            ;       if(motorOn==1)
 4036  FC1002            ldd _motorOn
 4039  8C0001            cpd #1
 403C  260A              bne L5
 403E                    .dbline 29
 403E            ;       {
 403E                    .dbline 30
 403E            ;       motorOn=0;
 403E  CC0000            ldd #0
 4041  7C1002            std _motorOn
 4044                    .dbline 31
 4044            ;       PTP=PTP & 0x7F;
 4044  1D025880          bclr 0x258,#0x80
 4048                    .dbline 32
 4048            ;       }       
 4048            L5:
 4048                    .dbline 33
 4048            ; if (x==24)
 4048  FC1000            ldd _x
 404B  8C0018            cpd #24
 404E  265D              bne L7
 4050                    .dbline 34
 4050            ; {
 4050                    .dbline 35
 4050            ; double clockwise =0;   //counter clockwise incrementer
 4050  CD4208            ldy #L9
 4053  164378            jsr __tofp1
 4056  191C              leay -4,x
 4058  164370            jsr __fromfp1
 405B                    .dbline 37
 405B            ; 
 405B            ;       DDRP = 0xF0;//enable port P for the stepper motor
 405B  C6F0              ldab #240
 405D  7B025A            stab 0x25a
 4060                    .dbline 38
 4060            ;       PTP = 0x20;
 4060  C620              ldab #32
 4062  7B0258            stab 0x258
 4065                    .dbline 39
 4065            ;       DDRT = 0xF0;//enable the bottom and left coils for the stepper motor
 4065  C6F0              ldab #240
 4067  7B0242            stab 0x242
 406A  2031              bra L11
 406C            L10:
 406C                    .dbline 41
 406C                    .dbline 42
 406C  C680              ldab #128
 406E  7B0240            stab 0x240
 4071                    .dbline 43
 4071  1640D6            jsr _delay
 4074                    .dbline 44
 4074  C620              ldab #32
 4076  7B0240            stab 0x240
 4079                    .dbline 45
 4079  1640D6            jsr _delay
 407C                    .dbline 46
 407C  C640              ldab #64
 407E  7B0240            stab 0x240
 4081                    .dbline 47
 4081  1640D6            jsr _delay
 4084                    .dbline 48
 4084  790240            clr 0x240
 4087                    .dbline 49
 4087  1640D6            jsr _delay
 408A                    .dbline 50
 408A  191C              leay -4,x
 408C  164378            jsr __tofp1
 408F  CD4204            ldy #L13
 4092  164380            jsr __tofp2
 4095  1643A1            jsr __fpadd
 4098  191C              leay -4,x
 409A  164370            jsr __fromfp1
 409D                    .dbline 51
 409D            L11:
 409D                    .dbline 41
 409D            ;       
 409D            ;       while(clockwise<=1){//spin the stepper motor clockwise
 409D  191C              leay -4,x
 409F  164378            jsr __tofp1
 40A2  CD4204            ldy #L13
 40A5  164380            jsr __tofp2
 40A8  1644BC            jsr __fpcmp
 40AB  2FBF              ble L10
 40AD                    .dbline 52
 40AD            ;          PTT = 0x80;
 40AD            ;          delay();
 40AD            ;          PTT = 0x20;
 40AD            ;          delay();
 40AD            ;          PTT = 0x40;
 40AD            ;          delay();
 40AD            ;          PTT = 0x00;
 40AD            ;          delay();
 40AD            ;          clockwise++;
 40AD            ;       }
 40AD            ; }
 40AD            L7:
 40AD                    .dbline 53
 40AD            ; if (x==40)
 40AD  FC1000            ldd _x
 40B0  8C0028            cpd #40
 40B3  2610              bne L14
 40B5                    .dbline 54
 40B5            ; {
 40B5                    .dbline 55
 40B5            ;       motorOn=1;
 40B5  CC0001            ldd #1
 40B8  7C1002            std _motorOn
 40BB                    .dbline 56
 40BB            ;       x=0;
 40BB  CC0000            ldd #0
 40BE  7C1000            std _x
 40C1                    .dbline 57
 40C1            ;       CRGINT= CRGINT & 0x7F;
 40C1  1D003880          bclr 0x38,#0x80
 40C5                    .dbline 58
 40C5            ; }
 40C5            L14:
 40C5                    .dbline 59
 40C5            ;  CRGFLG|= 0x80;
 40C5  1C003780          bset 0x37,#128
 40C9                    .dbline 60
 40C9            ; x++;
 40C9  FC1000            ldd _x
 40CC  C30001            addd #1
 40CF  7C1000            std _x
 40D2                    .dbline -2
 40D2                    .dbline 61
 40D2            ; } 
 40D2            L4:
 40D2  B757              tfr x,s
 40D4  30                pulx
 40D5                    .dbline 0 ; func end
 40D5  0B                rti
 40D6                    .dbsym l clockwise -4 D
 40D6                    .dbend
 40D6                    .dbfunc e delay _delay fV
 40D6            ;              i -> -2,x
 40D6            _delay::
 40D6  34                pshx
 40D7  B775              tfr s,x
 40D9  1B9E              leas -2,sp
 40DB                    .dbline -1
 40DB                    .dbline 63
 40DB            ; 
 40DB            ; void delay(){//delay for a considerable 10 ms
 40DB                    .dbline 64
 40DB            ;    int i = 0;   //counter
 40DB  CC0000            ldd #0
 40DE  6C1E              std -2,x
 40E0                    .dbline 65
 40E0  CC0000            ldd #0
 40E3  6C1E              std -2,x
 40E5            L17:
 40E5                    .dbline 65
 40E5                    .dbline 66
 40E5            L18:
 40E5                    .dbline 65
 40E5            ;    for(i=0; i<10000; i++){
 40E5  EC1E              ldd -2,x
 40E7  C30001            addd #1
 40EA  6C1E              std -2,x
 40EC                    .dbline 65
 40EC  EC1E              ldd -2,x
 40EE  8C2710            cpd #10000
 40F1  2DF2              blt L17
 40F3                    .dbline -2
 40F3                    .dbline 67
 40F3            ;    }
 40F3            ; }
 40F3            L16:
 40F3  B757              tfr x,s
 40F5  30                pulx
 40F6                    .dbline 0 ; func end
 40F6  3D                rts
 40F7                    .dbsym l i -2 I
 40F7                    .dbend
 40F7                    .dbfunc e printKeysPressed _printKeysPressed fV
 40F7            ;        counter -> -7,x
 40F7            ;           loop -> -5,x
 40F7            ;     keypressed -> -3,x
 40F7            ;              i -> -2,x
 40F7            _printKeysPressed::
 40F7  34                pshx
 40F8  B775              tfr s,x
 40FA  1B98              leas -8,sp
 40FC                    .dbline -1
 40FC                    .dbline 72
 40FC            ; 
 40FC            ; /*
 40FC            ; checks to see if key 5 is pressed if it is enable the realtime interrupt, else keep the dc motor running.
 40FC            ; */
 40FC            ; void printKeysPressed(){
 40FC                    .dbline 73
 40FC            ;       int i=0;
 40FC  CC0000            ldd #0
 40FF  6C1E              std -2,x
 4101                    .dbline 74
 4101            ;       int loop=0;
 4101  CC0000            ldd #0
 4104  6C1B              std -5,x
 4106                    .dbline 75
 4106            ;       char keypressed=0;
 4106  691D              clr -3,x
 4108                    .dbline 76
 4108            ;       int counter=1;
 4108  CC0001            ldd #1
 410B  6C19              std -7,x
 410D                    .dbline 78
 410D            ; 
 410D            ;       printf("No Obstacle detected!!! (press 5 to detect obstacle)\n");       
 410D  CC41CE            ldd #L22
 4110  164B74            jsr _printf
 4113                    .dbline 79
 4113            ;       SPI1CR1=0x00;
 4113  7900F0            clr 0xf0
 4116  205D              bra L24
 4118            L23:
 4118                    .dbline 83
 4118            ; 
 4118            ; 
 4118            ;       while (loop==0)
 4118            ;       {
 4118                    .dbline 85
 4118            ;       // turns on the motor and the the output pins for the rows on the keypad.
 4118            ;       DDRP=0x8F;
 4118  C68F              ldab #143
 411A  7B025A            stab 0x25a
 411D                    .dbline 87
 411D            ;       //turns on the collums.
 411D            ;       DDRH=0x00;      
 411D  790262            clr 0x262
 4120                    .dbline 88
 4120            ;       PTM = 0x08;
 4120  C608              ldab #8
 4122  7B0250            stab 0x250
 4125                    .dbline 89
 4125            ;       if(motorOn==1)
 4125  FC1002            ldd _motorOn
 4128  8C0001            cpd #1
 412B  2604              bne L26
 412D                    .dbline 90
 412D            ;       {
 412D                    .dbline 91
 412D            ;       PTP=PTP | 0x80;
 412D  1C025880          bset 0x258,#128
 4131                    .dbline 92
 4131            ;       }                                                       
 4131            L26:
 4131                    .dbline 93
 4131            ;       keypressed=PTH;
 4131                    ; vol
 4131  F60260            ldab 0x260
 4134  6B1D              stab -3,x
 4136                    .dbline 94
 4136            ;       PTP= PTP | 0x02;
 4136  1C025802          bset 0x258,#2
 413A                    .dbline 95
 413A            ;       PTM =PTM & 0x00;
 413A  CC0000            ldd #0
 413D  7B0250            stab 0x250
 4140                    .dbline 96
 4140            ;       keypressed &= 0xF0;
 4140  0D1D0F            bclr -3,x,#0xf
 4143                    .dbline 98
 4143            ;       
 4143            ;       if (keypressed==0x20 && PTP==0x82)
 4143  E61D              ldab -3,x
 4145  C120              cmpb #32
 4147  2619              bne L28
 4149                    ; vol
 4149  F60258            ldab 0x258
 414C  C182              cmpb #130
 414E  2612              bne L28
 4150                    .dbline 99
 4150            ;       {
 4150                    .dbline 100
 4150            ;       printf ("Obstacle detected. Robot turing right in three seconds (Look at stepper motor)!\n");   
 4150  CC417D            ldd #L30
 4153  164B74            jsr _printf
 4156                    .dbline 101
 4156            ;       CRGINT=0x80; //enable realtime interrupt
 4156  C680              ldab #128
 4158  7B0038            stab 0x38
 415B                    .dbline 102
 415B            ;       RTICTL=0x7F;// set the period frequency.
 415B  C67F              ldab #127
 415D  7B003B            stab 0x3b
 4160                    .dbline 103
 4160            ;       asm("cli");
 4160  10EF                      cli
 4162            
 4162                    .dbline 104
 4162            ;       }
 4162            L28:
 4162                    .dbline 107
 4162  CC0000            ldd #0
 4165  6C1E              std -2,x
 4167            L31:
 4167                    .dbline 107
 4167            L32:
 4167                    .dbline 107
 4167  EC1E              ldd -2,x
 4169  C30001            addd #1
 416C  6C1E              std -2,x
 416E                    .dbline 107
 416E  EC1E              ldd -2,x
 4170  8C7530            cpd #30000
 4173  2DF2              blt L31
 4175                    .dbline 110
 4175            L24:
 4175                    .dbline 82
 4175  EC1B              ldd -5,x
 4177  279F              beq L23
 4179                    .dbline -2
 4179                    .dbline 112
 4179            ; 
 4179            ;       
 4179            ;       for ( i=0;i<30000;i++);
 4179            ;       
 4179            ; 
 4179            ;       }
 4179            ;               
 4179            ; }
 4179            L21:
 4179  B757              tfr x,s
 417B  30                pulx
 417C                    .dbline 0 ; func end
 417C  3D                rts
 417D                    .dbsym l counter -7 I
 417D                    .dbsym l loop -5 I
 417D                    .dbsym l keypressed -3 c
 417D                    .dbsym l i -2 I
 417D                    .dbend
 417D            L30:
 417D  4F62737461636C652064657465637465  .byte 'O,'b,'s,'t,'a,'c,'l,'e,32,'d,'e,'t,'e,'c,'t,'e
 418D  642E20526F626F7420747572696E6720  .byte 'd,46,32,'R,'o,'b,'o,'t,32,'t,'u,'r,'i,'n,'g,32
 419D  726967687420696E2074687265652073  .byte 'r,'i,'g,'h,'t,32,'i,'n,32,'t,'h,'r,'e,'e,32,'s
 41AD  65636F6E647320284C6F6F6B20617420  .byte 'e,'c,'o,'n,'d,'s,32,40,'L,'o,'o,'k,32,'a,'t,32
 41BD  73746570706572206D6F746F7229210A  .byte 's,'t,'e,'p,'p,'e,'r,32,'m,'o,'t,'o,'r,41,33,10
 41CD  00                .byte 0
 41CE            L22:
 41CE  4E6F204F62737461636C652064657465  .byte 'N,'o,32,'O,'b,'s,'t,'a,'c,'l,'e,32,'d,'e,'t,'e
 41DE  63746564212121202870726573732035  .byte 'c,'t,'e,'d,33,33,33,32,40,'p,'r,'e,'s,'s,32,53
 41EE  20746F20646574656374206F62737461  .byte 32,'t,'o,32,'d,'e,'t,'e,'c,'t,32,'o,'b,'s,'t,'a
 41FE  636C65290A00      .byte 'c,'l,'e,41,10,0
 4204            L13:
 4204  3F800000          .word 0x3f80,0x0
 4208            L9:
 4208  00000000          .word 0x0,0x0
