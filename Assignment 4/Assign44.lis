                        .module Assign44.C
                        .area memory(abs)
                        .org 0x3f8c
 3F8C           _interrupt_vectors::
 3F8C F8CF              .word 63695
 3F8E F8CF              .word 63695
 3F90 F8CF              .word 63695
 3F92 F8CF              .word 63695
 3F94 F8CF              .word 63695
 3F96 F8CF              .word 63695
 3F98 F8CF              .word 63695
 3F9A F8CF              .word 63695
 3F9C F8CF              .word 63695
 3F9E F8CF              .word 63695
 3FA0 F8CF              .word 63695
 3FA2 F8CF              .word 63695
 3FA4 F8CF              .word 63695
 3FA6 F8CF              .word 63695
 3FA8 F8CF              .word 63695
 3FAA F8CF              .word 63695
 3FAC F8CF              .word 63695
 3FAE F8CF              .word 63695
 3FB0 F8CF              .word 63695
 3FB2 F8CF              .word 63695
 3FB4 F8CF              .word 63695
 3FB6 F8CF              .word 63695
 3FB8 F8CF              .word 63695
 3FBA F8CF              .word 63695
 3FBC F8CF              .word 63695
 3FBE F8CF              .word 63695
 3FC0 F8CF              .word 63695
 3FC2 F8CF              .word 63695
 3FC4 F8CF              .word 63695
 3FC6 F8CF              .word 63695
 3FC8 F8CF              .word 63695
 3FCA F8CF              .word 63695
 3FCC 010B              .word _keyboardISR
 3FCE F8CF              .word 63695
 3FD0 F8CF              .word 63695
 3FD2 F8CF              .word 63695
 3FD4 F8CF              .word 63695
 3FD6 F8CF              .word 63695
 3FD8 F8CF              .word 63695
 3FDA F8CF              .word 63695
 3FDC F8CF              .word 63695
 3FDE F8CF              .word 63695
 3FE0 F8CF              .word 63695
 3FE2 F8CF              .word 63695
 3FE4 F8CF              .word 63695
 3FE6 F8CF              .word 63695
 3FE8 F8CF              .word 63695
 3FEA F8CF              .word 63695
 3FEC F8CF              .word 63695
 3FEE F8CF              .word 63695
 3FF0 0066              .word _CollisionDetect
 3FF2 F8CF              .word 63695
 3FF4 F8C7              .word 63687
 3FF6 F8C3              .word 63683
 3FF8 F8CB              .word 63691
 3FFA F805              .word 63493
 3FFC F809              .word 63497
 3FFE 0000              .word __start
 4000                   .dbfile M:\Sysc 2003\Assignment 4/vectors_dp256_NoICE1.c
 4000                   .dbsym e interrupt_vectors _interrupt_vectors A[116:58]pfV
                        .area data
 0000                   .dbfile M:\Sysc 2003\Assignment 4/vectors_dp256_NoICE1.c
 0000           _x::
 0000                   .blkb 2
                        .area idata
 0000 0001              .word 1
                        .area data
 0002                   .dbfile M:\Sysc 2003\Assignment 4/vectors_dp256_NoICE1.c
 0002                   .dbfile Assign44.C
 0002                   .dbsym e x _x I
 0002           _motorOn::
 0002                   .blkb 2
                        .area idata
 0002 0001              .word 1
                        .area data
 0004                   .dbfile Assign44.C
 0004                   .dbsym e motorOn _motorOn I
                        .area text
 0000                   .dbfile Assign44.C
 0000                   .dbfunc e main _main fV
 0000           ;           next -> -1,x
 0000           _main::
 0000 34                pshx
 0001 B775              tfr s,x
 0003 1B9E              leas -2,sp
 0005                   .dbline -1
 0005                   .dbline 19
 0005           ; /*
 0005           ; Authors Fady Ibrahim 100876906, Gavez Smith 100857991 
 0005           ; */
 0005           ; #include<stdio.h>
 0005           ; #include "hcs12dp256.h"
 0005           ; #include "vectors_dp256_NoICE1.c"
 0005           ; 
 0005           ; void delay();
 0005           ; char keypad();
 0005           ; #pragma interrupt_handler CollisionDetect()
 0005           ;  void CollisionDetect(void);
 0005           ;  #pragma interrupt_handler keyboardISR()
 0005           ;  void keyboardISR(void);
 0005           ; int x=1;
 0005           ; int motorOn=1;
 0005           ; char key;
 0005           ; 
 0005           ; void main(void)
 0005           ; {
 0005                   .dbline 21
 0005           ; char next;
 0005           ; Lcd2PP_Init();
 0005 160236            jsr _Lcd2PP_Init
 0008                   .dbline 22
 0008           ;     LCD_instruction();
 0008 16021E            jsr _LCD_instruction
 000B                   .dbline 23
 000B           ;        LCD_display('P');
 000B CC0050            ldd #80
 000E 16022A            jsr _LCD_display
 0011                   .dbline 24
 0011           ;        LCD_display('R');
 0011 CC0052            ldd #82
 0014 16022A            jsr _LCD_display
 0017                   .dbline 25
 0017           ;        LCD_display('E');
 0017 CC0045            ldd #69
 001A 16022A            jsr _LCD_display
 001D                   .dbline 26
 001D           ;        LCD_display('S');
 001D CC0053            ldd #83
 0020 16022A            jsr _LCD_display
 0023                   .dbline 27
 0023           ;        LCD_display('S');
 0023 CC0053            ldd #83
 0026 16022A            jsr _LCD_display
 0029                   .dbline 28
 0029           ;        LCD_display(' ');
 0029 CC0020            ldd #32
 002C 16022A            jsr _LCD_display
 002F                   .dbline 29
 002F           ;        LCD_display('5');
 002F CC0035            ldd #53
 0032 16022A            jsr _LCD_display
 0035                   .dbline 30
 0035           ; SPI1CR1=0;
 0035 7900F0            clr 0xf0
 0038                   .dbline 31
 0038           ; key = 0xFF;
 0038 C6FF              ldab #255
 003A 7B0000            stab _key
 003D                   .dbline 32
 003D           ; DDRP |= 0x8F; // bitset PP0-3 as outputs (rows) 
 003D 1C025A8F          bset 0x25a,#143
 0041                   .dbline 33
 0041           ; DDRH &= 0x0F; // bitclear PH4..7 as inputs (columns)
 0041 1D0262F0          bclr 0x262,#0xf0
 0045                   .dbline 34
 0045           ; PTM=0x08;
 0045 C608              ldab #8
 0047 7B0250            stab 0x250
 004A                   .dbline 35
 004A           ; PTP = 0x8F; // Set scan row(s)
 004A C68F              ldab #143
 004C 7B0258            stab 0x258
 004F                   .dbline 36
 004F           ; PIFH = 0xFF; // Clear previous interrupt flags
 004F C6FF              ldab #255
 0051 7B0267            stab 0x267
 0054                   .dbline 37
 0054           ; PPSH = 0xF0; // Rising Edge
 0054 C6F0              ldab #240
 0056 7B0265            stab 0x265
 0059                   .dbline 38
 0059           ; PERH = 0x00; // Disable pulldowns
 0059 790264            clr 0x264
 005C                   .dbline 39
 005C           ; PIEH |= 0xF0; // Local enable on columns inputs
 005C 1C0266F0          bset 0x266,#240
 0060                   .dbline 40
 0060           ; asm( "cli" );
 0060 10EF                      cli
 0062           
 0062                   .dbline -2
 0062                   .dbline 43
 0062           ; 
 0062           ;       
 0062           ; }
 0062           L3:
 0062 B757              tfr x,s
 0064 30                pulx
 0065                   .dbline 0 ; func end
 0065 3D                rts
 0066                   .dbsym l next -1 c
 0066                   .dbend
 0066                   .dbfunc e CollisionDetect _CollisionDetect fV
 0066           ;      clockwise -> -4,x
 0066           _CollisionDetect::
 0066 34                pshx
 0067 B775              tfr s,x
 0069 1B9C              leas -4,sp
 006B                   .dbline -1
 006B                   .dbline 50
 006B           ; 
 006B           ; /*
 006B           ; This function is the Real-Time ISR and interruts the program when the user presses 5 on the keyboard. It executes the
 006B           ; interrupt turns off the dc motor waits 3-4 second and turns the steppor motor then afterwards it turns on the dc motor again.
 006B           ; */
 006B           ;  void CollisionDetect(void)
 006B           ; {
 006B                   .dbline 52
 006B           ; 
 006B           ;       if(motorOn==1)
 006B FC0002            ldd _motorOn
 006E 8C0001            cpd #1
 0071 260A              bne L5
 0073                   .dbline 53
 0073           ;       {
 0073                   .dbline 54
 0073           ;       motorOn=0;
 0073 CC0000            ldd #0
 0076 7C0002            std _motorOn
 0079                   .dbline 55
 0079           ;       PTP=PTP & 0x7F;
 0079 1D025880          bclr 0x258,#0x80
 007D                   .dbline 56
 007D           ;       }       
 007D           L5:
 007D                   .dbline 57
 007D           ; if (x==24)
 007D FC0000            ldd _x
 0080 8C0018            cpd #24
 0083 265D              bne L7
 0085                   .dbline 58
 0085           ; {
 0085                   .dbline 59
 0085           ; double clockwise =0;   //counter clockwise incrementer
 0085 CD035F            ldy #L9
 0088 160000            jsr __tofp1
 008B 191C              leay -4,x
 008D 160000            jsr __fromfp1
 0090                   .dbline 61
 0090           ; 
 0090           ;       DDRP = 0xF0;//enable port P for the stepper motor
 0090 C6F0              ldab #240
 0092 7B025A            stab 0x25a
 0095                   .dbline 62
 0095           ;       PTP = 0x20;
 0095 C620              ldab #32
 0097 7B0258            stab 0x258
 009A                   .dbline 63
 009A           ;       DDRT = 0xF0;//enable the bottom and left coils for the stepper motor
 009A C6F0              ldab #240
 009C 7B0242            stab 0x242
 009F 2031              bra L11
 00A1           L10:
 00A1                   .dbline 65
 00A1                   .dbline 66
 00A1 C680              ldab #128
 00A3 7B0240            stab 0x240
 00A6                   .dbline 67
 00A6 1601A5            jsr _delay
 00A9                   .dbline 68
 00A9 C620              ldab #32
 00AB 7B0240            stab 0x240
 00AE                   .dbline 69
 00AE 1601A5            jsr _delay
 00B1                   .dbline 70
 00B1 C640              ldab #64
 00B3 7B0240            stab 0x240
 00B6                   .dbline 71
 00B6 1601A5            jsr _delay
 00B9                   .dbline 72
 00B9 790240            clr 0x240
 00BC                   .dbline 73
 00BC 1601A5            jsr _delay
 00BF                   .dbline 74
 00BF 191C              leay -4,x
 00C1 160000            jsr __tofp1
 00C4 CD035B            ldy #L13
 00C7 160000            jsr __tofp2
 00CA 160000            jsr __fpadd
 00CD 191C              leay -4,x
 00CF 160000            jsr __fromfp1
 00D2                   .dbline 75
 00D2           L11:
 00D2                   .dbline 65
 00D2           ;       
 00D2           ;       while(clockwise<=5){//spin the stepper motor clockwise
 00D2 191C              leay -4,x
 00D4 160000            jsr __tofp1
 00D7 CD0357            ldy #L14
 00DA 160000            jsr __tofp2
 00DD 160000            jsr __fpcmp
 00E0 2FBF              ble L10
 00E2                   .dbline 76
 00E2           ;          PTT = 0x80;
 00E2           ;          delay();
 00E2           ;          PTT = 0x20;
 00E2           ;          delay();
 00E2           ;          PTT = 0x40;
 00E2           ;          delay();
 00E2           ;          PTT = 0x00;
 00E2           ;          delay();
 00E2           ;          clockwise++;
 00E2           ;       }
 00E2           ; }
 00E2           L7:
 00E2                   .dbline 77
 00E2           ; if (x==40)
 00E2 FC0000            ldd _x
 00E5 8C0028            cpd #40
 00E8 2610              bne L15
 00EA                   .dbline 78
 00EA           ; {
 00EA                   .dbline 79
 00EA           ;       motorOn=1;
 00EA CC0001            ldd #1
 00ED 7C0002            std _motorOn
 00F0                   .dbline 80
 00F0           ;       x=0;
 00F0 CC0000            ldd #0
 00F3 7C0000            std _x
 00F6                   .dbline 81
 00F6           ;       CRGINT= CRGINT & 0x7F;
 00F6 1D003880          bclr 0x38,#0x80
 00FA                   .dbline 82
 00FA           ; }
 00FA           L15:
 00FA                   .dbline 83
 00FA           ;  CRGFLG|= 0x80;
 00FA 1C003780          bset 0x37,#128
 00FE                   .dbline 84
 00FE           ; x++;
 00FE FC0000            ldd _x
 0101 C30001            addd #1
 0104 7C0000            std _x
 0107                   .dbline -2
 0107                   .dbline 85
 0107           ; } 
 0107           L4:
 0107 B757              tfr x,s
 0109 30                pulx
 010A                   .dbline 0 ; func end
 010A 0B                rti
 010B                   .dbsym l clockwise -4 D
 010B                   .dbend
 010B                   .dbfunc e keyboardISR _keyboardISR fV
 010B           ;           temp -> -1,x
 010B           _keyboardISR::
 010B 34                pshx
 010C B775              tfr s,x
 010E 1B9E              leas -2,sp
 0110                   .dbline -1
 0110                   .dbline 89
 0110           ; 
 0110           ; 
 0110           ; void keyboardISR(void)
 0110           ; {
 0110                   .dbline 91
 0110           ; char temp;
 0110           ; PIEH = 0x00; // Local disable
 0110 790266            clr 0x266
 0113                   .dbline 92
 0113           ; PIFH = PIFH; // Acknowledge (all) interrupts
 0113                   ; vol
 0113 F60267            ldab 0x267
 0116 7B0267            stab 0x267
 0119                   .dbline 93
 0119           ; PIEH |= 0xF0; // Local enable on columns inputs
 0119 1C0266F0          bset 0x266,#240
 011D                   .dbline 94
 011D           ; asm("SEI");
 011D 1410                      SEI
 011F           
 011F                   .dbline 95
 011F           ; temp = keypad();
 011F 1601C6            jsr _keypad
 0122 6B1F              stab -1,x
 0124                   .dbline 96
 0124           ; if (temp ==0x35) 
 0124 E61F              ldab -1,x
 0126 C135              cmpb #53
 0128 2666              bne L18
 012A                   .dbline 97
 012A           ; {
 012A                   .dbline 98
 012A           ;       printf ("Obstacle detected. Robot turing right in three seconds (Look at stepper motor)!\n");   
 012A CC0306            ldd #L20
 012D 160000            jsr _printf
 0130                   .dbline 99
 0130           ;         LCD_instruction(0x00);
 0130 CC0000            ldd #0
 0133 16021E            jsr _LCD_instruction
 0136                   .dbline 100
 0136           ;        LCD_display('T');
 0136 CC0054            ldd #84
 0139 16022A            jsr _LCD_display
 013C                   .dbline 101
 013C           ;        LCD_display('U');
 013C CC0055            ldd #85
 013F 16022A            jsr _LCD_display
 0142                   .dbline 102
 0142           ;        LCD_display('R');
 0142 CC0052            ldd #82
 0145 16022A            jsr _LCD_display
 0148                   .dbline 103
 0148           ;        LCD_display('N');
 0148 CC004E            ldd #78
 014B 16022A            jsr _LCD_display
 014E                   .dbline 104
 014E           ;        LCD_display('I');
 014E CC0049            ldd #73
 0151 16022A            jsr _LCD_display
 0154                   .dbline 105
 0154           ;        LCD_display('N');
 0154 CC004E            ldd #78
 0157 16022A            jsr _LCD_display
 015A                   .dbline 106
 015A           ;        LCD_display('G');
 015A CC0047            ldd #71
 015D 16022A            jsr _LCD_display
 0160                   .dbline 107
 0160           ;        LCD_display(' ');
 0160 CC0020            ldd #32
 0163 16022A            jsr _LCD_display
 0166                   .dbline 108
 0166           ;        LCD_display('R');
 0166 CC0052            ldd #82
 0169 16022A            jsr _LCD_display
 016C                   .dbline 109
 016C           ;        LCD_display('I');
 016C CC0049            ldd #73
 016F 16022A            jsr _LCD_display
 0172                   .dbline 110
 0172           ;        LCD_display('G');
 0172 CC0047            ldd #71
 0175 16022A            jsr _LCD_display
 0178                   .dbline 111
 0178           ;        LCD_display('H');
 0178 CC0048            ldd #72
 017B 16022A            jsr _LCD_display
 017E                   .dbline 112
 017E           ;        LCD_display('T');
 017E CC0054            ldd #84
 0181 16022A            jsr _LCD_display
 0184                   .dbline 113
 0184           ;       CRGINT=0x80; //enable realtime interrupt
 0184 C680              ldab #128
 0186 7B0038            stab 0x38
 0189                   .dbline 114
 0189           ;       RTICTL=0x7F;// set the period frequency.
 0189 C67F              ldab #127
 018B 7B003B            stab 0x3b
 018E                   .dbline 115
 018E           ;       asm("cli");
 018E 10EF                      cli
 0190           
 0190                   .dbline 116
 0190           ;  }
 0190           L18:
 0190                   .dbline 117
 0190           ;  PTP=0x80;
 0190 C680              ldab #128
 0192 7B0258            stab 0x258
 0195                   .dbline 118
 0195           ;  PIFH = PIFH; // Acknowledge (all) interrupts
 0195                   ; vol
 0195 F60267            ldab 0x267
 0198 7B0267            stab 0x267
 019B                   .dbline 119
 019B           ; PIEH |= 0xF0; // Local enable on columns inputs
 019B 1C0266F0          bset 0x266,#240
 019F                   .dbline 120
 019F           ;       asm("cli");
 019F 10EF                      cli
 01A1           
 01A1                   .dbline -2
 01A1                   .dbline 121
 01A1           ; }
 01A1           L17:
 01A1 B757              tfr x,s
 01A3 30                pulx
 01A4                   .dbline 0 ; func end
 01A4 0B                rti
 01A5                   .dbsym l temp -1 c
 01A5                   .dbend
 01A5                   .dbfunc e delay _delay fV
 01A5           ;              i -> -2,x
 01A5           _delay::
 01A5 34                pshx
 01A6 B775              tfr s,x
 01A8 1B9E              leas -2,sp
 01AA                   .dbline -1
 01AA                   .dbline 123
 01AA           ; 
 01AA           ; void delay(){//delay for a considerable 10 ms
 01AA                   .dbline 124
 01AA           ;    int i = 0;   //counter
 01AA CC0000            ldd #0
 01AD 6C1E              std -2,x
 01AF                   .dbline 125
 01AF CC0000            ldd #0
 01B2 6C1E              std -2,x
 01B4           L22:
 01B4                   .dbline 125
 01B4                   .dbline 126
 01B4           L23:
 01B4                   .dbline 125
 01B4           ;    for(i=0; i<10000; i++){
 01B4 EC1E              ldd -2,x
 01B6 C30001            addd #1
 01B9 6C1E              std -2,x
 01BB                   .dbline 125
 01BB EC1E              ldd -2,x
 01BD 8C2710            cpd #10000
 01C0 2DF2              blt L22
 01C2                   .dbline -2
 01C2                   .dbline 127
 01C2           ;    }
 01C2           ; }
 01C2           L21:
 01C2 B757              tfr x,s
 01C4 30                pulx
 01C5                   .dbline 0 ; func end
 01C5 3D                rts
 01C6                   .dbsym l i -2 I
 01C6                   .dbend
 01C6                   .dbfunc e keypad _keypad fc
 01C6           ;           loop -> -3,x
 01C6           ;     keypressed -> -1,x
 01C6           _keypad::
 01C6 34                pshx
 01C7 B775              tfr s,x
 01C9 1B9C              leas -4,sp
 01CB                   .dbline -1
 01CB                   .dbline 130
 01CB           ; 
 01CB           ; char keypad()
 01CB           ; {
 01CB                   .dbline 131
 01CB           ;       int loop=0;
 01CB CC0000            ldd #0
 01CE 6C1D              std -3,x
 01D0                   .dbline 132
 01D0           ;       char keypressed=0;
 01D0 691F              clr -1,x
 01D2 2042              bra L28
 01D4           L27:
 01D4                   .dbline 134
 01D4           ;       while (loop==0)
 01D4           ;       {
 01D4                   .dbline 136
 01D4           ;       // turns on the motor and the the output pins for the rows on the keypad.
 01D4           ;       DDRP=0x8F;
 01D4 C68F              ldab #143
 01D6 7B025A            stab 0x25a
 01D9                   .dbline 138
 01D9           ;       //turns on the collums.
 01D9           ;       DDRH=0x00;      
 01D9 790262            clr 0x262
 01DC                   .dbline 139
 01DC           ;       PTM = 0x08;
 01DC C608              ldab #8
 01DE 7B0250            stab 0x250
 01E1                   .dbline 140
 01E1           ;       if(motorOn==1)
 01E1 FC0002            ldd _motorOn
 01E4 8C0001            cpd #1
 01E7 2604              bne L30
 01E9                   .dbline 141
 01E9           ;       {
 01E9                   .dbline 142
 01E9           ;       PTP=PTP | 0x80;
 01E9 1C025880          bset 0x258,#128
 01ED                   .dbline 143
 01ED           ;       }                                                       
 01ED           L30:
 01ED                   .dbline 144
 01ED           ;       keypressed=PTH;
 01ED                   ; vol
 01ED F60260            ldab 0x260
 01F0 6B1F              stab -1,x
 01F2                   .dbline 145
 01F2           ;       PTP= PTP & 0x82;
 01F2 1D02587D          bclr 0x258,#0x7d
 01F6                   .dbline 146
 01F6           ;       PTM =PTM & 0x00;
 01F6 CC0000            ldd #0
 01F9 7B0250            stab 0x250
 01FC                   .dbline 147
 01FC           ;       keypressed &= 0xF0;
 01FC 0D1F0F            bclr -1,x,#0xf
 01FF                   .dbline 148
 01FF           ;       if (keypressed==0x20 && PTP==0x82)
 01FF E61F              ldab -1,x
 0201 C120              cmpb #32
 0203 260C              bne L32
 0205                   ; vol
 0205 F60258            ldab 0x258
 0208 C182              cmpb #130
 020A 2605              bne L32
 020C                   .dbline 149
 020C           ;       {
 020C                   .dbline 150
 020C           ;        return '5';
 020C CC0035            ldd #53
 020F 2009              bra L26
 0211           L32:
 0211                   .dbline 153
 0211 CC0000            ldd #0
 0214 2004              bra L26
 0216           L28:
 0216                   .dbline 133
 0216 EC1D              ldd -3,x
 0218 27BA              beq L27
 021A                   .dbline -2
 021A                   .dbline 157
 021A           ;       }
 021A           ; 
 021A           ;       return 0;
 021A           ;       
 021A           ; 
 021A           ; }
 021A           ; }
 021A           L26:
 021A B757              tfr x,s
 021C 30                pulx
 021D                   .dbline 0 ; func end
 021D 3D                rts
 021E                   .dbsym l loop -3 I
 021E                   .dbsym l keypressed -1 c
 021E                   .dbend
 0000            REGBS = $0000 ; DP256 register bank base address
 0000            PORTA = REGBS+0 ;port A = Address lines A8 A15
 0001            PORTB = REGBS+1 ;port B = Address lines A0 A7
 0002            DDRA = REGBS+2 ;port A direction register
 0003            DDRB = REGBS+3 ;port A direction register
 0008            PORTE = REGBS+8 ;port E = mode,IRQandcontrolsignals
 0009            DDRE = REGBS+9 ;port E direction register
 000A            PEAR = REGBS+$A ;port E assignments
 000B            MODE = REGBS+$B ;Mode register
 000C            PUCR = REGBS+$C ;port pull-up control register
 000D            RDRIV = REGBS+$D ;port reduced drive control register
 000E            EBICTL = REGBS+$E ;E stretch control
 021E           
 0010            INITRM = REGBS+$10 ;Ram location register
 0011            INITRG = REGBS+$11 ;Register location register
 0012            INITEE = REGBS+$12 ;EEprom location register
 0013            MISC = REGBS+$13 ;MiscellaneoMapping control
 0014            MTST0 = REGBS+$14 ; RESERVED
 0015            ITCR = REGBS+$15 ;Interrupt test control register
 0016            ITEST = REGBS+$16 ;Interrupt test register
 0017            MTST1 = REGBS+$17 ; Reserved
 021E           
 001A            PARTIDH = REGBS+$1A ;Part ID high
 001B            PARTIDL = REGBS+$1B ;Part ID low
 001C            MEMSIZ0 = REGBS+$1C ;memory size
 001D            MEMSIZ1 = REGBS+$1D ;memory size
 001E            INTCR = REGBS+$1E ;interrupt control register
 001F            HPRIO = REGBS+$1F ;high priority reg
 021E           
 0028            BKPCT0 = REGBS+$28 ;Break control register
 0029            BKPCT1 = REGBS+$29 ;Break control register
 002A            BKP0X = REGBS+$2A ; Break 0 index register
 002B            BKP0H = REGBS+$2B ; Break 0 pointer high
 002C            BRP0L = REGBS+$2C ; Break 0 pointer low
 002D            BKP1X = REGBS+$2D ; Break 1 index register
 002E            BKP1H = REGBS+$2E ; Break 1 pointer high
 002F            BRP1L = REGBS+$2F ; Break 1 pointer low
 0030            PPAGE = REGBS+$30 ;Program Page register
 021E           
 0032            PORTK = REGBS+$32 ;Port K data
 0033            DDRK = REGBS+$33 ;Port K direction
 0034            SYNR = REGBS+$34 ; Synthesizer / multiplier register
 0035            REFDV = REGBS+$35 ; Reference divider register
 0036            CTFLG = REGBS+$36 ; RESERVED
 0037            CRGFLG = REGBS+$37 ; PLL flags register
 0038            CRGINT = REGBS+$38 ; PLL interrupt register
 0039            CLKSEL = REGBS+$39 ; Clock select register
 003A            PLLCTL = REGBS+$3A ; PLL control register
 003B            RTICTL = REGBS+$3B ;Real time interrupt control
 003C            COPCTL = REGBS+$3C ;Watchdog control
 003D            FORBYP = REGBS+$3D ;
 003E            CTCTL = REGBS+$3E ;
 003F            ARMCOP = REGBS+$3F ;COP reset register
 021E           
 0040            TIOS = REGBS+$40 ;timer input/output select
 0041            CFORC = REGBS+$41 ;timer compare force
 0042            OC7M = REGBS+$42 ;timer output compare 7 mask
 0043            OC7D = REGBS+$43 ;timer output compare 7 data
 0044            TCNT = REGBS+$44 ;timer counter register hi
 0045            *TCNT = REGBS+$45 ;timer counter register lo
 0046            TSCR = REGBS+$46 ;timer system control register
 0047            TTOV = REGBS+$47 ;reserved
 0048            TCTL1 = REGBS+$48 ;timer control register 1
 0049            TCTL2 = REGBS+$49 ;timer control register 2
 004A            TCTL3 = REGBS+$4A ;timer control register 3
 004B            TCTL4 = REGBS+$4B ;timer control register 4
 004C            TMSK1 = REGBS+$4C ;timer interrupt mask 1
 004D            TMSK2 = REGBS+$4D ;timer interrupt mask 2
 004E            TFLG1 = REGBS+$4E ;timer flags 1
 004F            TFLG2 = REGBS+$4F ;timer flags 2
 0050            TC0 = REGBS+$50 ;timer capture/comparregister 0
 0051            *TC0 = REGBS+$51 ;
 0052            TC1 = REGBS+$52 ;timer capture/comparregister 1
 0053            *TC1 = REGBS+$53 ;
 0054            TC2 = REGBS+$54 ;timer capture/comparregister 2
 0055            *TC2 = REGBS+$55 ;
 0056            TC3 = REGBS+$56 ;timer capture/comparregister 3
 0057            *TC3 = REGBS+$57 ;
 0058            TC4 = REGBS+$58 ;timer capture/comparregister 4
 0059            *TC4 = REGBS+$59 ;
 005A            TC5 = REGBS+$5A ;timer capture/comparregister 5
 005B            *TC5 = REGBS+$5B ;
 005C            TC6 = REGBS+$5C ;timer capture/comparregister 6
 005D            *TC6 = REGBS+$5D ;
 005E            TC7 = REGBS+$5E ;timer capture/comparregister 7
 005F            *TC7 = REGBS+$5F ;
 0060            PACTL = REGBS+$60 ;pulse accumulator controls
 0061            PAFLG = REGBS+$61 ;pulse accumulator flags
 0062            PACN3 = REGBS+$62 ;pulse accumulator counter 3
 0063            PACN2 = REGBS+$63 ;pulse accumulator counter 2
 0064            PACN1 = REGBS+$64 ;pulse accumulator counter 1
 0065            PACN0 = REGBS+$65 ;pulse accumulator counter 0
 0066            MCCTL = REGBS+$66 ;Modulus down conunter control
 0067            MCFLG = REGBS+$67 ;down counter flags
 0068            ICPAR = REGBS+$68 ;Input pulse accumulatocontrol
 0069            DLYCT = REGBS+$69 ;Delay count to down counter
 006A            ICOVW = REGBS+$6A ;Input control overwrite register
 006B            ICSYS = REGBS+$6B ;Input control system control
 021E           
 006D            TIMTST = REGBS+$6D ;timer test register
 021E           
 0070            PBCTL = REGBS+$70 ; Pulse accumulatoB control
 0071            PBFLG = REGBS+$71 ; Pulse accumulatoB flags
 0072            PA3H = REGBS+$72 ; Pulse Accumulatoholding regist3
 0073            PA2H = REGBS+$73 ; Pulse Accumulatoholding regist2
 0074            PA1H = REGBS+$74 ; Pulse Accumulatoholding regist1
 0075            PA0H = REGBS+$75 ; Pulse Accumulatoholding regist0
 0076            MCCNT = REGBS+$76 ; Modulus down counter register
 0077            *MCCNTL = REGBS+$77 ; low byte
 0078            TCOH = REGBS+$78 ; Capture 0 holding register
 007A            TC1H = REGBS+$7A ; Capture 1 holding register
 007C            TC2H = REGBS+$7C ; Capture 2 holding register
 007E            TC3H = REGBS+$7E ; Capture 3 holding register
 021E           
 0080            ATD0CTL0 = REGBS+$80 ;ADC control 0 (reserved)
 0081            ATD0CTL1 = REGBS+$81 ;ADC control 1 (reserved)
 0082            ATD0CTL2 = REGBS+$82 ;ADC control 2
 0083            ATD0CTL3 = REGBS+$83 ;ADC control 3
 0084            ATD0CTL4 = REGBS+$84 ;ADC control 4
 0085            ATD0CTL5 = REGBS+$85 ;ADC control 5
 0086            ATD0STAT = REGBS+$86 ;ADC status register hi
 0087            *ATD0STAT = REGBS+$87 ;ADC status register lo
 0088            ATD0TEST = REGBS+$88 ;ADC test (reserved)
 0089            *ATD0TEST = REGBS+$89 ;
 021E           
 008D            ATD0DIEN = REGBS+$8D ;
 021E           
 008F            PORTAD = REGBS+$8F ;port ADC = input only
 0090            ADR00H = REGBS+$90 ;ADC result 0 register
 0092            ADR01H = REGBS+$92 ;ADC result 1 register
 0094            ADR02H = REGBS+$94 ;ADC result 2 register
 0096            ADR03H = REGBS+$96 ;ADC result 3 register
 0098            ADR04H = REGBS+$98 ;ADC result 4 register
 009A            ADR05H = REGBS+$9A ;ADC result 5 register
 009C            ADR06H = REGBS+$9C ;ADC result 6 register
 009E            ADR07H = REGBS+$9E ;ADC result 7 register
 021E           
 00A0            PWME = REGBS+$A0 ;PWM enable
 00A1            PWMPOL = REGBS+$A1 ;PWM polarity
 00A2            PWMCLK = REGBS+$A2 ;PWM clock select register
 00A3            PWMPRCLK = REGBS+$A3 ;PWM Prescale clock select register
 00A4            PWMCAE = REGBS+$A4 ;PWM center align select register
 00A5            PWMCTL = REGBS+$A5 ;PWM control register
 00A6            PWMTST = REGBS+$A6 ;reserved
 00A7            PWMPRSC = REGBS+$A7 ;reserved
 00A8            PWMSCLA = REGBS+$A8 ;PWM Scale A
 00A9            PWMSCLB = REGBS+$A9 ;PWM scale B
 00AA            PWMSCNTA = REGBS+$AA ;reserved
 00AB            PWMSCNTB = REGBS+$AB ;reserved
 00AC            PWMCNT0 = REGBS+$AC ;PWM channel 0 counter
 00AD            PWMCNT1 = REGBS+$AD ;PWM channel 1 counter
 00AE            PWMCNT2 = REGBS+$AE ;PWM channel 2 counter
 00AF            PWMCNT3 = REGBS+$AF ;PWM channel 3 counter
 00B0            PWMCNT4 = REGBS+$B0 ;PWM channel 4 counter
 00B1            PWMCNT5 = REGBS+$B1 ;PWM channel 5 counter
 00B2            PWMCNT6 = REGBS+$B2 ;PWM channel 6 counter
 00B3            PWMCNT7 = REGBS+$B3 ;PWM channel 7 counter
 00B4            PWMPER0 = REGBS+$B4 ;PWM channel 0 period
 00B5            PWMPER1 = REGBS+$B5 ;PWM channel 1 period
 00B6            PWMPER2 = REGBS+$B6 ;PWM channel 2 period
 00B7            PWMPER3 = REGBS+$B7 ;PWM channel 3 period
 00B8            PWMPER4 = REGBS+$B8 ;PWM channel 4 period
 00B9            PWMPER5 = REGBS+$B9 ;PWM channel 5 period
 00BA            PWMPER6 = REGBS+$BA ;PWM channel 6 period
 00BB            PWMPER7 = REGBS+$BB ;PWM channel 7 period
 00BC            PWMDTY0 = REGBS+$BC ;PWM channel 0 duty cycle
 00BD            PWMDTY1 = REGBS+$BD ;PWM channel 1 duty cycle
 00BE            PWMDTY2 = REGBS+$BE ;PWM channel 2 duty cycle
 00BF            PWMDTY3 = REGBS+$BF ;PWM channel 3 duty cycle
 00C0            PWMDTY4 = REGBS+$C0 ;PWM channel 0 duty cycle
 00C1            PWMDTY5 = REGBS+$C1 ;PWM channel 1 duty cycle
 00C2            PWMDTY6 = REGBS+$C2 ;PWM channel 2 duty cycle
 00C3            PWMDTY7 = REGBS+$C3 ;PWM channel 3 duty cycle
 00C4            PWMSDN = REGBS+$C4 ;PWM shutdown register
 021E           
 00C8            SC0BDH = REGBS+$C8 ;sci 0 baud reg hi byte
 00C9            SC0BDL = REGBS+$C9 ;sci 0 baud reg lo byte
 00CA            SC0CR1 = REGBS+$CA ;sci 0 control1 reg
 00CB            SC0CR2 = REGBS+$CB ;sci 0 control2 reg
 00CC            SC0SR1 = REGBS+$CC ;sci 0 status reg 1
 00CD            SC0SR2 = REGBS+$CD ;sci 0 status reg 2
 00CE            SC0DRH = REGBS+$CE ;sci 0 data reg hi
 00CF            SC0DRL = REGBS+$CF ;sci 0 data reg lo
 00D0            SC1BDH = REGBS+$D0 ;sci 1 baud reg hi byte
 00D1            SC1BDL = REGBS+$D1 ;sci 1 baud reg lo byte
 00D2            SC1CR1 = REGBS+$D2 ;sci 1 control1 reg
 00D3            SC1CR2 = REGBS+$D3 ;sci 1 control2 reg
 00D4            SC1SR1 = REGBS+$D4 ;sci 1 status reg 1
 00D5            SC1SR2 = REGBS+$D5 ;sci 1 status reg 2
 00D6            SC1DRH = REGBS+$D6 ;sci 1 data reg hi
 00D7            SC1DRL = REGBS+$D7 ;sci 1 data reg lo
 00D8            SPI0CR1 = REGBS+$D8 ;spi 0 control1 reg
 00D9            SPI0CR2 = REGBS+$D9 ;spi 0 control2 reg
 00DA            SPI0BR = REGBS+$DA ;spi 0 baud reg
 00DB            SPI0SR = REGBS+$DB ;spi 0 status reg hi
 021E           
 00DD            SP0DR = REGBS+$DD ;spi 0 data reg
 021E           
 00E0            IBAD = REGBS+$E0 ;I2C Bus address register
 00E1            IBFD = REGBS+$E1 ;I2C Bus fr=ency divider
 00E2            IBCR = REGBS+$E2 ;I2C Bus control register
 00E3            IBSR = REGBS+$E3 ;I2C Bus status register
 00E4            IBDR = REGBS+$E4 ;I2C Bus message data register
 021E           
 00E8            DLCBCR1 = REGBS+$E8 ;BDLC Control regsiter 1
 00E9            DLCBSVR = REGBS+$E9 ;BDLC State vector register
 00EA            DLCBCR2 = REGBS+$EA ;BDLC Control register 2
 00EB            DLCBDR = REGBS+$EB ;BDLC Data register
 00EC            DLCBARD = REGBS+$EC ;BDLC Analog delay register
 00ED            DLCBRSR = REGBS+$ED ;BDLC Rate select register
 00EE            DLCSCR = REGBS+$EE ;BDLC Control register
 00EF            DLCBSTAT = REGBS+$EF ;BDLC Status register
 00F0            SPI1CR1 = REGBS+$F0 ;spi 1 control1 reg
 00F1            SPI1CR2 = REGBS+$F1 ;spi 1 control2 reg
 00F2            SPI1BR = REGBS+$F2 ;spi 1 baud reg
 00F3            SPI1SR = REGBS+$F3 ;spi 1 status reg hi
 021E           
 00F5            SP1DR = REGBS+$F5 ;spi 1 data reg
 021E           
 00F8            SPI2CR1 = REGBS+$F8 ;spi 2 control1 reg
 00F9            SPI2CR2 = REGBS+$F9 ;spi 2 control2 reg
 00FA            SPI2BR = REGBS+$FA ;spi 2 baud reg
 00FB            SPI2SR = REGBS+$FB ;spi 2 status reg hi
 021E           
 00FD            SP2DR = REGBS+$FD ;spi 2 data reg
 021E           
 0100            FCLKDIV = REGBS+$100 ;FLASH clock divider
 0101            FSEC = REGBS+$101 ;FLASH security register
 021E           
 0103            FCNFG = REGBS+$103 ;FLASH configuration register
 0104            FPROT = REGBS+$104 ;FLASH protection register
 0105            FSTAT = REGBS+$105 ;FLASH status register
 0106            FCMD = REGBS+$106 ;FLASH command register
 021E           
 0110            ECLKDIV = REGBS+$110 ;EEPROM clock divider
 021E           
 0113            ECNFG = REGBS+$113 ;EEPROM configuration register
 0114            EPROT = REGBS+$114 ;EEPROM protection register
 0115            ESTAT = REGBS+$115 ;EEPROM status register
 0116            ECMD = REGBS+$116 ;EEPROM command register
 021E           
 0120            ATD1CTL0 = REGBS+$120 ;ADC1 control 0 (reserved)
 0121            ATD1CTL1 = REGBS+$121 ;ADC1 control 1 (reserved)
 0122            ATD1CTL2 = REGBS+$122 ;ADC1 control 2
 0123            ATD1CTL3 = REGBS+$123 ;ADC1 control 3
 0124            ATD1CTL4 = REGBS+$124 ;ADC1 control 4
 0125            ATD1CTL5 = REGBS+$125 ;ADC1 control 5
 0126            ATD1STAT = REGBS+$126 ;ADC1 status register hi
 0127            *ATD1STAT = REGBS+$127 ;ADC1 status register lo
 0128            ATD1TEST = REGBS+$128 ;ADC1 test (reserved)
 0129            *ATD1TEST = REGBS+$129 ;
 021E           
 012D            ATDDIEN = REGBS+$12D ;ADC1 INPUT ENABLE REGISTER
 021E           
 012F            PORTAD1 = REGBS+$12F ;port ADC1 = input only
 0130            ADR10H = REGBS+$130 ;ADC1 result 0 register
 0132            ADR11H = REGBS+$132 ;ADC1 result 1 register
 0134            ADR12H = REGBS+$134 ;ADC1 result 2 register
 0136            ADR13H = REGBS+$136 ;ADC1 result 3 register
 0138            ADR14H = REGBS+$138 ;ADC1 result 4 register
 013A            ADR15H = REGBS+$13A ;ADC1 result 5 register
 013C            ADR16H = REGBS+$13C ;ADC1 result 6 register
 013E            ADR17H = REGBS+$13E ;ADC1 result 7 register
 0140            CAN0CTL0 = REGBS+$140 ;CAN0 control register 0
 0141            CAN0CTL1 = REGBS+$141 ;CAN0 control register 1
 0142            CAN0BTR0 = REGBS+$142 ;CAN0 bus timing register 0
 0143            CAN0BTR1 = REGBS+$143 ;CAN0 bus timing register 1
 0144            CAN0RFLG = REGBS+$144 ;CAN0 receiver flags
 0145            CAN0RIER = REGBS+$145 ;CAN0 receiver interrupt enables
 0146            CAN0TFLG = REGBS+$146 ;CAN0 transmit flags
 0147            CAN0TIER = REGBS+$147 ;CAN0 transmit interrupt enables
 0148            CAN0TARQ = REGBS+$148 ;CAN0 transmit message abort control
 0149            CAN0TAAK = REGBS+$149 ;CAN0 transmit message abort status
 014A            CAN0TBEL = REGBS+$14A ;CAN0 transmit buffer select
 014B            CAN0IDAC = REGBS+$14B ;CAN0 identfier acceptancecontrol
 021E           
 014E            CAN0RERR = REGBS+$14E ;CAN0 Receive error counter
 014F            CAN0TERR = REGBS+$14F ;CAN0 Transmit error counter
 0150            CAN0IDA0 = REGBS+$150 ;CAN0 Identifier acceptanceregister 0
 0151            CAN0IDA1 = REGBS+$151 ;CAN0 Identifier acceptanceregister 1
 0152            CAN0IDA2 = REGBS+$152 ;CAN0 Identifier acceptanceregister 2
 0153            CAN0IDA3 = REGBS+$153 ;CAN0 Identifier acceptanceregister 3
 0154            CAN0IDM0 = REGBS+$154 ;CAN0 Identifier mask register 0
 0155            CAN0IDM1 = REGBS+$155 ;CAN0 Identifier mask register 1
 0156            CAN0IDM2 = REGBS+$156 ;CAN0 Identifier mask register 2
 0157            CAN0IDM3 = REGBS+$157 ;CAN0 Identifier mask register 3
 0158            CAN0IDA4 = REGBS+$158 ;CAN0 Identifier acceptanceregister 4
 0159            CAN0IDA5 = REGBS+$159 ;CAN0 Identifier acceptanceregister 5
 015A            CAN0IDA6 = REGBS+$15A ;CAN0 Identifier acceptanceregister 6
 015B            CAN0IDA7 = REGBS+$15B ;CAN0 Identifier acceptanceregister 7
 015C            CAN0IDM4 = REGBS+$15C ;CAN0 Identifier mask register 4
 015D            CAN0IDM5 = REGBS+$15D ;CAN0 Identifier mask register 5
 015E            CAN0IDM6 = REGBS+$15E ;CAN0 Identifier mask register 6
 015F            CAN0IDM7 = REGBS+$15F ;CAN0 Identifier mask register 7
 0160            CAN0RXFG = REGBS+$160 ;CAN0 RX foregroundbuffer thru +$16F
 0170            CAN0TXFG = REGBS+$170 ;CAN0 TX foregroundbuffer thru +$17F
 021E           
 0180            CAN1CTL0 = REGBS+$180 ;CAN1 control register 0
 0181            CAN1CTL1 = REGBS+$181 ;CAN1 control register 1
 0182            CAN1BTR0 = REGBS+$182 ;CAN1 bus timing register 0
 0183            CAN1BTR1 = REGBS+$183 ;CAN1 bus timing register 1
 0184            CAN1RFLG = REGBS+$184 ;CAN1 receiver flags
 0185            CAN1RIER = REGBS+$185 ;CAN1 receiver interrupt enables
 0186            CAN1TFLG = REGBS+$186 ;CAN1 transmit flags
 0187            CAN1TIER = REGBS+$187 ;CAN1 transmit interrupt enables
 0188            CAN1TARQ = REGBS+$188 ;CAN1 transmit message abort control
 0189            CAN1TAAK = REGBS+$189 ;CAN1 transmit message abort status
 018A            CAN1TBEL = REGBS+$18A ;CAN1 transmit buffer select
 018B            CAN1IDAC = REGBS+$18B ;CAN1 identfier acceptancecontrol
 021E           
 018E            CAN1RERR = REGBS+$18E ;CAN1 Receive error counter
 018F            CAN1TERR = REGBS+$18F ;CAN1 Transmit error counter
 0190            CAN1IDA0 = REGBS+$190 ;CAN1 Identifier acceptanceregister 0
 0191            CAN1IDA1 = REGBS+$191 ;CAN1 Identifier acceptanceregister 1
 0192            CAN1IDA2 = REGBS+$192 ;CAN1 Identifier acceptanceregister 2
 0193            CAN1IDA3 = REGBS+$193 ;CAN1 Identifier acceptanceregister 3
 0194            CAN1IDM0 = REGBS+$194 ;CAN1 Identifier mask register 0
 0195            CAN1IDM1 = REGBS+$195 ;CAN1 Identifier mask register 1
 0196            CAN1IDM2 = REGBS+$196 ;CAN1 Identifier mask register 2
 0197            CAN1IDM3 = REGBS+$197 ;CAN1 Identifier mask register 3
 0198            CAN1IDA4 = REGBS+$198 ;CAN1 Identifier acceptanceregister 4
 0199            CAN1IDA5 = REGBS+$199 ;CAN1 Identifier acceptanceregister 5
 019A            CAN1IDA6 = REGBS+$19A ;CAN1 Identifier acceptanceregister 6
 019B            CAN1IDA7 = REGBS+$19B ;CAN1 Identifier acceptanceregister 7
 019C            CAN1IDM4 = REGBS+$19C ;CAN1 Identifier mask register 4
 019D            CAN1IDM5 = REGBS+$19D ;CAN1 Identifier mask register 5
 019E            CAN1IDM6 = REGBS+$19E ;CAN1 Identifier mask register 6
 019F            CAN1IDM7 = REGBS+$19F ;CAN1 Identifier mask register 7
 01A0            CAN1RXFG = REGBS+$1A0 ;CAN1 RX foregroundbuffer thru +$1AF
 01B0            CAN1TXFG = REGBS+$1B0 ;CAN1 TX foregroundbuffer thru +$1BF
 021E           
 01C0            CAN2CTL0 = REGBS+$1C0 ;CAN2 control register 0
 01C1            CAN2CTL1 = REGBS+$1C1 ;CAN2 control register 1
 01C2            CAN2BTR0 = REGBS+$1C2 ;CAN2 bus timing register 0
 01C3            CAN2BTR1 = REGBS+$1C3 ;CAN2 bus timing register 1
 01C4            CAN2RFLG = REGBS+$1C4 ;CAN2 receiver flags
 01C5            CAN2RIER = REGBS+$1C5 ;CAN2 receiver interrupt enables
 01C6            CAN2TFLG = REGBS+$1C6 ;CAN2 transmit flags
 01C7            CAN2TIER = REGBS+$1C7 ;CAN2 transmit interrupt enables
 01C8            CAN2TARQ = REGBS+$1C8 ;CAN2 transmit message abort control
 01C9            CAN2TAAK = REGBS+$1C9 ;CAN2 transmit message abort status
 01CA            CAN2TBEL = REGBS+$1CA ;CAN2 transmit buffer select
 01CB            CAN2IDAC = REGBS+$1CB ;CAN2 identfier acceptancecontrol
 021E           
 01CE            CAN2RERR = REGBS+$1CE ;CAN2 Receive error counter
 01CF            CAN2TERR = REGBS+$1CF ;CAN2 Transmit error counter
 01D0            CAN2IDA0 = REGBS+$1D0 ;CAN2 Identifier acceptanceregister 0
 01D1            CAN2IDA1 = REGBS+$1D1 ;CAN2 Identifier acceptanceregister 1
 01D2            CAN2IDA2 = REGBS+$1D2 ;CAN2 Identifier acceptanceregister 2
 01D3            CAN2IDA3 = REGBS+$1D3 ;CAN2 Identifier acceptanceregister 3
 01D4            CAN2IDM0 = REGBS+$1D4 ;CAN2 Identifier mask register 0
 01D5            CAN2IDM1 = REGBS+$1D5 ;CAN2 Identifier mask register 1
 01D6            CAN2IDM2 = REGBS+$1D6 ;CAN2 Identifier mask register 2
 01D7            CAN2IDM3 = REGBS+$1D7 ;CAN2 Identifier mask register 3
 01D8            CAN2IDA4 = REGBS+$1D8 ;CAN2 Identifier acceptanceregister 4
 01D9            CAN2IDA5 = REGBS+$1D9 ;CAN2 Identifier acceptanceregister 5
 01DA            CAN2IDA6 = REGBS+$1DA ;CAN2 Identifier acceptanceregister 6
 01DB            CAN2IDA7 = REGBS+$1DB ;CAN2 Identifier acceptanceregister 7
 01DC            CAN2IDM4 = REGBS+$1DC ;CAN2 Identifier mask register 4
 01DD            CAN2IDM5 = REGBS+$1DD ;CAN2 Identifier mask register 5
 01DE            CAN2IDM6 = REGBS+$1DE ;CAN2 Identifier mask register 6
 01DF            CAN2IDM7 = REGBS+$1DF ;CAN2 Identifier mask register 7
 01E0            CAN2RXFG = REGBS+$1E0 ;CAN2 RX foregroundbuffer thru +$1EF
 01F0            CAN2TXFG = REGBS+$1F0 ;CAN2 TX foregroundbuffer thru +$1FF
 021E           
 0200            CAN3CTL0 = REGBS+$200 ;CAN3 control register 0
 0201            CAN3CTL1 = REGBS+$201 ;CAN3 control register 1
 0202            CAN3BTR0 = REGBS+$202 ;CAN3 bus timing register 0
 0203            CAN3BTR1 = REGBS+$203 ;CAN3 bus timing register 1
 0204            CAN3RFLG = REGBS+$204 ;CAN3 receiver flags
 0205            CAN3RIER = REGBS+$205 ;CAN3 receiver interrupt enables
 0206            CAN3TFLG = REGBS+$206 ;CAN3 transmit flags
 0207            CAN3TIER = REGBS+$207 ;CAN3 transmit interrupt enables
 0208            CAN3TARQ = REGBS+$208 ;CAN3 transmit message abort control
 0209            CAN3TAAK = REGBS+$209 ;CAN3 transmit message abort status
 020A            CAN3TBEL = REGBS+$20A ;CAN3 transmit buffer select
 020B            CAN3IDAC = REGBS+$20B ;CAN3 identfier acceptancecontrol
 021E           
 020E            CAN3RERR = REGBS+$20E ;CAN3 Receive error counter
 020F            CAN3TERR = REGBS+$20F ;CAN3 Transmit error counter
 0210            CAN3IDA0 = REGBS+$210 ;CAN3 Identifier acceptanceregister 0
 0211            CAN3IDA1 = REGBS+$211 ;CAN3 Identifier acceptanceregister 1
 0212            CAN3IDA2 = REGBS+$212 ;CAN3 Identifier acceptanceregister 2
 0213            CAN3IDA3 = REGBS+$213 ;CAN3 Identifier acceptanceregister 3
 0214            CAN3IDM0 = REGBS+$214 ;CAN3 Identifier mask register 0
 0215            CAN3IDM1 = REGBS+$215 ;CAN3 Identifier mask register 1
 0216            CAN3IDM2 = REGBS+$216 ;CAN3 Identifier mask register 2
 0217            CAN3IDM3 = REGBS+$217 ;CAN3 Identifier mask register 3
 0218            CAN3IDA4 = REGBS+$218 ;CAN3 Identifier acceptanceregister 4
 0219            CAN3IDA5 = REGBS+$219 ;CAN3 Identifier acceptanceregister 5
 021A            CAN3IDA6 = REGBS+$21A ;CAN3 Identifier acceptanceregister 6
 021B            CAN3IDA7 = REGBS+$21B ;CAN3 Identifier acceptanceregister 7
 021C            CAN3IDM4 = REGBS+$21C ;CAN3 Identifier mask register 4
 021D            CAN3IDM5 = REGBS+$21D ;CAN3 Identifier mask register 5
 021E            CAN3IDM6 = REGBS+$21E ;CAN3 Identifier mask register 6
 021F            CAN3IDM7 = REGBS+$21F ;CAN3 Identifier mask register 7
 0220            CAN3RXFG = REGBS+$220 ;CAN3 RX foregroundbuffer thru +$22F
 0230            CAN3TXFG = REGBS+$230 ;CAN3 TX foregroundbuffer thru +$23F
 021E           
 0240            PTT = REGBS+$240 ;portT data register
 0241            PTIT = REGBS+$241 ;portT input register
 0242            DDRT = REGBS+$242 ;portT direction register
 0243            RDRT = REGBS+$243 ;portT reduced drive register
 0244            PERT = REGBS+$244 ;portT pull device enable
 0245            PPST = REGBS+$245 ;portT pull polarity select
 021E           
 0248            PTS = REGBS+$248 ;portS data register
 0249            PTIS = REGBS+$249 ;portS input register
 024A            DDRS = REGBS+$24A ;portS direction register
 024B            RDRS = REGBS+$24B ;portS reduced drive register
 024C            PERS = REGBS+$24C ;portS pull device enable
 024D            PPSS = REGBS+$24D ;portS pull polarity select
 024E            WOMS = REGBS+$24E ;portS Wired Or mode register
 021E           
 0250            PTM = REGBS+$250 ;portM data register
 0251            PTIM = REGBS+$251 ;portM input register
 0252            DDRM = REGBS+$252 ;portM direction register
 0253            RDRM = REGBS+$253 ;portM reduced drive register
 0254            PERM = REGBS+$254 ;portM pull device enable
 0255            PPSM = REGBS+$255 ;portM pull polarity select
 0256            WOMM = REGBS+$256 ;portM Wired Or mode register
 0257            MODRR = REGBS+$257 ;portM Module routing register
 0258            PTP = REGBS+$258 ;portP data register
 0259            PTIP = REGBS+$259 ;portP input register
 025A            DDRP = REGBS+$25A ;portP direction register
 025B            RDRP = REGBS+$25B ;portP reduced drive register
 025C            PERP = REGBS+$25C ;portP pull device enable
 025D            PPSP = REGBS+$25D ;portP pull polarity select
 025E            PIEP = REGBS+$25E ;portP interrupt enable register
 025F            PIFP = REGBS+$25F ;portP interrupt flag register
 0260            PTH = REGBS+$260 ;portH data register
 0261            PTIH = REGBS+$261 ;portH input register
 0262            DDRH = REGBS+$262 ;portH direction register
 0263            RDRH = REGBS+$263 ;portH reduced drive register
 0264            PERH = REGBS+$264 ;portH pull device enable
 0265            PPSH = REGBS+$265 ;portH pull polarity select
 0266            PIEH = REGBS+$266 ;portH interrupt enable register
 0267            PIFH = REGBS+$267 ;portH interrupt flag register
 0268            PTJ = REGBS+$268 ;portP data register
 0269            PTIJ = REGBS+$269 ;portP input register
 026A            DDRJ = REGBS+$26A ;portP direction register
 026B            RDRJ = REGBS+$26B ;portP reduced drive register
 026C            PERJ = REGBS+$26C ;portP pull device enable
 026D            PPSJ = REGBS+$26D ;portP pull polarity select
 026E            PIEJ = REGBS+$26E ;portP interrupt enable register
 026F            PIFJ = REGBS+$26F ;portP interrupt flag register
 021E           
 0280            CAN4CTL0 = REGBS+$280 ;CAN4 control register 0
 0281            CAN4CTL1 = REGBS+$281 ;CAN4 control register 1
 0282            CAN4BTR0 = REGBS+$282 ;CAN4 bus timing register 0
 0283            CAN4BTR1 = REGBS+$283 ;CAN4 bus timing register 1
 0284            CAN4RFLG = REGBS+$284 ;CAN4 receiver flags
 0285            CAN4RIER = REGBS+$285 ;CAN4 receiver interrupt enables
 0286            CAN4TFLG = REGBS+$286 ;CAN4 transmit flags
 0287            CAN4TIER = REGBS+$287 ;CAN4 transmit interrupt enables
 0288            CAN4TARQ = REGBS+$288 ;CAN4 transmit message abort control
 0289            CAN4TAAK = REGBS+$289 ;CAN4 transmit message abort status
 028A            CAN4TBEL = REGBS+$28A ;CAN4 transmit buffer select
 028B            CAN4IDAC = REGBS+$28B ;CAN4 identfier acceptancecontrol
 021E           
 028E            CAN4RERR = REGBS+$28E ;CAN4 Receive error counter
 028F            CAN4TERR = REGBS+$28F ;CAN4 Transmit error counter
 0290            CAN4IDA0 = REGBS+$290 ;CAN4 Identifier acceptanceregister 0
 0291            CAN4IDA1 = REGBS+$291 ;CAN4 Identifier acceptanceregister 1
 0292            CAN4IDA2 = REGBS+$292 ;CAN4 Identifier acceptanceregister 2
 0293            CAN4IDA3 = REGBS+$293 ;CAN4 Identifier acceptanceregister 3
 0294            CAN4IDM0 = REGBS+$294 ;CAN4 Identifier mask register 0
 0295            CAN4IDM1 = REGBS+$295 ;CAN4 Identifier mask register 1
 0296            CAN4IDM2 = REGBS+$296 ;CAN4 Identifier mask register 2
 0297            CAN4IDM3 = REGBS+$297 ;CAN4 Identifier mask register 3
 0298            CAN4IDA4 = REGBS+$298 ;CAN4 Identifier acceptanceregister 4
 0299            CAN4IDA5 = REGBS+$299 ;CAN4 Identifier acceptanceregister 5
 029A            CAN4IDA6 = REGBS+$29A ;CAN4 Identifier acceptanceregister 6
 029B            CAN4IDA7 = REGBS+$29B ;CAN4 Identifier acceptanceregister 7
 029C            CAN4IDM4 = REGBS+$29C ;CAN4 Identifier mask register 4
 029D            CAN4IDM5 = REGBS+$29D ;CAN4 Identifier mask register 5
 029E            CAN4IDM6 = REGBS+$29E ;CAN4 Identifier mask register 6
 029F            CAN4IDM7 = REGBS+$29F ;CAN4 Identifier mask register 7
 02A0            CAN4RXFG = REGBS+$2A0 ;CAN4 RX foregroundbuffer thru +$2AF
 02B0            CAN4TXFG = REGBS+$2B0 ;CAN4 TX foregroundbuffer thru +$2BF
 021E           
 021E           ; ========================================================
 021E           ;	basicLCD	Include file with minimal support 
 021E           ;			for LCD
 021E           ;	Requires : dp256reg.asm
 021E           ;
 021E           ;	Hacked from Lcd_2PP.asm:     L  Parallel Lcd Driver 
 021E           ;         Version:       1.0   Released 11/01/2002
 021E           ;          Author:       Gary Karnes , Axiom Manufacturing
 021E           ;        Compiler:       Asm12
 021E           ;        Platform:       CML12S & PROJECT BOARD 
 021E           ;
 021E           ; ========================================================
 021E           ;
 021E           ; Equates
 0001           U21_N = $01           ; LCD unused pin
 0002           LCD_RW = $02          ; LCD RW select (PT1)
 0004           LCD_RS = $04          ; LCD RS select	(PT2)
 0008           LCD_EN = $08          ; LCD EN select	(PT3)
 0080           U21_EN = $80
 021E           
 021E           _LCD_instruction::
 021E 3B                 pshd
 021F 34                 pshx
 0220 35                 pshy
 0221 180F               tba
 0223 160298             jsr LD2PP_Instruction
 0226 31                 puly
 0227 30                 pulx
 0228 3A                 puld
 0229 3D                 rts
 022A           _LCD_display::
 022A 3B                 pshd
 022B 34                 pshx
 022C 35                 pshy
 022D 180F               tba
 022F 160290             jsr LCD2PP_Data
 0232 31                 puly
 0233 30                 pulx
 0234 3A                 puld
 0235 3D                 rts
 0236                    
 0236           ;-----------
 0236           _Lcd2PP_Init::
 0236 3B                 pshd
 0237 34                 pshx
 0238 35                 pshy
 0239 160240             jsr Lcd2PP_Init
 023C 31                 puly
 023D 30                 pulx
 023E 3A                 puld
 023F 3D                 rts    
 0240                     
 0240           Lcd2PP_Init:	; Note : Use 4-bit init sequence (not 8-bit)  Page 3 LCD_spec.pdf
 0240           		; Bottom table contains sequence of instructions
 0240           		; Each row in the table represents one WRITE to the LCD instruction register (via Port P)
 0240           		;	First instruction involves only a 4-bit instruction (one WRITE)
 0240           		;	Following instructions involve 8 bit instruction, therefore
 0240           		;		2 * 4-bit writes
 0240           
 0240           	; "System init"
 0240           	; Setup Port T for output
 0240 180B0F0242           movb #$0F,DDRT        ; setup port T
 0245 180B000240           movb #$00,PTT         ; all low
 024A                   ; Disable SPI AND setup SPI1 as four output bits
 024A 1C025A0F                bset  DDRP,#$0F           ; set P0-3 as outputs
 024E 1D00F040            bclr  SPI1CR1,#$40    ; Disable SP by turning SPI1 off
 0252           
 0252 180BFE0252           movb #$FE,DDRM        ; set PM1-7 as outputs
 0257 180B000250           movb #$00,PTM         ; D.P.(PM2) = Off, U7_EN(PM3)= low,
 025C                                           ; SS0*(PM4), SS1*(PM5), SS2*(PM6) = Low
 025C                                           ; Heat(PM7) = Off
 025C           
 025C 1D02400E            bclr    PTT,LCD_RW+LCD_RS+LCD_EN  ; select lcd commands Cs=0 En=0
 0260           
 0260 1602DE              jsr      DELAY50M
 0263 8602                ldaa     #$02         ; Set to 4-bit operation (0010)
 0265 1602A4              jsr      LCD2PP_4     ; This first instruction is only 4 bits long!!!  Rest are 8 bits.  
 0268 1602DE              jsr      DELAY50M
 026B           
 026B                   ;  ldaa     #$2c                ; Function Set = 001(D/L)NF** where D/L = 0(4-bit) N=1(2-lines) F=0(font=5x7 dots)
 026B 8628                ldaa     #$28         ; Function Set = 001(D/L)NF** where D/L = 0(4-bit) N=1(2-lines) F=0(font=5x7 dots)
 026D 160298              jsr      LD2PP_Instruction         
 0270 1602EC              jsr      DELAY10M         
 0273           
 0273 860E                ldaa      #$0e        ; Display On/off Control = 00001DCB where D=1(display on) C=1(cursor on) B=0 (blink off)
 0275 160298              jsr      LD2PP_Instruction          
 0278 1602EC              jsr      DELAY10M          
 027B                           
 027B 8601                ldaa     #$01         ; Clear display = 00000001
 027D 160298              jsr      LD2PP_Instruction           
 0280 1602E7              jsr      DELAY20M          
 0283 8680                ldaa     #$80         ; DDRAM Address Set = 01xxxxxx where xxxxxx = address
 0285 160298              jsr      LD2PP_Instruction
 0288 1602EC              jsr      DELAY10M        
 028B           
 028B           ; Reset Lcd states to rest
 028B 1D02400E           bclr    PTT,LCD_RS+LCD_RW+LCD_EN ; turn all signals off on lcd
 028F 3D                  rts
 0290           ;
 0290           ;-----------------------------------------------
 0290           ; Lcd Routines
 0290           ;
 0290           ; Write a byte to the LCD Data Register
 0290           LCD2PP_Data:
 0290 1C024004        bset  PTT,LCD_RS     ; select lcd data buffer RS=1
 0294 1602D1          jsr   LCD_W_8        ; write byte
 0297 3D              rts
 0298           
 0298           ; Write a byte to the LCD Instruction Register (leaves LCD in Data mode)
 0298           LD2PP_Instruction:
 0298 1D024004          bclr   PTT,LCD_RS        ; select lcd command buffer
 029C 1602D1            jsr    LCD_W_8           ; wait
 029F 1C024004          bset   PTT,LCD_RS        ; select data buffer
 02A3 3D                rts
 02A4           
 02A4           LCD2PP_4:			; Destroys a and b
 02A4 1C024880           bset   PTS,#U21_EN     ; set U21_EN high so that latch becomes transparent
 02A8 1602F5             jsr      DELAY1MS      ; delay     
 02AB F60258             ldab     PTP              ; Port P
 02AE C4F0               andb     #$f0             ; get only bits 4 - 7
 02B0 840F               anda     #$0f             ; get data
 02B2 1806               aba
 02B4 7A0258             staa     PTP              ; save data 
 02B7                   //For ;LCD's write cycle, Enable must pulse high and then low (for specified time)
 02B7 1D024008           bclr     PTT,LCD_EN       ; enable low
 02BB 1602F5             jsr      DELAY1MS         ; delay for LCD
 02BE 1C024008           bset     PTT,LCD_EN       ; latch data
 02C2 1602F5             jsr      DELAY1MS         ; delay for LCD 
 02C5 1D024008           bclr     PTT,LCD_EN           ; enable low
 02C9 1602F5             jsr      DELAY1MS
 02CC 1D024880           bclr  PTS,#U21_EN    ; set U21_EN low to isolate LCD from parallel control (outputs are latched)
 02D0 3D                 rts
 02D1           ;
 02D1           ;
 02D1           ; Lcd Write 8 bit Data , lower 4 bits first in acc A   (Destroys A)
 02D1           LCD_W_8:					
 02D1 36                 psha                     ; save a 
 02D2 44                 lsra                     ; shift upper 4 bits to lower
 02D3 44                 lsra
 02D4 44                 lsra
 02D5 44                 lsra
 02D6 1602A4             jsr      LCD2PP_4        ; write upper 4 bits to lcd
 02D9 32                 pula
 02DA 1602A4             jsr      LCD2PP_4         ; write lower 4 bits to lcd
 02DD 3D                 rts
 02DE                                                   
 02DE           
 02DE           ;
 02DE           ; Delay routines
 02DE           ;
 02DE           ;
 02DE           ; Generate a 50 ms delay
 02DE           DELAY50M:
 02DE 34                  pshx
 02DF CEC34E              ldx  #49998      ; delay 50,000 usecs,
 02E2 1602FE              jsr  DELML01     ; call usec delay
 02E5 30                  pulx
 02E6 3D                  rts
 02E7           ;
 02E7           ;
 02E7           ; Generate a 20 ms delay
 02E7           DELAY20M:
 02E7 0703                bsr  DELAY10M
 02E9 0701                bsr  DELAY10M 
 02EB 3D                  rts
 02EC           ;
 02EC           ; Generate a 10 ms delay
 02EC           DELAY10M:                            ; jsr=4cyles
 02EC 34                  pshx             ; 2 cycles ,save x
 02ED CE270E              ldx  #9998       ; 2 cycles,delay 9998 usec + 2 for this routine
 02F0 1602FE              jsr  DELML01     ; call usec delay, this delay offset in sub
 02F3 30                  pulx             ; 3 cycles restore x
 02F4 3D                  rts              ; 5 cycles
 02F5           ;
 02F5           ;
 02F5           ; Generate a 1 ms delay
 02F5           DELAY1MS:
 02F5                                      ; jsr=4cyles
 02F5 34                  pshx             ; 2 cycles ,save x
 02F6 CE03E6              ldx  #998       ; 2 cycles,delay 9998 usec + 2 for this routine
 02F9 1602FE              jsr  DELML01     ; call usec delay, this delay offset in sub
 02FC 30                  pulx             ; 3 cycles restore x
 02FD 3D                  rts              ; 5 cycles
 02FE           
 02FE           
 02FE           ;
 02FE           ; 8 cycles = 1 usec e = 8mhz
 02FE           DELML01:
 02FE A7                  nop              ; 1 cycle
 02FF A7                  nop              ; 1 cycle
 0300 A7                  nop              ; 1 cycle
 0301 A7                  nop              ; 1 cycle
 0302 09                  dex              ; 1 cycle 
 0303 26F9                bne   DELML01    ; 3 cycles
 0305 3D                  rts              ; 5 cycles
 0306           
                        .area bss
 0000                   .dbfile Assign44.C
 0000           _key::
 0000                   .blkb 1
 0001                   .dbsym e key _key c
                        .area text
 0306                   .dbfile Assign44.C
 0306           L20:
 0306 4F62737461636C652064657465637465  .byte 'O,'b,'s,'t,'a,'c,'l,'e,32,'d,'e,'t,'e,'c,'t,'e
 0316 642E20526F626F7420747572696E6720  .byte 'd,46,32,'R,'o,'b,'o,'t,32,'t,'u,'r,'i,'n,'g,32
 0326 726967687420696E2074687265652073  .byte 'r,'i,'g,'h,'t,32,'i,'n,32,'t,'h,'r,'e,'e,32,'s
 0336 65636F6E647320284C6F6F6B20617420  .byte 'e,'c,'o,'n,'d,'s,32,40,'L,'o,'o,'k,32,'a,'t,32
 0346 73746570706572206D6F746F7229210A  .byte 's,'t,'e,'p,'p,'e,'r,32,'m,'o,'t,'o,'r,41,33,10
 0356 00                .byte 0
 0357           L14:
 0357 40A00000          .word 0x40a0,0x0
 035B           L13:
 035B 3F800000          .word 0x3f80,0x0
 035F           L9:
 035F 00000000          .word 0x0,0x0
