M:\Sysc 2003\Assignment 2\assign22.lst - generated by MGTEK Assembler ASM12 V1.26 Build 144 for WIN32 (x86) - Tue Feb 05 21:16:24 2013

    1:                                 ; SYSC 2003 - Intro to Real-Time Systems - Winter 2010
    2:                                 ; Print on terminal template
    3:                                 
    4:                                 ;Works on HC12 Board
    5:          =00001000                              ORG     $1000                   ;data area
    6:                                                 
    7:     1000 54 68 65 20 72 65      message:        FCC     "The result is:"                ;string: display message
           1006 73 75 6C 74 20 69 
           100C 73 3A 
    8:     100E 00                     Result:         DB      0                               ;your result variable is this one; store the result here
    9:     100F 00                     TerminateString DB      0
   10:                                 
   11:     1010 02                      Y:             db      2
   12:     1011 14                      X:             db      20
   13:          =00004000                              ORG     $4000                   ;program area                           
   14:     4000                        start:
   15:                                                 ; YOUR PROGRAM GOES HERE
   16:                                         
   17:     4000 CF 3DFF                                LDS     #$3DFF                  ;initialize stack pointer (details later)
   18:                                 
   19:                                 
   20:     4003 B6 1010                                ldaa    Y                       ;load into a, y and then load into b 2 then multiply them and store in D. (A x b -->D)
   21:     4006 C6 02                                  ldab    #2
   22:     4008 12                                     mul
   23:     4009 7B 1010                                stab    Y                       ;Then store the value in y.
   24:     400C B6 1011                                ldaa    X                       ;Then load into a, x and subtract y then store it into a. (A - Y--->A)
   25:     400F B0 1010                                suba    Y                       
   26:     4012 C6 03                                  ldab    #3                      ;Then load into b, 3 and then multiply a and b and store the value in d. (A x b -->D)
   27:     4014 12                                     mul
   28:     4015 7B 100E                                stab    Result                  ;Store the value in Result.
   29:                                 
   30:                                 
   31:                                 
   32:     4018 CC 001A                                LDD     #BAUD19K                ;program SCI0's baud rate
   33:     401B 16 4026                                JSR     setbaud
   34:                                 
   35:     401E CD 1000                                LDY     #message                ;output the message
   36:     4021 16 4033                                JSR     putStr_sc0
   37:                                 
   38:                                 
   39:     4024 20 FE                                  BRA *
   40:                                 
   41:                                 #include "DP256reg.asm"
    1:                                 *
    2:                                 *
    3:                                 *  Define HC12 I/O register locations (9S12DP256)
    4:                                 *
    5:          =00000000              REGBS           EQU $0000    ; DP256 register bank base address
    6:                                 
    7:          =00000000              PORTA:          EQU REGBS+0   ;port A = Address lines A8 - A15
    8:          =00000001              PORTB:          EQU REGBS+1   ;port B = Address lines A0 - A7
    9:          =00000002              DDRA:           EQU REGBS+2   ;port A direction register
   10:          =00000003              DDRB:           EQU REGBS+3   ;port A direction register
   11:                                 
   12:          =00000008              PORTE:          EQU REGBS+8   ;port E = mode,IRQandcontrolsignals
   13:          =00000009              DDRE:           EQU REGBS+9   ;port E direction register
   14:          =0000000A              PEAR:           EQU REGBS+$A  ;port E assignments
   15:          =0000000B              MODE:           EQU REGBS+$B  ;Mode register
   16:          =0000000C              PUCR:           EQU REGBS+$C  ;port pull-up control register
   17:          =0000000D              RDRIV:          EQU REGBS+$D  ;port reduced drive control register
   18:          =0000000E              EBICTL:         EQU REGBS+$E  ;E stretch control
   19:                                 
   20:          =00000010              INITRM:         EQU REGBS+$10 ;Ram location register
   21:          =00000011              INITRG:         EQU REGBS+$11 ;Register location register
   22:          =00000012              INITEE:         EQU REGBS+$12 ;EEprom location register
   23:          =00000013              MISC:           EQU REGBS+$13 ;Miscellaneous Mapping control
   24:          =00000014              MTST0:          EQU REGBS+$14 ; RESERVED
   25:          =00000015              ITCR:           EQU REGBS+$15 ;Interrupt test control register
   26:          =00000016              ITEST:          EQU REGBS+$16 ;Interrupt test register
   27:          =00000017              MTST1:          EQU REGBS+$17 ; Reserved
   28:                                 
   29:          =0000001A              PARTIDH:        EQU REGBS+$1A ;Part ID high
   30:          =0000001B              PARTIDL:        EQU REGBS+$1B ;Part ID low
   31:          =0000001C              MEMSIZ0:        EQU REGBS+$1C ;memory size
   32:          =0000001D              MEMSIZ1:        EQU REGBS+$1D ;memory size
   33:          =0000001E              INTCR:          EQU REGBS+$1E ;interrupt control register
   34:          =0000001F              HPRIO:          EQU REGBS+$1F ;high priority reg
   35:                                 
   36:          =00000028              BKPCT0:         EQU REGBS+$28 ;Break control register
   37:          =00000029              BKPCT1:         EQU REGBS+$29 ;Break control register
   38:          =0000002A              BKP0X:          EQU REGBS+$2A ; Break 0 index register
   39:          =0000002B              BKP0H:          EQU REGBS+$2B ; Break 0 pointer high
   40:          =0000002C              BRP0L:          EQU REGBS+$2C ; Break 0 pointer low
   41:          =0000002D              BKP1X:          EQU REGBS+$2D ; Break 1 index register
   42:          =0000002E              BKP1H:          EQU REGBS+$2E ; Break 1 pointer high
   43:          =0000002F              BRP1L:          EQU REGBS+$2F ; Break 1 pointer low
   44:          =00000030              PPAGE:          EQU REGBS+$30 ;Program Page register
   45:                                 
   46:          =00000032              PORTK:          EQU REGBS+$32 ;Port K data
   47:          =00000033              DDRK:           EQU REGBS+$33 ;Port K direction
   48:          =00000034              SYNR:           EQU REGBS+$34 ; Synthesizer / multiplier register
   49:          =00000035              REFDV:          EQU REGBS+$35 ; Reference divider register
   50:          =00000036              CTFLG:          EQU REGBS+$36 ; RESERVED
   51:          =00000037              CRGFLG:         EQU REGBS+$37 ; PLL flags register
   52:          =00000038              CRGINT:         EQU REGBS+$38 ; PLL interrupt register
   53:          =00000039              CLKSEL:         EQU REGBS+$39 ; Clock select register
   54:          =0000003A              PLLCTL:         EQU REGBS+$3A ; PLL control register
   55:          =0000003B              RTICTL:         EQU REGBS+$3B ;Real time interrupt control
   56:          =0000003C              COPCTL:         EQU REGBS+$3C ;Watchdog control
   57:          =0000003D              FORBYP:         EQU REGBS+$3D ;
   58:          =0000003E              CTCTL:          EQU REGBS+$3E ;
   59:          =0000003F              ARMCOP:         EQU REGBS+$3F ;COP reset register
   60:                                 
   61:          =00000040              TIOS:           EQU REGBS+$40 ;timer input/output select
   62:          =00000041              CFORC:          EQU REGBS+$41 ;timer compare force
   63:          =00000042              OC7M:           EQU REGBS+$42 ;timer output compare 7 mask
   64:          =00000043              OC7D:           EQU REGBS+$43 ;timer output compare 7 data
   65:          =00000044              TCNT:           EQU REGBS+$44 ;timer counter register hi
   66:                                 *TCNT:          EQU REGBS+$45 ;timer counter register lo
   67:          =00000046              TSCR:           EQU REGBS+$46 ;timer system control register
   68:          =00000047              TTOV:           EQU REGBS+$47 ;reserved
   69:          =00000048              TCTL1:          EQU REGBS+$48 ;timer control register 1
   70:          =00000049              TCTL2:          EQU REGBS+$49 ;timer control register 2
   71:          =0000004A              TCTL3:          EQU REGBS+$4A ;timer control register 3
   72:          =0000004B              TCTL4:          EQU REGBS+$4B ;timer control register 4
   73:          =0000004C              TMSK1:          EQU REGBS+$4C ;timer interrupt mask 1
   74:          =0000004D              TMSK2:          EQU REGBS+$4D ;timer interrupt mask 2
   75:          =0000004E              TFLG1:          EQU REGBS+$4E ;timer flags 1
   76:          =0000004F              TFLG2:          EQU REGBS+$4F ;timer flags 2
   77:          =00000050              TC0:            EQU REGBS+$50 ;timer capture/compare register 0
   78:                                 *TC0:           EQU REGBS+$51 ;
   79:          =00000052              TC1:            EQU REGBS+$52 ;timer capture/compare register 1
   80:                                 *TC1:           EQU REGBS+$53 ;
   81:          =00000054              TC2:            EQU REGBS+$54 ;timer capture/compare register 2
   82:                                 *TC2:           EQU REGBS+$55 ;
   83:          =00000056              TC3:            EQU REGBS+$56 ;timer capture/compare register 3
   84:                                 *TC3:           EQU REGBS+$57 ;
   85:          =00000058              TC4:            EQU REGBS+$58 ;timer capture/compare register 4
   86:                                 *TC4:           EQU REGBS+$59 ;
   87:          =0000005A              TC5:            EQU REGBS+$5A ;timer capture/compare register 5
   88:                                 *TC5:           EQU REGBS+$5B ;
   89:          =0000005C              TC6:            EQU REGBS+$5C ;timer capture/compare register 6
   90:                                 *TC6:           EQU REGBS+$5D ;
   91:          =0000005E              TC7:            EQU REGBS+$5E ;timer capture/compare register 7
   92:                                 *TC7:           EQU REGBS+$5F ;
   93:          =00000060              PACTL:          EQU REGBS+$60 ;pulse accumulator controls
   94:          =00000061              PAFLG:          EQU REGBS+$61 ;pulse accumulator flags
   95:          =00000062              PACN3:          EQU REGBS+$62 ;pulse accumulator counter 3
   96:          =00000063              PACN2:          EQU REGBS+$63 ;pulse accumulator counter 2
   97:          =00000064              PACN1:          EQU REGBS+$64 ;pulse accumulator counter 1
   98:          =00000065              PACN0:          EQU REGBS+$65 ;pulse accumulator counter 0
   99:          =00000066              MCCTL:          EQU REGBS+$66 ;Modulus down conunter control
  100:          =00000067              MCFLG:          EQU REGBS+$67 ;down counter flags
  101:          =00000068              ICPAR:          EQU REGBS+$68 ;Input pulse accumulator control
  102:          =00000069              DLYCT:          EQU REGBS+$69 ;Delay count to down counter
  103:          =0000006A              ICOVW:          EQU REGBS+$6A ;Input control overwrite register
  104:          =0000006B              ICSYS:          EQU REGBS+$6B ;Input control system control
  105:                                 
  106:          =0000006D              TIMTST:         EQU REGBS+$6D ;timer test register
  107:                                 
  108:          =00000070              PBCTL:          EQU REGBS+$70 ; Pulse accumulator B control
  109:          =00000071              PBFLG:          EQU REGBS+$71 ; Pulse accumulator B flags
  110:          =00000072              PA3H:           EQU REGBS+$72 ; Pulse Accumulator holding register 3
  111:          =00000073              PA2H:           EQU REGBS+$73 ; Pulse Accumulator holding register 2
  112:          =00000074              PA1H:           EQU REGBS+$74 ; Pulse Accumulator holding register 1
  113:          =00000075              PA0H:           EQU REGBS+$75 ; Pulse Accumulator holding register 0
  114:          =00000076              MCCNT:          EQU REGBS+$76 ; Modulus down counter register
  115:                                 *MCCNTL:        EQU REGBS+$77 ; low byte
  116:          =00000078              TCOH:           EQU REGBS+$78 ; Capture 0 holding register
  117:          =0000007A              TC1H:           EQU REGBS+$7A ; Capture 1 holding register
  118:          =0000007C              TC2H:           EQU REGBS+$7C ; Capture 2 holding register
  119:          =0000007E              TC3H:           EQU REGBS+$7E ; Capture 3 holding register
  120:                                 
  121:          =00000080              ATD0CTL0:       EQU REGBS+$80 ;ADC control 0 (reserved)
  122:          =00000081              ATD0CTL1:       EQU REGBS+$81 ;ADC control 1 (reserved)
  123:          =00000082              ATD0CTL2:       EQU REGBS+$82 ;ADC control 2
  124:          =00000083              ATD0CTL3:       EQU REGBS+$83 ;ADC control 3
  125:          =00000084              ATD0CTL4:       EQU REGBS+$84 ;ADC control 4
  126:          =00000085              ATD0CTL5:       EQU REGBS+$85 ;ADC control 5
  127:          =00000086              ATD0STAT:       EQU REGBS+$86 ;ADC status register hi
  128:                                 *ATD0STAT       EQU REGBS+$87 ;ADC status register lo
  129:          =00000088              ATD0TEST:       EQU REGBS+$88 ;ADC test (reserved)
  130:                                 *ATD0TEST       EQU REGBS+$89 ;
  131:                                 
  132:          =0000008D              ATD0DIEN:       EQU REGBS+$8D ;
  133:                                 
  134:          =0000008F              PORTAD:         EQU REGBS+$8F ;port ADC = input only
  135:          =00000090              ADR00H:         EQU REGBS+$90 ;ADC result 0 register
  136:          =00000092              ADR01H:         EQU REGBS+$92 ;ADC result 1 register
  137:          =00000094              ADR02H:         EQU REGBS+$94 ;ADC result 2 register
  138:          =00000096              ADR03H:         EQU REGBS+$96 ;ADC result 3 register
  139:          =00000098              ADR04H:         EQU REGBS+$98 ;ADC result 4 register
  140:          =0000009A              ADR05H:         EQU REGBS+$9A ;ADC result 5 register
  141:          =0000009C              ADR06H:         EQU REGBS+$9C ;ADC result 6 register
  142:          =0000009E              ADR07H:         EQU REGBS+$9E ;ADC result 7 register
  143:                                 
  144:          =000000A0              PWME:           EQU REGBS+$A0 ;PWM enable
  145:          =000000A1              PWMPOL:         EQU REGBS+$A1 ;PWM polarity
  146:          =000000A2              PWMCLK:         EQU REGBS+$A2 ;PWM clock select register
  147:          =000000A3              PWMPRCLK:       EQU REGBS+$A3 ;PWM Prescale clock select register
  148:          =000000A4              PWMCAE:         EQU REGBS+$A4 ;PWM center align select register
  149:          =000000A5              PWMCTL:         EQU REGBS+$A5 ;PWM control register
  150:          =000000A6              PWMTST:         EQU REGBS+$A6 ;reserved
  151:          =000000A7              PWMPRSC:        EQU REGBS+$A7 ;reserved
  152:          =000000A8              PWMSCLA:        EQU REGBS+$A8 ;PWM Scale A
  153:          =000000A9              PWMSCLB:        EQU REGBS+$A9 ;PWM scale B
  154:          =000000AA              PWMSCNTA:       EQU REGBS+$AA ;reserved
  155:          =000000AB              PWMSCNTB:       EQU REGBS+$AB ;reserved
  156:          =000000AC              PWMCNT0:        EQU REGBS+$AC ;PWM channel 0 counter
  157:          =000000AD              PWMCNT1:        EQU REGBS+$AD ;PWM channel 1 counter
  158:          =000000AE              PWMCNT2:        EQU REGBS+$AE ;PWM channel 2 counter
  159:          =000000AF              PWMCNT3:        EQU REGBS+$AF ;PWM channel 3 counter
  160:          =000000B0              PWMCNT4:        EQU REGBS+$B0 ;PWM channel 4 counter
  161:          =000000B1              PWMCNT5:        EQU REGBS+$B1 ;PWM channel 5 counter
  162:          =000000B2              PWMCNT6:        EQU REGBS+$B2 ;PWM channel 6 counter
  163:          =000000B3              PWMCNT7:        EQU REGBS+$B3 ;PWM channel 7 counter
  164:          =000000B4              PWMPER0:        EQU REGBS+$B4 ;PWM channel 0 period
  165:          =000000B5              PWMPER1:        EQU REGBS+$B5 ;PWM channel 1 period
  166:          =000000B6              PWMPER2:        EQU REGBS+$B6 ;PWM channel 2 period
  167:          =000000B7              PWMPER3:        EQU REGBS+$B7 ;PWM channel 3 period
  168:          =000000B8              PWMPER4:        EQU REGBS+$B8 ;PWM channel 4 period
  169:          =000000B9              PWMPER5:        EQU REGBS+$B9 ;PWM channel 5 period
  170:          =000000BA              PWMPER6:        EQU REGBS+$BA ;PWM channel 6 period
  171:          =000000BB              PWMPER7:        EQU REGBS+$BB ;PWM channel 7 period
  172:          =000000BC              PWMDTY0:        EQU REGBS+$BC ;PWM channel 0 duty cycle
  173:          =000000BD              PWMDTY1:        EQU REGBS+$BD ;PWM channel 1 duty cycle
  174:          =000000BE              PWMDTY2:        EQU REGBS+$BE ;PWM channel 2 duty cycle
  175:          =000000BF              PWMDTY3:        EQU REGBS+$BF ;PWM channel 3 duty cycle
  176:          =000000C0              PWMDTY4:        EQU REGBS+$C0 ;PWM channel 0 duty cycle
  177:          =000000C1              PWMDTY5:        EQU REGBS+$C1 ;PWM channel 1 duty cycle
  178:          =000000C2              PWMDTY6:        EQU REGBS+$C2 ;PWM channel 2 duty cycle
  179:          =000000C3              PWMDTY7:        EQU REGBS+$C3 ;PWM channel 3 duty cycle
  180:          =000000C4              PWMSDN:         EQU REGBS+$C4 ;PWM shutdown register
  181:                                 
  182:          =000000C8              SC0BDH:         EQU REGBS+$C8 ;sci 0 baud reg hi byte
  183:          =000000C9              SC0BDL:         EQU REGBS+$C9 ;sci 0 baud reg lo byte
  184:          =000000CA              SC0CR1:         EQU REGBS+$CA ;sci 0 control1 reg
  185:          =000000CB              SC0CR2:         EQU REGBS+$CB ;sci 0 control2 reg
  186:          =000000CC              SC0SR1:         EQU REGBS+$CC ;sci 0 status reg 1
  187:          =000000CD              SC0SR2:         EQU REGBS+$CD ;sci 0 status reg 2
  188:          =000000CE              SC0DRH:         EQU REGBS+$CE ;sci 0 data reg hi
  189:          =000000CF              SC0DRL:         EQU REGBS+$CF ;sci 0 data reg lo
  190:          =000000D0              SC1BDH:         EQU REGBS+$D0 ;sci 1 baud reg hi byte
  191:          =000000D1              SC1BDL:         EQU REGBS+$D1 ;sci 1 baud reg lo byte
  192:          =000000D2              SC1CR1:         EQU REGBS+$D2 ;sci 1 control1 reg
  193:          =000000D3              SC1CR2:         EQU REGBS+$D3 ;sci 1 control2 reg
  194:          =000000D4              SC1SR1:         EQU REGBS+$D4 ;sci 1 status reg 1
  195:          =000000D5              SC1SR2:         EQU REGBS+$D5 ;sci 1 status reg 2
  196:          =000000D6              SC1DRH:         EQU REGBS+$D6 ;sci 1 data reg hi
  197:          =000000D7              SC1DRL:         EQU REGBS+$D7 ;sci 1 data reg lo
  198:          =000000D8              SPI0CR1:        EQU REGBS+$D8 ;spi 0 control1 reg
  199:          =000000D9              SPI0CR2:        EQU REGBS+$D9 ;spi 0 control2 reg
  200:          =000000DA              SPI0BR:         EQU REGBS+$DA ;spi 0 baud reg
  201:          =000000DB              SPI0SR:         EQU REGBS+$DB ;spi 0 status reg hi
  202:                                 
  203:          =000000DD              SP0DR:          EQU REGBS+$DD ;spi 0 data reg
  204:                                 
  205:          =000000E0              IBAD:           EQU REGBS+$E0 ;I2C Bus address register
  206:          =000000E1              IBFD:           EQU REGBS+$E1 ;I2C Bus frequency divider
  207:          =000000E2              IBCR:           EQU REGBS+$E2 ;I2C Bus control register
  208:          =000000E3              IBSR:           EQU REGBS+$E3 ;I2C Bus status register
  209:          =000000E4              IBDR:           EQU REGBS+$E4 ;I2C Bus message data register
  210:                                 
  211:          =000000E8              DLCBCR1:        EQU REGBS+$E8 ;BDLC Control regsiter 1
  212:          =000000E9              DLCBSVR:        EQU REGBS+$E9 ;BDLC State vector register
  213:          =000000EA              DLCBCR2:        EQU REGBS+$EA ;BDLC Control register 2
  214:          =000000EB              DLCBDR:         EQU REGBS+$EB ;BDLC Data register
  215:          =000000EC              DLCBARD:        EQU REGBS+$EC ;BDLC Analog delay register
  216:          =000000ED              DLCBRSR:        EQU REGBS+$ED ;BDLC Rate select register
  217:          =000000EE              DLCSCR:         EQU REGBS+$EE ;BDLC Control register
  218:          =000000EF              DLCBSTAT:       EQU REGBS+$EF ;BDLC Status register
  219:          =000000F0              SPI1CR1:        EQU REGBS+$F0 ;spi 1 control1 reg
  220:          =000000F1              SPI1CR2:        EQU REGBS+$F1 ;spi 1 control2 reg
  221:          =000000F2              SPI1BR:         EQU REGBS+$F2 ;spi 1 baud reg
  222:          =000000F3              SPI1SR:         EQU REGBS+$F3 ;spi 1 status reg hi
  223:                                 
  224:          =000000F5              SP1DR:          EQU REGBS+$F5 ;spi 1 data reg
  225:                                 
  226:          =000000F8              SPI2CR1:        EQU REGBS+$F8 ;spi 2 control1 reg
  227:          =000000F9              SPI2CR2:        EQU REGBS+$F9 ;spi 2 control2 reg
  228:          =000000FA              SPI2BR:         EQU REGBS+$FA ;spi 2 baud reg
  229:          =000000FB              SPI2SR:         EQU REGBS+$FB ;spi 2 status reg hi
  230:                                 
  231:          =000000FD              SP2DR:          EQU REGBS+$FD ;spi 2 data reg
  232:                                 
  233:          =00000100              FCLKDIV:        EQU REGBS+$100 ;FLASH clock divider
  234:          =00000101              FSEC:           EQU REGBS+$101 ;FLASH security register
  235:                                 
  236:          =00000103              FCNFG:          EQU REGBS+$103 ;FLASH configuration register
  237:          =00000104              FPROT:          EQU REGBS+$104 ;FLASH protection register
  238:          =00000105              FSTAT:          EQU REGBS+$105 ;FLASH status register
  239:          =00000106              FCMD:           EQU REGBS+$106 ;FLASH command register
  240:                                 
  241:          =00000110              ECLKDIV:        EQU REGBS+$110 ;EEPROM clock divider
  242:                                 
  243:          =00000113              ECNFG:          EQU REGBS+$113 ;EEPROM configuration register
  244:          =00000114              EPROT:          EQU REGBS+$114 ;EEPROM protection register
  245:          =00000115              ESTAT:          EQU REGBS+$115 ;EEPROM status register
  246:          =00000116              ECMD:           EQU REGBS+$116 ;EEPROM command register
  247:                                 
  248:          =00000120              ATD1CTL0:       EQU REGBS+$120 ;ADC1 control 0 (reserved)
  249:          =00000121              ATD1CTL1:       EQU REGBS+$121 ;ADC1 control 1 (reserved)
  250:          =00000122              ATD1CTL2:       EQU REGBS+$122 ;ADC1 control 2
  251:          =00000123              ATD1CTL3:       EQU REGBS+$123 ;ADC1 control 3
  252:          =00000124              ATD1CTL4:       EQU REGBS+$124 ;ADC1 control 4
  253:          =00000125              ATD1CTL5:       EQU REGBS+$125 ;ADC1 control 5
  254:          =00000126              ATD1STAT:       EQU REGBS+$126 ;ADC1 status register hi
  255:                                 *ATD1STAT       EQU REGBS+$127 ;ADC1 status register lo
  256:          =00000128              ATD1TEST:       EQU REGBS+$128 ;ADC1 test (reserved)
  257:                                 *ATD1TEST       EQU REGBS+$129 ;
  258:                                 
  259:          =0000012D              ATDDIEN:        EQU REGBS+$12D ;ADC1 INPUT ENABLE REGISTER
  260:                                 
  261:          =0000012F              PORTAD1:        EQU REGBS+$12F ;port ADC1 = input only
  262:          =00000130              ADR10H:         EQU REGBS+$130 ;ADC1 result 0 register
  263:          =00000132              ADR11H:         EQU REGBS+$132 ;ADC1 result 1 register
  264:          =00000134              ADR12H:         EQU REGBS+$134 ;ADC1 result 2 register
  265:          =00000136              ADR13H:         EQU REGBS+$136 ;ADC1 result 3 register
  266:          =00000138              ADR14H:         EQU REGBS+$138 ;ADC1 result 4 register
  267:          =0000013A              ADR15H:         EQU REGBS+$13A ;ADC1 result 5 register
  268:          =0000013C              ADR16H:         EQU REGBS+$13C ;ADC1 result 6 register
  269:          =0000013E              ADR17H:         EQU REGBS+$13E ;ADC1 result 7 register
  270:          =00000140              CAN0CTL0:       EQU REGBS+$140 ;CAN0 control register 0
  271:          =00000141              CAN0CTL1:       EQU REGBS+$141 ;CAN0 control register 1
  272:          =00000142              CAN0BTR0:       EQU REGBS+$142 ;CAN0 bus timing register 0
  273:          =00000143              CAN0BTR1:       EQU REGBS+$143 ;CAN0 bus timing register 1
  274:          =00000144              CAN0RFLG:       EQU REGBS+$144 ;CAN0 receiver flags
  275:          =00000145              CAN0RIER:       EQU REGBS+$145 ;CAN0 receiver interrupt enables
  276:          =00000146              CAN0TFLG:       EQU REGBS+$146 ;CAN0 transmit flags
  277:          =00000147              CAN0TIER:       EQU REGBS+$147 ;CAN0 transmit interrupt enables
  278:          =00000148              CAN0TARQ:       EQU REGBS+$148 ;CAN0 transmit message abort control
  279:          =00000149              CAN0TAAK:       EQU REGBS+$149 ;CAN0 transmit message abort status
  280:          =0000014A              CAN0TBEL:       EQU REGBS+$14A ;CAN0 transmit buffer select
  281:          =0000014B              CAN0IDAC:       EQU REGBS+$14B ;CAN0 identfier acceptance control
  282:                                 
  283:          =0000014E              CAN0RERR:       EQU REGBS+$14E ;CAN0 Receive error counter
  284:          =0000014F              CAN0TERR:       EQU REGBS+$14F ;CAN0 Transmit error counter
  285:          =00000150              CAN0IDA0:       EQU REGBS+$150 ;CAN0 Identifier acceptance register 0
  286:          =00000151              CAN0IDA1:       EQU REGBS+$151 ;CAN0 Identifier acceptance register 1
  287:          =00000152              CAN0IDA2:       EQU REGBS+$152 ;CAN0 Identifier acceptance register 2
  288:          =00000153              CAN0IDA3:       EQU REGBS+$153 ;CAN0 Identifier acceptance register 3
  289:          =00000154              CAN0IDM0:       EQU REGBS+$154 ;CAN0 Identifier mask register 0
  290:          =00000155              CAN0IDM1:       EQU REGBS+$155 ;CAN0 Identifier mask register 1
  291:          =00000156              CAN0IDM2:       EQU REGBS+$156 ;CAN0 Identifier mask register 2
  292:          =00000157              CAN0IDM3:       EQU REGBS+$157 ;CAN0 Identifier mask register 3
  293:          =00000158              CAN0IDA4:       EQU REGBS+$158 ;CAN0 Identifier acceptance register 4
  294:          =00000159              CAN0IDA5:       EQU REGBS+$159 ;CAN0 Identifier acceptance register 5
  295:          =0000015A              CAN0IDA6:       EQU REGBS+$15A ;CAN0 Identifier acceptance register 6
  296:          =0000015B              CAN0IDA7:       EQU REGBS+$15B ;CAN0 Identifier acceptance register 7
  297:          =0000015C              CAN0IDM4:       EQU REGBS+$15C ;CAN0 Identifier mask register 4
  298:          =0000015D              CAN0IDM5:       EQU REGBS+$15D ;CAN0 Identifier mask register 5
  299:          =0000015E              CAN0IDM6:       EQU REGBS+$15E ;CAN0 Identifier mask register 6
  300:          =0000015F              CAN0IDM7:       EQU REGBS+$15F ;CAN0 Identifier mask register 7
  301:          =00000160              CAN0RXFG:       EQU REGBS+$160 ;CAN0 RX foreground buffer thru +$16F
  302:          =00000170              CAN0TXFG:       EQU REGBS+$170 ;CAN0 TX foreground buffer thru +$17F
  303:                                 
  304:          =00000180              CAN1CTL0:       EQU REGBS+$180 ;CAN1 control register 0
  305:          =00000181              CAN1CTL1:       EQU REGBS+$181 ;CAN1 control register 1
  306:          =00000182              CAN1BTR0:       EQU REGBS+$182 ;CAN1 bus timing register 0
  307:          =00000183              CAN1BTR1:       EQU REGBS+$183 ;CAN1 bus timing register 1
  308:          =00000184              CAN1RFLG:       EQU REGBS+$184 ;CAN1 receiver flags
  309:          =00000185              CAN1RIER:       EQU REGBS+$185 ;CAN1 receiver interrupt enables
  310:          =00000186              CAN1TFLG:       EQU REGBS+$186 ;CAN1 transmit flags
  311:          =00000187              CAN1TIER:       EQU REGBS+$187 ;CAN1 transmit interrupt enables
  312:          =00000188              CAN1TARQ:       EQU REGBS+$188 ;CAN1 transmit message abort control
  313:          =00000189              CAN1TAAK:       EQU REGBS+$189 ;CAN1 transmit message abort status
  314:          =0000018A              CAN1TBEL:       EQU REGBS+$18A ;CAN1 transmit buffer select
  315:          =0000018B              CAN1IDAC:       EQU REGBS+$18B ;CAN1 identfier acceptance control
  316:                                 
  317:          =0000018E              CAN1RERR:       EQU REGBS+$18E ;CAN1 Receive error counter
  318:          =0000018F              CAN1TERR:       EQU REGBS+$18F ;CAN1 Transmit error counter
  319:          =00000190              CAN1IDA0:       EQU REGBS+$190 ;CAN1 Identifier acceptance register 0
  320:          =00000191              CAN1IDA1:       EQU REGBS+$191 ;CAN1 Identifier acceptance register 1
  321:          =00000192              CAN1IDA2:       EQU REGBS+$192 ;CAN1 Identifier acceptance register 2
  322:          =00000193              CAN1IDA3:       EQU REGBS+$193 ;CAN1 Identifier acceptance register 3
  323:          =00000194              CAN1IDM0:       EQU REGBS+$194 ;CAN1 Identifier mask register 0
  324:          =00000195              CAN1IDM1:       EQU REGBS+$195 ;CAN1 Identifier mask register 1
  325:          =00000196              CAN1IDM2:       EQU REGBS+$196 ;CAN1 Identifier mask register 2
  326:          =00000197              CAN1IDM3:       EQU REGBS+$197 ;CAN1 Identifier mask register 3
  327:          =00000198              CAN1IDA4:       EQU REGBS+$198 ;CAN1 Identifier acceptance register 4
  328:          =00000199              CAN1IDA5:       EQU REGBS+$199 ;CAN1 Identifier acceptance register 5
  329:          =0000019A              CAN1IDA6:       EQU REGBS+$19A ;CAN1 Identifier acceptance register 6
  330:          =0000019B              CAN1IDA7:       EQU REGBS+$19B ;CAN1 Identifier acceptance register 7
  331:          =0000019C              CAN1IDM4:       EQU REGBS+$19C ;CAN1 Identifier mask register 4
  332:          =0000019D              CAN1IDM5:       EQU REGBS+$19D ;CAN1 Identifier mask register 5
  333:          =0000019E              CAN1IDM6:       EQU REGBS+$19E ;CAN1 Identifier mask register 6
  334:          =0000019F              CAN1IDM7:       EQU REGBS+$19F ;CAN1 Identifier mask register 7
  335:          =000001A0              CAN1RXFG:       EQU REGBS+$1A0 ;CAN1 RX foreground buffer thru +$1AF
  336:          =000001B0              CAN1TXFG:       EQU REGBS+$1B0 ;CAN1 TX foreground buffer thru +$1BF
  337:                                 
  338:          =000001C0              CAN2CTL0:       EQU REGBS+$1C0 ;CAN2 control register 0
  339:          =000001C1              CAN2CTL1:       EQU REGBS+$1C1 ;CAN2 control register 1
  340:          =000001C2              CAN2BTR0:       EQU REGBS+$1C2 ;CAN2 bus timing register 0
  341:          =000001C3              CAN2BTR1:       EQU REGBS+$1C3 ;CAN2 bus timing register 1
  342:          =000001C4              CAN2RFLG:       EQU REGBS+$1C4 ;CAN2 receiver flags
  343:          =000001C5              CAN2RIER:       EQU REGBS+$1C5 ;CAN2 receiver interrupt enables
  344:          =000001C6              CAN2TFLG:       EQU REGBS+$1C6 ;CAN2 transmit flags
  345:          =000001C7              CAN2TIER:       EQU REGBS+$1C7 ;CAN2 transmit interrupt enables
  346:          =000001C8              CAN2TARQ:       EQU REGBS+$1C8 ;CAN2 transmit message abort control
  347:          =000001C9              CAN2TAAK:       EQU REGBS+$1C9 ;CAN2 transmit message abort status
  348:          =000001CA              CAN2TBEL:       EQU REGBS+$1CA ;CAN2 transmit buffer select
  349:          =000001CB              CAN2IDAC:       EQU REGBS+$1CB ;CAN2 identfier acceptance control
  350:                                 
  351:          =000001CE              CAN2RERR:       EQU REGBS+$1CE ;CAN2 Receive error counter
  352:          =000001CF              CAN2TERR:       EQU REGBS+$1CF ;CAN2 Transmit error counter
  353:          =000001D0              CAN2IDA0:       EQU REGBS+$1D0 ;CAN2 Identifier acceptance register 0
  354:          =000001D1              CAN2IDA1:       EQU REGBS+$1D1 ;CAN2 Identifier acceptance register 1
  355:          =000001D2              CAN2IDA2:       EQU REGBS+$1D2 ;CAN2 Identifier acceptance register 2
  356:          =000001D3              CAN2IDA3:       EQU REGBS+$1D3 ;CAN2 Identifier acceptance register 3
  357:          =000001D4              CAN2IDM0:       EQU REGBS+$1D4 ;CAN2 Identifier mask register 0
  358:          =000001D5              CAN2IDM1:       EQU REGBS+$1D5 ;CAN2 Identifier mask register 1
  359:          =000001D6              CAN2IDM2:       EQU REGBS+$1D6 ;CAN2 Identifier mask register 2
  360:          =000001D7              CAN2IDM3:       EQU REGBS+$1D7 ;CAN2 Identifier mask register 3
  361:          =000001D8              CAN2IDA4:       EQU REGBS+$1D8 ;CAN2 Identifier acceptance register 4
  362:          =000001D9              CAN2IDA5:       EQU REGBS+$1D9 ;CAN2 Identifier acceptance register 5
  363:          =000001DA              CAN2IDA6:       EQU REGBS+$1DA ;CAN2 Identifier acceptance register 6
  364:          =000001DB              CAN2IDA7:       EQU REGBS+$1DB ;CAN2 Identifier acceptance register 7
  365:          =000001DC              CAN2IDM4:       EQU REGBS+$1DC ;CAN2 Identifier mask register 4
  366:          =000001DD              CAN2IDM5:       EQU REGBS+$1DD ;CAN2 Identifier mask register 5
  367:          =000001DE              CAN2IDM6:       EQU REGBS+$1DE ;CAN2 Identifier mask register 6
  368:          =000001DF              CAN2IDM7:       EQU REGBS+$1DF ;CAN2 Identifier mask register 7
  369:          =000001E0              CAN2RXFG:       EQU REGBS+$1E0 ;CAN2 RX foreground buffer thru +$1EF
  370:          =000001F0              CAN2TXFG:       EQU REGBS+$1F0 ;CAN2 TX foreground buffer thru +$1FF
  371:                                 
  372:          =00000200              CAN3CTL0:       EQU REGBS+$200 ;CAN3 control register 0
  373:          =00000201              CAN3CTL1:       EQU REGBS+$201 ;CAN3 control register 1
  374:          =00000202              CAN3BTR0:       EQU REGBS+$202 ;CAN3 bus timing register 0
  375:          =00000203              CAN3BTR1:       EQU REGBS+$203 ;CAN3 bus timing register 1
  376:          =00000204              CAN3RFLG:       EQU REGBS+$204 ;CAN3 receiver flags
  377:          =00000205              CAN3RIER:       EQU REGBS+$205 ;CAN3 receiver interrupt enables
  378:          =00000206              CAN3TFLG:       EQU REGBS+$206 ;CAN3 transmit flags
  379:          =00000207              CAN3TIER:       EQU REGBS+$207 ;CAN3 transmit interrupt enables
  380:          =00000208              CAN3TARQ:       EQU REGBS+$208 ;CAN3 transmit message abort control
  381:          =00000209              CAN3TAAK:       EQU REGBS+$209 ;CAN3 transmit message abort status
  382:          =0000020A              CAN3TBEL:       EQU REGBS+$20A ;CAN3 transmit buffer select
  383:          =0000020B              CAN3IDAC:       EQU REGBS+$20B ;CAN3 identfier acceptance control
  384:                                 
  385:          =0000020E              CAN3RERR:       EQU REGBS+$20E ;CAN3 Receive error counter
  386:          =0000020F              CAN3TERR:       EQU REGBS+$20F ;CAN3 Transmit error counter
  387:          =00000210              CAN3IDA0:       EQU REGBS+$210 ;CAN3 Identifier acceptance register 0
  388:          =00000211              CAN3IDA1:       EQU REGBS+$211 ;CAN3 Identifier acceptance register 1
  389:          =00000212              CAN3IDA2:       EQU REGBS+$212 ;CAN3 Identifier acceptance register 2
  390:          =00000213              CAN3IDA3:       EQU REGBS+$213 ;CAN3 Identifier acceptance register 3
  391:          =00000214              CAN3IDM0:       EQU REGBS+$214 ;CAN3 Identifier mask register 0
  392:          =00000215              CAN3IDM1:       EQU REGBS+$215 ;CAN3 Identifier mask register 1
  393:          =00000216              CAN3IDM2:       EQU REGBS+$216 ;CAN3 Identifier mask register 2
  394:          =00000217              CAN3IDM3:       EQU REGBS+$217 ;CAN3 Identifier mask register 3
  395:          =00000218              CAN3IDA4:       EQU REGBS+$218 ;CAN3 Identifier acceptance register 4
  396:          =00000219              CAN3IDA5:       EQU REGBS+$219 ;CAN3 Identifier acceptance register 5
  397:          =0000021A              CAN3IDA6:       EQU REGBS+$21A ;CAN3 Identifier acceptance register 6
  398:          =0000021B              CAN3IDA7:       EQU REGBS+$21B ;CAN3 Identifier acceptance register 7
  399:          =0000021C              CAN3IDM4:       EQU REGBS+$21C ;CAN3 Identifier mask register 4
  400:          =0000021D              CAN3IDM5:       EQU REGBS+$21D ;CAN3 Identifier mask register 5
  401:          =0000021E              CAN3IDM6:       EQU REGBS+$21E ;CAN3 Identifier mask register 6
  402:          =0000021F              CAN3IDM7:       EQU REGBS+$21F ;CAN3 Identifier mask register 7
  403:          =00000220              CAN3RXFG:       EQU REGBS+$220 ;CAN3 RX foreground buffer thru +$22F
  404:          =00000230              CAN3TXFG:       EQU REGBS+$230 ;CAN3 TX foreground buffer thru +$23F
  405:                                 
  406:          =00000240              PTT:            EQU REGBS+$240 ;portT data register
  407:          =00000241              PTIT:           EQU REGBS+$241 ;portT input register
  408:          =00000242              DDRT:           EQU REGBS+$242 ;portT direction register
  409:          =00000243              RDRT:           EQU REGBS+$243 ;portT reduced drive register
  410:          =00000244              PERT:           EQU REGBS+$244 ;portT pull device enable
  411:          =00000245              PPST:           EQU REGBS+$245 ;portT pull polarity select
  412:                                 
  413:          =00000248              PTS:            EQU REGBS+$248 ;portS data register
  414:          =00000249              PTIS:           EQU REGBS+$249 ;portS input register
  415:          =0000024A              DDRS:           EQU REGBS+$24A ;portS direction register
  416:          =0000024B              RDRS:           EQU REGBS+$24B ;portS reduced drive register
  417:          =0000024C              PERS:           EQU REGBS+$24C ;portS pull device enable
  418:          =0000024D              PPSS:           EQU REGBS+$24D ;portS pull polarity select
  419:          =0000024E              WOMS:           EQU REGBS+$24E ;portS Wired Or mode register
  420:                                 
  421:          =00000250              PTM:            EQU REGBS+$250 ;portM data register
  422:          =00000251              PTIM:           EQU REGBS+$251 ;portM input register
  423:          =00000252              DDRM:           EQU REGBS+$252 ;portM direction register
  424:          =00000253              RDRM:           EQU REGBS+$253 ;portM reduced drive register
  425:          =00000254              PERM:           EQU REGBS+$254 ;portM pull device enable
  426:          =00000255              PPSM:           EQU REGBS+$255 ;portM pull polarity select
  427:          =00000256              WOMM:           EQU REGBS+$256 ;portM Wired Or mode register
  428:          =00000257              MODRR:          EQU REGBS+$257 ;portM Module routing register
  429:          =00000258              PTP:            EQU REGBS+$258 ;portP data register
  430:          =00000259              PTIP:           EQU REGBS+$259 ;portP input register
  431:          =0000025A              DDRP:           EQU REGBS+$25A ;portP direction register
  432:          =0000025B              RDRP:           EQU REGBS+$25B ;portP reduced drive register
  433:          =0000025C              PERP:           EQU REGBS+$25C ;portP pull device enable
  434:          =0000025D              PPSP:           EQU REGBS+$25D ;portP pull polarity select
  435:          =0000025E              PIEP:           EQU REGBS+$25E ;portP interrupt enable register
  436:          =0000025F              PIFP:           EQU REGBS+$25F ;portP interrupt flag register
  437:          =00000260              PTH:            EQU REGBS+$260 ;portH data register
  438:          =00000261              PTIH:           EQU REGBS+$261 ;portH input register
  439:          =00000262              DDRH:           EQU REGBS+$262 ;portH direction register
  440:          =00000263              RDRH:           EQU REGBS+$263 ;portH reduced drive register
  441:          =00000264              PERH:           EQU REGBS+$264 ;portH pull device enable
  442:          =00000265              PPSH:           EQU REGBS+$265 ;portH pull polarity select
  443:          =00000266              PIEH:           EQU REGBS+$266 ;portH interrupt enable register
  444:          =00000267              PIFH:           EQU REGBS+$267 ;portH interrupt flag register
  445:          =00000268              PTJ:            EQU REGBS+$268 ;portP data register
  446:          =00000269              PTIJ:           EQU REGBS+$269 ;portP input register
  447:          =0000026A              DDRJ:           EQU REGBS+$26A ;portP direction register
  448:          =0000026B              RDRJ:           EQU REGBS+$26B ;portP reduced drive register
  449:          =0000026C              PERJ:           EQU REGBS+$26C ;portP pull device enable
  450:          =0000026D              PPSJ:           EQU REGBS+$26D ;portP pull polarity select
  451:          =0000026E              PIEJ:           EQU REGBS+$26E ;portP interrupt enable register
  452:          =0000026F              PIFJ:           EQU REGBS+$26F ;portP interrupt flag register
  453:                                 
  454:          =00000280              CAN4CTL0:       EQU REGBS+$280 ;CAN4 control register 0
  455:          =00000281              CAN4CTL1:       EQU REGBS+$281 ;CAN4 control register 1
  456:          =00000282              CAN4BTR0:       EQU REGBS+$282 ;CAN4 bus timing register 0
  457:          =00000283              CAN4BTR1:       EQU REGBS+$283 ;CAN4 bus timing register 1
  458:          =00000284              CAN4RFLG:       EQU REGBS+$284 ;CAN4 receiver flags
  459:          =00000285              CAN4RIER:       EQU REGBS+$285 ;CAN4 receiver interrupt enables
  460:          =00000286              CAN4TFLG:       EQU REGBS+$286 ;CAN4 transmit flags
  461:          =00000287              CAN4TIER:       EQU REGBS+$287 ;CAN4 transmit interrupt enables
  462:          =00000288              CAN4TARQ:       EQU REGBS+$288 ;CAN4 transmit message abort control
  463:          =00000289              CAN4TAAK:       EQU REGBS+$289 ;CAN4 transmit message abort status
  464:          =0000028A              CAN4TBEL:       EQU REGBS+$28A ;CAN4 transmit buffer select
  465:          =0000028B              CAN4IDAC:       EQU REGBS+$28B ;CAN4 identfier acceptance control
  466:                                 
  467:          =0000028E              CAN4RERR:       EQU REGBS+$28E ;CAN4 Receive error counter
  468:          =0000028F              CAN4TERR:       EQU REGBS+$28F ;CAN4 Transmit error counter
  469:          =00000290              CAN4IDA0:       EQU REGBS+$290 ;CAN4 Identifier acceptance register 0
  470:          =00000291              CAN4IDA1:       EQU REGBS+$291 ;CAN4 Identifier acceptance register 1
  471:          =00000292              CAN4IDA2:       EQU REGBS+$292 ;CAN4 Identifier acceptance register 2
  472:          =00000293              CAN4IDA3:       EQU REGBS+$293 ;CAN4 Identifier acceptance register 3
  473:          =00000294              CAN4IDM0:       EQU REGBS+$294 ;CAN4 Identifier mask register 0
  474:          =00000295              CAN4IDM1:       EQU REGBS+$295 ;CAN4 Identifier mask register 1
  475:          =00000296              CAN4IDM2:       EQU REGBS+$296 ;CAN4 Identifier mask register 2
  476:          =00000297              CAN4IDM3:       EQU REGBS+$297 ;CAN4 Identifier mask register 3
  477:          =00000298              CAN4IDA4:       EQU REGBS+$298 ;CAN4 Identifier acceptance register 4
  478:          =00000299              CAN4IDA5:       EQU REGBS+$299 ;CAN4 Identifier acceptance register 5
  479:          =0000029A              CAN4IDA6:       EQU REGBS+$29A ;CAN4 Identifier acceptance register 6
  480:          =0000029B              CAN4IDA7:       EQU REGBS+$29B ;CAN4 Identifier acceptance register 7
  481:          =0000029C              CAN4IDM4:       EQU REGBS+$29C ;CAN4 Identifier mask register 4
  482:          =0000029D              CAN4IDM5:       EQU REGBS+$29D ;CAN4 Identifier mask register 5
  483:          =0000029E              CAN4IDM6:       EQU REGBS+$29E ;CAN4 Identifier mask register 6
  484:          =0000029F              CAN4IDM7:       EQU REGBS+$29F ;CAN4 Identifier mask register 7
  485:          =000002A0              CAN4RXFG:       EQU REGBS+$2A0 ;CAN4 RX foreground buffer thru +$2AF
  486:          =000002B0              CAN4TXFG:       EQU REGBS+$2B0 ;CAN4 TX foreground buffer thru +$2BF
  487:                                 
  488:                                 * End registers
   42:                                 #include "sci0api.asm"
    1:                                 ;******************************************************************************************************
    2:                                 ;SCI0 Routines - Lloyd Atkinson, Nov 2003
    3:                                 ;******************************************************************************************************
    4:                                 
    5:                                 ;Note: Simulator automatically matches to any baud rate
    6:          =00000034              BAUD9600        EQU     0052    ;9600 Divider  (8MHz ECLK) Used for Mon12
    7:          =0000001A              BAUD19K         EQU     0026    ;19200 Divider (8MHz ECLK) Used for NoICE
    8:                                 
    9:                                 ;***********************************************************************
   10:                                 ;void setbaud(int baudRate)
   11:                                 ;
   12:                                 ;Sets up SCI0 with baud rate specified in D
   13:                                 ;Sets up SC0CR1 with Wakeup By Address Mark and Long Idle Time enabled
   14:                                 ;Enables Receiver & Transmitter
   15:                                 ;***********************************************************************
   16:                                 
   17:     4026                        setbaud:
   18:                                         ;Setup SCI for receive
   19:                                                 ;Set Baud Rate
   20:     4026 5A C8                                  staa SC0BDH
   21:     4028 5B C9                                  stab SC0BDL
   22:                                                 ;Setup SC0CR1 with Wakeup By Address Mark and Long Idle Time enabled
   23:     402A 180B 0C 00CA                           movb #$0C, SC0CR1
   24:                                                 ;Enable Receiver&Transmitter
   25:     402F 4C CB 0C                               bset SC0CR2, #$0C
   26:     4032 3D                             rts
   27:                                 
   28:                                 ;*********************************************************************************
   29:     4033                        putStr_sc0: 
   30:                                 ;Accepts: Start address of output string in Y
   31:                                 ;Returns: Nothing
   32:                                 ;Destroys: Nothing
   33:                                 ;Given a start address in Y, outputs string until 
   34:                                 ;it finds null, it does not ouput the null
   35:                                 ;*********************************************************************************
   36:     4033 3B                             pshd
   37:                                 
   38:                                         ;Init Counter
   39:     4034 86 00                          ldaa #0
   40:     4036                        PutStr: 
   41:                                         ;Get character
   42:     4036 E6 EC                          ldab A, Y
   43:                                         ;Put Character
   44:     4038 16 4044                        jsr putChar_sc0
   45:                                         ;Test for Done
   46:     403B C1 00                          cmpb #0
   47:     403D 27 03                          beq DonePutStr
   48:                                                 ;Not done yet
   49:     403F 42                                     inca
   50:     4040 20 F4                                  bra PutStr
   51:                                 
   52:     4042                        DonePutStr:
   53:     4042 3A                             puld
   54:     4043 3D                             rts
   55:                                         
   56:                                 ;*********************************************************************************
   57:     4044                        putChar_sc0: 
   58:                                 ;Accepts: Character for output in B
   59:                                 ;Returns: Nothing
   60:                                 ;Destroys: Nothing
   61:                                 ;Given a character in B, polls 'Transmit Data Register Empty Flag'(TDRE) of SC0SR1
   62:                                 ;until it goes high.  Then places new character in SC0DRL data register for output
   63:                                 ;*********************************************************************************      
   64:                                         ;If SC0SR1 Bit 7 is high then we may write another byte for output
   65:     4044 4F CC 80 FC                    brclr SC0SR1, #$80, putChar_sc0
   66:                                         ;Write next character to the Data Register
   67:     4048 5B CF                          stab SC0DRL
   68:     404A 3D                             rts
   69:                                 
   70:                                 
   71:                                 ;*********************************************************************************
   72:     404B                        getChar_sc0: 
   73:                                 ;Accepts: Nothing
   74:                                 ;Returns: Input character from SCI0
   75:                                 ;Destroys: B
   76:                                 ;Polls 'Receive Data Register Flag' (RDRF) of SC0SR1 until it goes high.
   77:                                 ;Then places new character from SC0DRL in B
   78:                                 ;*********************************************************************************      
   79:                                         ;If SC0SR1 Bit 5 is high, there is a new character in SC0DRL
   80:     404B 4F CC 20 FC                    brclr SC0SR1, #$20, getChar_sc0
   81:                                         ;Read in new character from the Data Register
   82:     404F D6 CF                          ldab SC0DRL
   83:     4051 3D                             rts
   43:                                 
   44:                                                 END

Symbols:
baud19k                         *0000001a
doneputstr                      *00004042
getchar_sc0                     *0000404b
message                         *00001000
putchar_sc0                     *00004044
putstr                          *00004036
putstr_sc0                      *00004033
regbs                           *00000000
result                          *0000100e
sc0bdh                          *000000c8
sc0bdl                          *000000c9
sc0cr1                          *000000ca
sc0cr2                          *000000cb
sc0drl                          *000000cf
sc0sr1                          *000000cc
setbaud                         *00004026
x                               *00001011
y                               *00001010

